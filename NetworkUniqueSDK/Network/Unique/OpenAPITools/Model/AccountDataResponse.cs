/*
 * Unique SDK
 *
 * Unique SDK HTTP API  <b>Main connection to wss://ws-opal.unique.network (<a target=\"_blank\" href=\"https://polkadot.js.org/apps/?rpc=wss://ws-opal.unique.network\">apps ↗</a>)</b>  Secondary substrate connection to wss://ws-relay-bench.unique.network  (<a target=\"_blank\" href=\"https://polkadot.js.org/apps/?rpc=wss://ws-relay-bench.unique.network\">apps ↗</a>). Go to <a href=\"/relay/swagger\">/relay/swagger</a>  Consumable OpenAPI specification - (<a target=\"_blank\" href=\"/swagger-json\">JSON ↗</a>) (<a target=\"_blank\" href=\"/swagger-yaml\">YAML ↗</a>)
 *
 * The version of the OpenAPI document: 0.6.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// AccountDataResponse
    /// </summary>
    [DataContract(Name = "AccountDataResponse")]
    public partial class AccountDataResponse : IEquatable<AccountDataResponse>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="AccountDataResponse" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected AccountDataResponse() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="AccountDataResponse" /> class.
        /// </summary>
        /// <param name="mnemonic">The mnemonic seed gives full access to your account (required).</param>
        /// <param name="seed">The private key generated from the mnemonic (required).</param>
        /// <param name="publicKey">The public key generated from the mnemonic. The SS58 address is based on the public key (aka \&quot;Account ID\&quot;) (required).</param>
        /// <param name="keyfile">keyfile (required).</param>
        public AccountDataResponse(string mnemonic = default(string), string seed = default(string), string publicKey = default(string), AccountDataResponseKeyfile keyfile = default(AccountDataResponseKeyfile))
        {
            // to ensure "mnemonic" is required (not null)
            if (mnemonic == null)
            {
                throw new ArgumentNullException("mnemonic is a required property for AccountDataResponse and cannot be null");
            }
            this.Mnemonic = mnemonic;
            // to ensure "seed" is required (not null)
            if (seed == null)
            {
                throw new ArgumentNullException("seed is a required property for AccountDataResponse and cannot be null");
            }
            this.Seed = seed;
            // to ensure "publicKey" is required (not null)
            if (publicKey == null)
            {
                throw new ArgumentNullException("publicKey is a required property for AccountDataResponse and cannot be null");
            }
            this.PublicKey = publicKey;
            // to ensure "keyfile" is required (not null)
            if (keyfile == null)
            {
                throw new ArgumentNullException("keyfile is a required property for AccountDataResponse and cannot be null");
            }
            this.Keyfile = keyfile;
        }

        /// <summary>
        /// The mnemonic seed gives full access to your account
        /// </summary>
        /// <value>The mnemonic seed gives full access to your account</value>
        [DataMember(Name = "mnemonic", IsRequired = true, EmitDefaultValue = true)]
        public string Mnemonic { get; set; }

        /// <summary>
        /// The private key generated from the mnemonic
        /// </summary>
        /// <value>The private key generated from the mnemonic</value>
        [DataMember(Name = "seed", IsRequired = true, EmitDefaultValue = true)]
        public string Seed { get; set; }

        /// <summary>
        /// The public key generated from the mnemonic. The SS58 address is based on the public key (aka \&quot;Account ID\&quot;)
        /// </summary>
        /// <value>The public key generated from the mnemonic. The SS58 address is based on the public key (aka \&quot;Account ID\&quot;)</value>
        [DataMember(Name = "publicKey", IsRequired = true, EmitDefaultValue = true)]
        public string PublicKey { get; set; }

        /// <summary>
        /// Gets or Sets Keyfile
        /// </summary>
        [DataMember(Name = "keyfile", IsRequired = true, EmitDefaultValue = true)]
        public AccountDataResponseKeyfile Keyfile { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class AccountDataResponse {\n");
            sb.Append("  Mnemonic: ").Append(Mnemonic).Append("\n");
            sb.Append("  Seed: ").Append(Seed).Append("\n");
            sb.Append("  PublicKey: ").Append(PublicKey).Append("\n");
            sb.Append("  Keyfile: ").Append(Keyfile).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as AccountDataResponse);
        }

        /// <summary>
        /// Returns true if AccountDataResponse instances are equal
        /// </summary>
        /// <param name="input">Instance of AccountDataResponse to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(AccountDataResponse input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Mnemonic == input.Mnemonic ||
                    (this.Mnemonic != null &&
                    this.Mnemonic.Equals(input.Mnemonic))
                ) && 
                (
                    this.Seed == input.Seed ||
                    (this.Seed != null &&
                    this.Seed.Equals(input.Seed))
                ) && 
                (
                    this.PublicKey == input.PublicKey ||
                    (this.PublicKey != null &&
                    this.PublicKey.Equals(input.PublicKey))
                ) && 
                (
                    this.Keyfile == input.Keyfile ||
                    (this.Keyfile != null &&
                    this.Keyfile.Equals(input.Keyfile))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Mnemonic != null)
                {
                    hashCode = (hashCode * 59) + this.Mnemonic.GetHashCode();
                }
                if (this.Seed != null)
                {
                    hashCode = (hashCode * 59) + this.Seed.GetHashCode();
                }
                if (this.PublicKey != null)
                {
                    hashCode = (hashCode * 59) + this.PublicKey.GetHashCode();
                }
                if (this.Keyfile != null)
                {
                    hashCode = (hashCode * 59) + this.Keyfile.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
