/*
 * Unique SDK
 *
 * Unique SDK HTTP API  <b>Main connection to wss://ws-opal.unique.network (<a target=\"_blank\" href=\"https://polkadot.js.org/apps/?rpc=wss://ws-opal.unique.network\">apps ↗</a>)</b>  Secondary substrate connection to wss://ws-relay-bench.unique.network  (<a target=\"_blank\" href=\"https://polkadot.js.org/apps/?rpc=wss://ws-relay-bench.unique.network\">apps ↗</a>). Go to <a href=\"/relay/swagger\">/relay/swagger</a>  Consumable OpenAPI specification - (<a target=\"_blank\" href=\"/swagger-json\">JSON ↗</a>) (<a target=\"_blank\" href=\"/swagger-yaml\">YAML ↗</a>)
 *
 * The version of the OpenAPI document: 0.6.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// EvmSendArgumentsDto
    /// </summary>
    [DataContract(Name = "EvmSendArgumentsDto")]
    public partial class EvmSendArgumentsDto : IEquatable<EvmSendArgumentsDto>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="EvmSendArgumentsDto" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected EvmSendArgumentsDto() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="EvmSendArgumentsDto" /> class.
        /// </summary>
        /// <param name="address">The ss-58 encoded address (required).</param>
        /// <param name="abi">JSON ABI from your smart contract (required).</param>
        /// <param name="contractAddress">Ethereum address of your smart contract (required).</param>
        /// <param name="funcName">Name of function smart-contract (required).</param>
        /// <param name="args">An array of arguments you want to pass to the function call.</param>
        /// <param name="nonce">nonce.</param>
        /// <param name="value">value.</param>
        /// <param name="gasLimit">gasLimit.</param>
        /// <param name="maxFeePerGas">maxFeePerGas.</param>
        /// <param name="maxPriorityFeePerGas">maxPriorityFeePerGas.</param>
        public EvmSendArgumentsDto(string address = default(string), List<Object> abi = default(List<Object>), string contractAddress = default(string), string funcName = default(string), List<Object> args = default(List<Object>), decimal nonce = default(decimal), EvmSendArgumentsDtoValue value = default(EvmSendArgumentsDtoValue), EvmSendArgumentsDtoGasLimit gasLimit = default(EvmSendArgumentsDtoGasLimit), EvmSendArgumentsDtoMaxFeePerGas maxFeePerGas = default(EvmSendArgumentsDtoMaxFeePerGas), EvmSendArgumentsDtoMaxFeePerGas maxPriorityFeePerGas = default(EvmSendArgumentsDtoMaxFeePerGas))
        {
            // to ensure "address" is required (not null)
            if (address == null)
            {
                throw new ArgumentNullException("address is a required property for EvmSendArgumentsDto and cannot be null");
            }
            this.Address = address;
            // to ensure "abi" is required (not null)
            if (abi == null)
            {
                throw new ArgumentNullException("abi is a required property for EvmSendArgumentsDto and cannot be null");
            }
            this.Abi = abi;
            // to ensure "contractAddress" is required (not null)
            if (contractAddress == null)
            {
                throw new ArgumentNullException("contractAddress is a required property for EvmSendArgumentsDto and cannot be null");
            }
            this.ContractAddress = contractAddress;
            // to ensure "funcName" is required (not null)
            if (funcName == null)
            {
                throw new ArgumentNullException("funcName is a required property for EvmSendArgumentsDto and cannot be null");
            }
            this.FuncName = funcName;
            this.Args = args;
            this.Nonce = nonce;
            this.Value = value;
            this.GasLimit = gasLimit;
            this.MaxFeePerGas = maxFeePerGas;
            this.MaxPriorityFeePerGas = maxPriorityFeePerGas;
        }

        /// <summary>
        /// The ss-58 encoded address
        /// </summary>
        /// <value>The ss-58 encoded address</value>
        [DataMember(Name = "address", IsRequired = true, EmitDefaultValue = true)]
        public string Address { get; set; }

        /// <summary>
        /// JSON ABI from your smart contract
        /// </summary>
        /// <value>JSON ABI from your smart contract</value>
        [DataMember(Name = "abi", IsRequired = true, EmitDefaultValue = true)]
        public List<Object> Abi { get; set; }

        /// <summary>
        /// Ethereum address of your smart contract
        /// </summary>
        /// <value>Ethereum address of your smart contract</value>
        [DataMember(Name = "contractAddress", IsRequired = true, EmitDefaultValue = true)]
        public string ContractAddress { get; set; }

        /// <summary>
        /// Name of function smart-contract
        /// </summary>
        /// <value>Name of function smart-contract</value>
        [DataMember(Name = "funcName", IsRequired = true, EmitDefaultValue = true)]
        public string FuncName { get; set; }

        /// <summary>
        /// An array of arguments you want to pass to the function call
        /// </summary>
        /// <value>An array of arguments you want to pass to the function call</value>
        [DataMember(Name = "args", EmitDefaultValue = false)]
        public List<Object> Args { get; set; }

        /// <summary>
        /// Gets or Sets Nonce
        /// </summary>
        [DataMember(Name = "nonce", EmitDefaultValue = false)]
        public decimal Nonce { get; set; }

        /// <summary>
        /// Gets or Sets Value
        /// </summary>
        [DataMember(Name = "value", EmitDefaultValue = false)]
        public EvmSendArgumentsDtoValue Value { get; set; }

        /// <summary>
        /// Gets or Sets GasLimit
        /// </summary>
        [DataMember(Name = "gasLimit", EmitDefaultValue = false)]
        public EvmSendArgumentsDtoGasLimit GasLimit { get; set; }

        /// <summary>
        /// Gets or Sets MaxFeePerGas
        /// </summary>
        [DataMember(Name = "maxFeePerGas", EmitDefaultValue = false)]
        public EvmSendArgumentsDtoMaxFeePerGas MaxFeePerGas { get; set; }

        /// <summary>
        /// Gets or Sets MaxPriorityFeePerGas
        /// </summary>
        [DataMember(Name = "maxPriorityFeePerGas", EmitDefaultValue = false)]
        public EvmSendArgumentsDtoMaxFeePerGas MaxPriorityFeePerGas { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class EvmSendArgumentsDto {\n");
            sb.Append("  Address: ").Append(Address).Append("\n");
            sb.Append("  Abi: ").Append(Abi).Append("\n");
            sb.Append("  ContractAddress: ").Append(ContractAddress).Append("\n");
            sb.Append("  FuncName: ").Append(FuncName).Append("\n");
            sb.Append("  Args: ").Append(Args).Append("\n");
            sb.Append("  Nonce: ").Append(Nonce).Append("\n");
            sb.Append("  Value: ").Append(Value).Append("\n");
            sb.Append("  GasLimit: ").Append(GasLimit).Append("\n");
            sb.Append("  MaxFeePerGas: ").Append(MaxFeePerGas).Append("\n");
            sb.Append("  MaxPriorityFeePerGas: ").Append(MaxPriorityFeePerGas).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as EvmSendArgumentsDto);
        }

        /// <summary>
        /// Returns true if EvmSendArgumentsDto instances are equal
        /// </summary>
        /// <param name="input">Instance of EvmSendArgumentsDto to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(EvmSendArgumentsDto input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Address == input.Address ||
                    (this.Address != null &&
                    this.Address.Equals(input.Address))
                ) && 
                (
                    this.Abi == input.Abi ||
                    this.Abi != null &&
                    input.Abi != null &&
                    this.Abi.SequenceEqual(input.Abi)
                ) && 
                (
                    this.ContractAddress == input.ContractAddress ||
                    (this.ContractAddress != null &&
                    this.ContractAddress.Equals(input.ContractAddress))
                ) && 
                (
                    this.FuncName == input.FuncName ||
                    (this.FuncName != null &&
                    this.FuncName.Equals(input.FuncName))
                ) && 
                (
                    this.Args == input.Args ||
                    this.Args != null &&
                    input.Args != null &&
                    this.Args.SequenceEqual(input.Args)
                ) && 
                (
                    this.Nonce == input.Nonce ||
                    this.Nonce.Equals(input.Nonce)
                ) && 
                (
                    this.Value == input.Value ||
                    (this.Value != null &&
                    this.Value.Equals(input.Value))
                ) && 
                (
                    this.GasLimit == input.GasLimit ||
                    (this.GasLimit != null &&
                    this.GasLimit.Equals(input.GasLimit))
                ) && 
                (
                    this.MaxFeePerGas == input.MaxFeePerGas ||
                    (this.MaxFeePerGas != null &&
                    this.MaxFeePerGas.Equals(input.MaxFeePerGas))
                ) && 
                (
                    this.MaxPriorityFeePerGas == input.MaxPriorityFeePerGas ||
                    (this.MaxPriorityFeePerGas != null &&
                    this.MaxPriorityFeePerGas.Equals(input.MaxPriorityFeePerGas))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Address != null)
                {
                    hashCode = (hashCode * 59) + this.Address.GetHashCode();
                }
                if (this.Abi != null)
                {
                    hashCode = (hashCode * 59) + this.Abi.GetHashCode();
                }
                if (this.ContractAddress != null)
                {
                    hashCode = (hashCode * 59) + this.ContractAddress.GetHashCode();
                }
                if (this.FuncName != null)
                {
                    hashCode = (hashCode * 59) + this.FuncName.GetHashCode();
                }
                if (this.Args != null)
                {
                    hashCode = (hashCode * 59) + this.Args.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.Nonce.GetHashCode();
                if (this.Value != null)
                {
                    hashCode = (hashCode * 59) + this.Value.GetHashCode();
                }
                if (this.GasLimit != null)
                {
                    hashCode = (hashCode * 59) + this.GasLimit.GetHashCode();
                }
                if (this.MaxFeePerGas != null)
                {
                    hashCode = (hashCode * 59) + this.MaxFeePerGas.GetHashCode();
                }
                if (this.MaxPriorityFeePerGas != null)
                {
                    hashCode = (hashCode * 59) + this.MaxPriorityFeePerGas.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
