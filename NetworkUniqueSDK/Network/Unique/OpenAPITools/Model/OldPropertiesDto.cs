/*
 * Unique SDK
 *
 * Unique SDK HTTP API  <b>Main connection to wss://ws-opal.unique.network (<a target=\"_blank\" href=\"https://polkadot.js.org/apps/?rpc=wss://ws-opal.unique.network\">apps ↗</a>)</b>  Secondary substrate connection to wss://ws-relay-bench.unique.network  (<a target=\"_blank\" href=\"https://polkadot.js.org/apps/?rpc=wss://ws-relay-bench.unique.network\">apps ↗</a>). Go to <a href=\"/relay/swagger\">/relay/swagger</a>  Consumable OpenAPI specification - (<a target=\"_blank\" href=\"/swagger-json\">JSON ↗</a>) (<a target=\"_blank\" href=\"/swagger-yaml\">YAML ↗</a>)
 *
 * The version of the OpenAPI document: 0.6.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// OldPropertiesDto
    /// </summary>
    [DataContract(Name = "OldPropertiesDto")]
    public partial class OldPropertiesDto : IEquatable<OldPropertiesDto>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="OldPropertiesDto" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected OldPropertiesDto() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="OldPropertiesDto" /> class.
        /// </summary>
        /// <param name="oldSchemaVersion">oldSchemaVersion (required).</param>
        /// <param name="oldOffchainSchema">oldOffchainSchema (required).</param>
        /// <param name="oldConstOnChainSchema">oldConstOnChainSchema (required).</param>
        /// <param name="oldVariableOnChainSchema">oldVariableOnChainSchema (required).</param>
        public OldPropertiesDto(string oldSchemaVersion = default(string), string oldOffchainSchema = default(string), string oldConstOnChainSchema = default(string), string oldVariableOnChainSchema = default(string))
        {
            // to ensure "oldSchemaVersion" is required (not null)
            if (oldSchemaVersion == null)
            {
                throw new ArgumentNullException("oldSchemaVersion is a required property for OldPropertiesDto and cannot be null");
            }
            this.OldSchemaVersion = oldSchemaVersion;
            // to ensure "oldOffchainSchema" is required (not null)
            if (oldOffchainSchema == null)
            {
                throw new ArgumentNullException("oldOffchainSchema is a required property for OldPropertiesDto and cannot be null");
            }
            this.OldOffchainSchema = oldOffchainSchema;
            // to ensure "oldConstOnChainSchema" is required (not null)
            if (oldConstOnChainSchema == null)
            {
                throw new ArgumentNullException("oldConstOnChainSchema is a required property for OldPropertiesDto and cannot be null");
            }
            this.OldConstOnChainSchema = oldConstOnChainSchema;
            // to ensure "oldVariableOnChainSchema" is required (not null)
            if (oldVariableOnChainSchema == null)
            {
                throw new ArgumentNullException("oldVariableOnChainSchema is a required property for OldPropertiesDto and cannot be null");
            }
            this.OldVariableOnChainSchema = oldVariableOnChainSchema;
        }

        /// <summary>
        /// Gets or Sets OldSchemaVersion
        /// </summary>
        [DataMember(Name = "_old_schemaVersion", IsRequired = true, EmitDefaultValue = true)]
        public string OldSchemaVersion { get; set; }

        /// <summary>
        /// Gets or Sets OldOffchainSchema
        /// </summary>
        [DataMember(Name = "_old_offchainSchema", IsRequired = true, EmitDefaultValue = true)]
        public string OldOffchainSchema { get; set; }

        /// <summary>
        /// Gets or Sets OldConstOnChainSchema
        /// </summary>
        [DataMember(Name = "_old_constOnChainSchema", IsRequired = true, EmitDefaultValue = true)]
        public string OldConstOnChainSchema { get; set; }

        /// <summary>
        /// Gets or Sets OldVariableOnChainSchema
        /// </summary>
        [DataMember(Name = "_old_variableOnChainSchema", IsRequired = true, EmitDefaultValue = true)]
        public string OldVariableOnChainSchema { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class OldPropertiesDto {\n");
            sb.Append("  OldSchemaVersion: ").Append(OldSchemaVersion).Append("\n");
            sb.Append("  OldOffchainSchema: ").Append(OldOffchainSchema).Append("\n");
            sb.Append("  OldConstOnChainSchema: ").Append(OldConstOnChainSchema).Append("\n");
            sb.Append("  OldVariableOnChainSchema: ").Append(OldVariableOnChainSchema).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as OldPropertiesDto);
        }

        /// <summary>
        /// Returns true if OldPropertiesDto instances are equal
        /// </summary>
        /// <param name="input">Instance of OldPropertiesDto to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(OldPropertiesDto input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.OldSchemaVersion == input.OldSchemaVersion ||
                    (this.OldSchemaVersion != null &&
                    this.OldSchemaVersion.Equals(input.OldSchemaVersion))
                ) && 
                (
                    this.OldOffchainSchema == input.OldOffchainSchema ||
                    (this.OldOffchainSchema != null &&
                    this.OldOffchainSchema.Equals(input.OldOffchainSchema))
                ) && 
                (
                    this.OldConstOnChainSchema == input.OldConstOnChainSchema ||
                    (this.OldConstOnChainSchema != null &&
                    this.OldConstOnChainSchema.Equals(input.OldConstOnChainSchema))
                ) && 
                (
                    this.OldVariableOnChainSchema == input.OldVariableOnChainSchema ||
                    (this.OldVariableOnChainSchema != null &&
                    this.OldVariableOnChainSchema.Equals(input.OldVariableOnChainSchema))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.OldSchemaVersion != null)
                {
                    hashCode = (hashCode * 59) + this.OldSchemaVersion.GetHashCode();
                }
                if (this.OldOffchainSchema != null)
                {
                    hashCode = (hashCode * 59) + this.OldOffchainSchema.GetHashCode();
                }
                if (this.OldConstOnChainSchema != null)
                {
                    hashCode = (hashCode * 59) + this.OldConstOnChainSchema.GetHashCode();
                }
                if (this.OldVariableOnChainSchema != null)
                {
                    hashCode = (hashCode * 59) + this.OldVariableOnChainSchema.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
