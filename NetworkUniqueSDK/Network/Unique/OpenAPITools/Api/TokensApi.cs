/*
 * Unique SDK
 *
 * Unique SDK HTTP API  <b>Main connection to wss://ws-opal.unique.network (<a target=\"_blank\" href=\"https://polkadot.js.org/apps/?rpc=wss://ws-opal.unique.network\">apps ↗</a>)</b>  Secondary substrate connection to wss://ws-relay-bench.unique.network  (<a target=\"_blank\" href=\"https://polkadot.js.org/apps/?rpc=wss://ws-relay-bench.unique.network\">apps ↗</a>). Go to <a href=\"/relay/swagger\">/relay/swagger</a>  Consumable OpenAPI specification - (<a target=\"_blank\" href=\"/swagger-json\">JSON ↗</a>) (<a target=\"_blank\" href=\"/swagger-yaml\">YAML ↗</a>)
 *
 * The version of the OpenAPI document: 0.6.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using Org.OpenAPITools.Client;
using Org.OpenAPITools.Model;

namespace Org.OpenAPITools.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ITokensApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="approveRequest"></param>
        /// <param name="use"> (optional)</param>
        /// <param name="withFee"> (optional, default to false) (deprecated)</param>
        /// <param name="verify"> (optional, default to false)</param>
        /// <param name="callbackUrl"> (optional)</param>
        /// <param name="nonce"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApproveDefaultResponse</returns>
        ApproveDefaultResponse Approve(ApproveRequest approveRequest, string use = default(string), bool? withFee = default(bool?), bool? verify = default(bool?), string callbackUrl = default(string), decimal? nonce = default(decimal?), int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="approveRequest"></param>
        /// <param name="use"> (optional)</param>
        /// <param name="withFee"> (optional, default to false) (deprecated)</param>
        /// <param name="verify"> (optional, default to false)</param>
        /// <param name="callbackUrl"> (optional)</param>
        /// <param name="nonce"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ApproveDefaultResponse</returns>
        ApiResponse<ApproveDefaultResponse> ApproveWithHttpInfo(ApproveRequest approveRequest, string use = default(string), bool? withFee = default(bool?), bool? verify = default(bool?), string callbackUrl = default(string), decimal? nonce = default(decimal?), int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="burnTokenRequest"></param>
        /// <param name="use"> (optional)</param>
        /// <param name="withFee"> (optional, default to false) (deprecated)</param>
        /// <param name="verify"> (optional, default to false)</param>
        /// <param name="callbackUrl"> (optional)</param>
        /// <param name="nonce"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>BurnTokenDefaultResponse</returns>
        BurnTokenDefaultResponse BurnToken(BurnTokenRequest burnTokenRequest, string use = default(string), bool? withFee = default(bool?), bool? verify = default(bool?), string callbackUrl = default(string), decimal? nonce = default(decimal?), int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="burnTokenRequest"></param>
        /// <param name="use"> (optional)</param>
        /// <param name="withFee"> (optional, default to false) (deprecated)</param>
        /// <param name="verify"> (optional, default to false)</param>
        /// <param name="callbackUrl"> (optional)</param>
        /// <param name="nonce"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of BurnTokenDefaultResponse</returns>
        ApiResponse<BurnTokenDefaultResponse> BurnTokenWithHttpInfo(BurnTokenRequest burnTokenRequest, string use = default(string), bool? withFee = default(bool?), bool? verify = default(bool?), string callbackUrl = default(string), decimal? nonce = default(decimal?), int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createMultipleTokensMutationRequest"></param>
        /// <param name="use"> (optional)</param>
        /// <param name="withFee"> (optional, default to false) (deprecated)</param>
        /// <param name="verify"> (optional, default to false)</param>
        /// <param name="callbackUrl"> (optional)</param>
        /// <param name="nonce"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>CreateNewTokenMutationDefaultResponse</returns>
        CreateNewTokenMutationDefaultResponse CreateMultipleTokensMutation(CreateMultipleTokensMutationRequest createMultipleTokensMutationRequest, string use = default(string), bool? withFee = default(bool?), bool? verify = default(bool?), string callbackUrl = default(string), decimal? nonce = default(decimal?), int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createMultipleTokensMutationRequest"></param>
        /// <param name="use"> (optional)</param>
        /// <param name="withFee"> (optional, default to false) (deprecated)</param>
        /// <param name="verify"> (optional, default to false)</param>
        /// <param name="callbackUrl"> (optional)</param>
        /// <param name="nonce"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of CreateNewTokenMutationDefaultResponse</returns>
        ApiResponse<CreateNewTokenMutationDefaultResponse> CreateMultipleTokensMutationWithHttpInfo(CreateMultipleTokensMutationRequest createMultipleTokensMutationRequest, string use = default(string), bool? withFee = default(bool?), bool? verify = default(bool?), string callbackUrl = default(string), decimal? nonce = default(decimal?), int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createNewTokenMutationRequest"></param>
        /// <param name="use"> (optional)</param>
        /// <param name="withFee"> (optional, default to false) (deprecated)</param>
        /// <param name="verify"> (optional, default to false)</param>
        /// <param name="callbackUrl"> (optional)</param>
        /// <param name="nonce"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>CreateNewTokenMutationDefaultResponse</returns>
        CreateNewTokenMutationDefaultResponse CreateNewTokenMutation(CreateNewTokenMutationRequest createNewTokenMutationRequest, string use = default(string), bool? withFee = default(bool?), bool? verify = default(bool?), string callbackUrl = default(string), decimal? nonce = default(decimal?), int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createNewTokenMutationRequest"></param>
        /// <param name="use"> (optional)</param>
        /// <param name="withFee"> (optional, default to false) (deprecated)</param>
        /// <param name="verify"> (optional, default to false)</param>
        /// <param name="callbackUrl"> (optional)</param>
        /// <param name="nonce"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of CreateNewTokenMutationDefaultResponse</returns>
        ApiResponse<CreateNewTokenMutationDefaultResponse> CreateNewTokenMutationWithHttpInfo(CreateNewTokenMutationRequest createNewTokenMutationRequest, string use = default(string), bool? withFee = default(bool?), bool? verify = default(bool?), string callbackUrl = default(string), decimal? nonce = default(decimal?), int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deleteTokenPropertiesRequest"></param>
        /// <param name="use"> (optional)</param>
        /// <param name="withFee"> (optional, default to false) (deprecated)</param>
        /// <param name="verify"> (optional, default to false)</param>
        /// <param name="callbackUrl"> (optional)</param>
        /// <param name="nonce"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>DeleteTokenPropertiesDefaultResponse</returns>
        DeleteTokenPropertiesDefaultResponse DeleteTokenProperties(DeleteTokenPropertiesRequest deleteTokenPropertiesRequest, string use = default(string), bool? withFee = default(bool?), bool? verify = default(bool?), string callbackUrl = default(string), decimal? nonce = default(decimal?), int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deleteTokenPropertiesRequest"></param>
        /// <param name="use"> (optional)</param>
        /// <param name="withFee"> (optional, default to false) (deprecated)</param>
        /// <param name="verify"> (optional, default to false)</param>
        /// <param name="callbackUrl"> (optional)</param>
        /// <param name="nonce"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of DeleteTokenPropertiesDefaultResponse</returns>
        ApiResponse<DeleteTokenPropertiesDefaultResponse> DeleteTokenPropertiesWithHttpInfo(DeleteTokenPropertiesRequest deleteTokenPropertiesRequest, string use = default(string), bool? withFee = default(bool?), bool? verify = default(bool?), string callbackUrl = default(string), decimal? nonce = default(decimal?), int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="nestTokenRequest"></param>
        /// <param name="use"> (optional)</param>
        /// <param name="withFee"> (optional, default to false) (deprecated)</param>
        /// <param name="verify"> (optional, default to false)</param>
        /// <param name="callbackUrl"> (optional)</param>
        /// <param name="nonce"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>NestTokenDefaultResponse</returns>
        NestTokenDefaultResponse NestToken(NestTokenRequest nestTokenRequest, string use = default(string), bool? withFee = default(bool?), bool? verify = default(bool?), string callbackUrl = default(string), decimal? nonce = default(decimal?), int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="nestTokenRequest"></param>
        /// <param name="use"> (optional)</param>
        /// <param name="withFee"> (optional, default to false) (deprecated)</param>
        /// <param name="verify"> (optional, default to false)</param>
        /// <param name="callbackUrl"> (optional)</param>
        /// <param name="nonce"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of NestTokenDefaultResponse</returns>
        ApiResponse<NestTokenDefaultResponse> NestTokenWithHttpInfo(NestTokenRequest nestTokenRequest, string use = default(string), bool? withFee = default(bool?), bool? verify = default(bool?), string callbackUrl = default(string), decimal? nonce = default(decimal?), int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionId"></param>
        /// <param name="tokenId"></param>
        /// <param name="from">The ss-58 encoded address</param>
        /// <param name="to">The ss-58 encoded address</param>
        /// <param name="at">Hash of execution block (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>AllowanceResultResponse</returns>
        AllowanceResultResponse NewTokenControllerAllowance(decimal collectionId, decimal tokenId, string from, string to, string at = default(string), int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionId"></param>
        /// <param name="tokenId"></param>
        /// <param name="from">The ss-58 encoded address</param>
        /// <param name="to">The ss-58 encoded address</param>
        /// <param name="at">Hash of execution block (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of AllowanceResultResponse</returns>
        ApiResponse<AllowanceResultResponse> NewTokenControllerAllowanceWithHttpInfo(decimal collectionId, decimal tokenId, string from, string to, string at = default(string), int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="address">The ss-58 encoded address</param>
        /// <param name="collectionId"></param>
        /// <param name="at">Hash of execution block (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>AccountTokensResponse</returns>
        AccountTokensResponse NewTokenControllerGetAccountTokens(string address, decimal collectionId, string at = default(string), int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="address">The ss-58 encoded address</param>
        /// <param name="collectionId"></param>
        /// <param name="at">Hash of execution block (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of AccountTokensResponse</returns>
        ApiResponse<AccountTokensResponse> NewTokenControllerGetAccountTokensWithHttpInfo(string address, decimal collectionId, string at = default(string), int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionId"></param>
        /// <param name="tokenId"></param>
        /// <param name="address">The ss-58 encoded address</param>
        /// <param name="at">Hash of execution block (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>TokenBalanceResponse</returns>
        TokenBalanceResponse NewTokenControllerGetBalance(decimal collectionId, decimal tokenId, string address, string at = default(string), int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionId"></param>
        /// <param name="tokenId"></param>
        /// <param name="address">The ss-58 encoded address</param>
        /// <param name="at">Hash of execution block (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of TokenBalanceResponse</returns>
        ApiResponse<TokenBalanceResponse> NewTokenControllerGetBalanceWithHttpInfo(decimal collectionId, decimal tokenId, string address, string at = default(string), int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionId"></param>
        /// <param name="tokenId"></param>
        /// <param name="at">Hash of execution block (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>GetBundleResponse</returns>
        GetBundleResponse NewTokenControllerGetBundle(decimal collectionId, decimal tokenId, string at = default(string), int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionId"></param>
        /// <param name="tokenId"></param>
        /// <param name="at">Hash of execution block (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of GetBundleResponse</returns>
        ApiResponse<GetBundleResponse> NewTokenControllerGetBundleWithHttpInfo(decimal collectionId, decimal tokenId, string at = default(string), int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionId"></param>
        /// <param name="tokenId"></param>
        /// <param name="at">Hash of execution block (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>TokenByIdResponse</returns>
        TokenByIdResponse NewTokenControllerGetTokenNew(decimal collectionId, decimal tokenId, string at = default(string), int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionId"></param>
        /// <param name="tokenId"></param>
        /// <param name="at">Hash of execution block (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of TokenByIdResponse</returns>
        ApiResponse<TokenByIdResponse> NewTokenControllerGetTokenNewWithHttpInfo(decimal collectionId, decimal tokenId, string at = default(string), int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionId"></param>
        /// <param name="tokenId"></param>
        /// <param name="at">Hash of execution block (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>TokenExistsResponse</returns>
        TokenExistsResponse NewTokenControllerGetTokensExists(decimal collectionId, decimal tokenId, string at = default(string), int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionId"></param>
        /// <param name="tokenId"></param>
        /// <param name="at">Hash of execution block (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of TokenExistsResponse</returns>
        ApiResponse<TokenExistsResponse> NewTokenControllerGetTokensExistsWithHttpInfo(decimal collectionId, decimal tokenId, string at = default(string), int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionId"></param>
        /// <param name="tokenId"></param>
        /// <param name="at">Hash of execution block (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>IsBundleResponse</returns>
        IsBundleResponse NewTokenControllerIsBundle(decimal collectionId, decimal tokenId, string at = default(string), int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionId"></param>
        /// <param name="tokenId"></param>
        /// <param name="at">Hash of execution block (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of IsBundleResponse</returns>
        ApiResponse<IsBundleResponse> NewTokenControllerIsBundleWithHttpInfo(decimal collectionId, decimal tokenId, string at = default(string), int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionId"></param>
        /// <param name="tokenId"></param>
        /// <param name="at">Hash of execution block (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>TokenChildrenResponse</returns>
        TokenChildrenResponse NewTokenControllerTokenChildren(decimal collectionId, decimal tokenId, string at = default(string), int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionId"></param>
        /// <param name="tokenId"></param>
        /// <param name="at">Hash of execution block (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of TokenChildrenResponse</returns>
        ApiResponse<TokenChildrenResponse> NewTokenControllerTokenChildrenWithHttpInfo(decimal collectionId, decimal tokenId, string at = default(string), int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionId"></param>
        /// <param name="tokenId"></param>
        /// <param name="at">Hash of execution block (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>TokenOwnerResponse</returns>
        TokenOwnerResponse NewTokenControllerTokenOwner(decimal collectionId, decimal tokenId, string at = default(string), int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionId"></param>
        /// <param name="tokenId"></param>
        /// <param name="at">Hash of execution block (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of TokenOwnerResponse</returns>
        ApiResponse<TokenOwnerResponse> NewTokenControllerTokenOwnerWithHttpInfo(decimal collectionId, decimal tokenId, string at = default(string), int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionId"></param>
        /// <param name="tokenId"></param>
        /// <param name="at">Hash of execution block (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>TokenParentResponse</returns>
        TokenParentResponse NewTokenControllerTokenParent(decimal collectionId, decimal tokenId, string at = default(string), int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionId"></param>
        /// <param name="tokenId"></param>
        /// <param name="at">Hash of execution block (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of TokenParentResponse</returns>
        ApiResponse<TokenParentResponse> NewTokenControllerTokenParentWithHttpInfo(decimal collectionId, decimal tokenId, string at = default(string), int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionId"></param>
        /// <param name="tokenId"></param>
        /// <param name="at">Hash of execution block (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>TokenPropertiesResponse</returns>
        TokenPropertiesResponse NewTokenControllerTokenProperties(decimal collectionId, decimal tokenId, string at = default(string), int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionId"></param>
        /// <param name="tokenId"></param>
        /// <param name="at">Hash of execution block (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of TokenPropertiesResponse</returns>
        ApiResponse<TokenPropertiesResponse> NewTokenControllerTokenPropertiesWithHttpInfo(decimal collectionId, decimal tokenId, string at = default(string), int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionId"></param>
        /// <param name="tokenId"></param>
        /// <param name="at">Hash of execution block (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>TopmostTokenOwnerResponse</returns>
        TopmostTokenOwnerResponse NewTokenControllerTopmostTokenOwner(decimal collectionId, decimal tokenId, string at = default(string), int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionId"></param>
        /// <param name="tokenId"></param>
        /// <param name="at">Hash of execution block (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of TopmostTokenOwnerResponse</returns>
        ApiResponse<TopmostTokenOwnerResponse> NewTokenControllerTopmostTokenOwnerWithHttpInfo(decimal collectionId, decimal tokenId, string at = default(string), int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="setTokenPropertiesRequest"></param>
        /// <param name="use"> (optional)</param>
        /// <param name="withFee"> (optional, default to false) (deprecated)</param>
        /// <param name="verify"> (optional, default to false)</param>
        /// <param name="callbackUrl"> (optional)</param>
        /// <param name="nonce"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>SetTokenPropertiesDefaultResponse</returns>
        SetTokenPropertiesDefaultResponse SetTokenProperties(SetTokenPropertiesRequest setTokenPropertiesRequest, string use = default(string), bool? withFee = default(bool?), bool? verify = default(bool?), string callbackUrl = default(string), decimal? nonce = default(decimal?), int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="setTokenPropertiesRequest"></param>
        /// <param name="use"> (optional)</param>
        /// <param name="withFee"> (optional, default to false) (deprecated)</param>
        /// <param name="verify"> (optional, default to false)</param>
        /// <param name="callbackUrl"> (optional)</param>
        /// <param name="nonce"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of SetTokenPropertiesDefaultResponse</returns>
        ApiResponse<SetTokenPropertiesDefaultResponse> SetTokenPropertiesWithHttpInfo(SetTokenPropertiesRequest setTokenPropertiesRequest, string use = default(string), bool? withFee = default(bool?), bool? verify = default(bool?), string callbackUrl = default(string), decimal? nonce = default(decimal?), int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="transferTokenRequest"></param>
        /// <param name="use"> (optional)</param>
        /// <param name="withFee"> (optional, default to false) (deprecated)</param>
        /// <param name="verify"> (optional, default to false)</param>
        /// <param name="callbackUrl"> (optional)</param>
        /// <param name="nonce"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>TransferTokenDefaultResponse</returns>
        TransferTokenDefaultResponse TransferToken(TransferTokenRequest transferTokenRequest, string use = default(string), bool? withFee = default(bool?), bool? verify = default(bool?), string callbackUrl = default(string), decimal? nonce = default(decimal?), int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="transferTokenRequest"></param>
        /// <param name="use"> (optional)</param>
        /// <param name="withFee"> (optional, default to false) (deprecated)</param>
        /// <param name="verify"> (optional, default to false)</param>
        /// <param name="callbackUrl"> (optional)</param>
        /// <param name="nonce"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of TransferTokenDefaultResponse</returns>
        ApiResponse<TransferTokenDefaultResponse> TransferTokenWithHttpInfo(TransferTokenRequest transferTokenRequest, string use = default(string), bool? withFee = default(bool?), bool? verify = default(bool?), string callbackUrl = default(string), decimal? nonce = default(decimal?), int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="unnestTokenRequest"></param>
        /// <param name="use"> (optional)</param>
        /// <param name="withFee"> (optional, default to false) (deprecated)</param>
        /// <param name="verify"> (optional, default to false)</param>
        /// <param name="callbackUrl"> (optional)</param>
        /// <param name="nonce"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>UnnestTokenDefaultResponse</returns>
        UnnestTokenDefaultResponse UnnestToken(UnnestTokenRequest unnestTokenRequest, string use = default(string), bool? withFee = default(bool?), bool? verify = default(bool?), string callbackUrl = default(string), decimal? nonce = default(decimal?), int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="unnestTokenRequest"></param>
        /// <param name="use"> (optional)</param>
        /// <param name="withFee"> (optional, default to false) (deprecated)</param>
        /// <param name="verify"> (optional, default to false)</param>
        /// <param name="callbackUrl"> (optional)</param>
        /// <param name="nonce"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of UnnestTokenDefaultResponse</returns>
        ApiResponse<UnnestTokenDefaultResponse> UnnestTokenWithHttpInfo(UnnestTokenRequest unnestTokenRequest, string use = default(string), bool? withFee = default(bool?), bool? verify = default(bool?), string callbackUrl = default(string), decimal? nonce = default(decimal?), int operationIndex = 0);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ITokensApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="approveRequest"></param>
        /// <param name="use"> (optional)</param>
        /// <param name="withFee"> (optional, default to false) (deprecated)</param>
        /// <param name="verify"> (optional, default to false)</param>
        /// <param name="callbackUrl"> (optional)</param>
        /// <param name="nonce"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApproveDefaultResponse</returns>
        System.Threading.Tasks.Task<ApproveDefaultResponse> ApproveAsync(ApproveRequest approveRequest, string use = default(string), bool? withFee = default(bool?), bool? verify = default(bool?), string callbackUrl = default(string), decimal? nonce = default(decimal?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="approveRequest"></param>
        /// <param name="use"> (optional)</param>
        /// <param name="withFee"> (optional, default to false) (deprecated)</param>
        /// <param name="verify"> (optional, default to false)</param>
        /// <param name="callbackUrl"> (optional)</param>
        /// <param name="nonce"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ApproveDefaultResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ApproveDefaultResponse>> ApproveWithHttpInfoAsync(ApproveRequest approveRequest, string use = default(string), bool? withFee = default(bool?), bool? verify = default(bool?), string callbackUrl = default(string), decimal? nonce = default(decimal?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="burnTokenRequest"></param>
        /// <param name="use"> (optional)</param>
        /// <param name="withFee"> (optional, default to false) (deprecated)</param>
        /// <param name="verify"> (optional, default to false)</param>
        /// <param name="callbackUrl"> (optional)</param>
        /// <param name="nonce"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of BurnTokenDefaultResponse</returns>
        System.Threading.Tasks.Task<BurnTokenDefaultResponse> BurnTokenAsync(BurnTokenRequest burnTokenRequest, string use = default(string), bool? withFee = default(bool?), bool? verify = default(bool?), string callbackUrl = default(string), decimal? nonce = default(decimal?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="burnTokenRequest"></param>
        /// <param name="use"> (optional)</param>
        /// <param name="withFee"> (optional, default to false) (deprecated)</param>
        /// <param name="verify"> (optional, default to false)</param>
        /// <param name="callbackUrl"> (optional)</param>
        /// <param name="nonce"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (BurnTokenDefaultResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<BurnTokenDefaultResponse>> BurnTokenWithHttpInfoAsync(BurnTokenRequest burnTokenRequest, string use = default(string), bool? withFee = default(bool?), bool? verify = default(bool?), string callbackUrl = default(string), decimal? nonce = default(decimal?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createMultipleTokensMutationRequest"></param>
        /// <param name="use"> (optional)</param>
        /// <param name="withFee"> (optional, default to false) (deprecated)</param>
        /// <param name="verify"> (optional, default to false)</param>
        /// <param name="callbackUrl"> (optional)</param>
        /// <param name="nonce"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CreateNewTokenMutationDefaultResponse</returns>
        System.Threading.Tasks.Task<CreateNewTokenMutationDefaultResponse> CreateMultipleTokensMutationAsync(CreateMultipleTokensMutationRequest createMultipleTokensMutationRequest, string use = default(string), bool? withFee = default(bool?), bool? verify = default(bool?), string callbackUrl = default(string), decimal? nonce = default(decimal?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createMultipleTokensMutationRequest"></param>
        /// <param name="use"> (optional)</param>
        /// <param name="withFee"> (optional, default to false) (deprecated)</param>
        /// <param name="verify"> (optional, default to false)</param>
        /// <param name="callbackUrl"> (optional)</param>
        /// <param name="nonce"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CreateNewTokenMutationDefaultResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<CreateNewTokenMutationDefaultResponse>> CreateMultipleTokensMutationWithHttpInfoAsync(CreateMultipleTokensMutationRequest createMultipleTokensMutationRequest, string use = default(string), bool? withFee = default(bool?), bool? verify = default(bool?), string callbackUrl = default(string), decimal? nonce = default(decimal?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createNewTokenMutationRequest"></param>
        /// <param name="use"> (optional)</param>
        /// <param name="withFee"> (optional, default to false) (deprecated)</param>
        /// <param name="verify"> (optional, default to false)</param>
        /// <param name="callbackUrl"> (optional)</param>
        /// <param name="nonce"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CreateNewTokenMutationDefaultResponse</returns>
        System.Threading.Tasks.Task<CreateNewTokenMutationDefaultResponse> CreateNewTokenMutationAsync(CreateNewTokenMutationRequest createNewTokenMutationRequest, string use = default(string), bool? withFee = default(bool?), bool? verify = default(bool?), string callbackUrl = default(string), decimal? nonce = default(decimal?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createNewTokenMutationRequest"></param>
        /// <param name="use"> (optional)</param>
        /// <param name="withFee"> (optional, default to false) (deprecated)</param>
        /// <param name="verify"> (optional, default to false)</param>
        /// <param name="callbackUrl"> (optional)</param>
        /// <param name="nonce"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CreateNewTokenMutationDefaultResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<CreateNewTokenMutationDefaultResponse>> CreateNewTokenMutationWithHttpInfoAsync(CreateNewTokenMutationRequest createNewTokenMutationRequest, string use = default(string), bool? withFee = default(bool?), bool? verify = default(bool?), string callbackUrl = default(string), decimal? nonce = default(decimal?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deleteTokenPropertiesRequest"></param>
        /// <param name="use"> (optional)</param>
        /// <param name="withFee"> (optional, default to false) (deprecated)</param>
        /// <param name="verify"> (optional, default to false)</param>
        /// <param name="callbackUrl"> (optional)</param>
        /// <param name="nonce"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of DeleteTokenPropertiesDefaultResponse</returns>
        System.Threading.Tasks.Task<DeleteTokenPropertiesDefaultResponse> DeleteTokenPropertiesAsync(DeleteTokenPropertiesRequest deleteTokenPropertiesRequest, string use = default(string), bool? withFee = default(bool?), bool? verify = default(bool?), string callbackUrl = default(string), decimal? nonce = default(decimal?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deleteTokenPropertiesRequest"></param>
        /// <param name="use"> (optional)</param>
        /// <param name="withFee"> (optional, default to false) (deprecated)</param>
        /// <param name="verify"> (optional, default to false)</param>
        /// <param name="callbackUrl"> (optional)</param>
        /// <param name="nonce"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (DeleteTokenPropertiesDefaultResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<DeleteTokenPropertiesDefaultResponse>> DeleteTokenPropertiesWithHttpInfoAsync(DeleteTokenPropertiesRequest deleteTokenPropertiesRequest, string use = default(string), bool? withFee = default(bool?), bool? verify = default(bool?), string callbackUrl = default(string), decimal? nonce = default(decimal?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="nestTokenRequest"></param>
        /// <param name="use"> (optional)</param>
        /// <param name="withFee"> (optional, default to false) (deprecated)</param>
        /// <param name="verify"> (optional, default to false)</param>
        /// <param name="callbackUrl"> (optional)</param>
        /// <param name="nonce"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of NestTokenDefaultResponse</returns>
        System.Threading.Tasks.Task<NestTokenDefaultResponse> NestTokenAsync(NestTokenRequest nestTokenRequest, string use = default(string), bool? withFee = default(bool?), bool? verify = default(bool?), string callbackUrl = default(string), decimal? nonce = default(decimal?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="nestTokenRequest"></param>
        /// <param name="use"> (optional)</param>
        /// <param name="withFee"> (optional, default to false) (deprecated)</param>
        /// <param name="verify"> (optional, default to false)</param>
        /// <param name="callbackUrl"> (optional)</param>
        /// <param name="nonce"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (NestTokenDefaultResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<NestTokenDefaultResponse>> NestTokenWithHttpInfoAsync(NestTokenRequest nestTokenRequest, string use = default(string), bool? withFee = default(bool?), bool? verify = default(bool?), string callbackUrl = default(string), decimal? nonce = default(decimal?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionId"></param>
        /// <param name="tokenId"></param>
        /// <param name="from">The ss-58 encoded address</param>
        /// <param name="to">The ss-58 encoded address</param>
        /// <param name="at">Hash of execution block (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of AllowanceResultResponse</returns>
        System.Threading.Tasks.Task<AllowanceResultResponse> NewTokenControllerAllowanceAsync(decimal collectionId, decimal tokenId, string from, string to, string at = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionId"></param>
        /// <param name="tokenId"></param>
        /// <param name="from">The ss-58 encoded address</param>
        /// <param name="to">The ss-58 encoded address</param>
        /// <param name="at">Hash of execution block (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (AllowanceResultResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<AllowanceResultResponse>> NewTokenControllerAllowanceWithHttpInfoAsync(decimal collectionId, decimal tokenId, string from, string to, string at = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="address">The ss-58 encoded address</param>
        /// <param name="collectionId"></param>
        /// <param name="at">Hash of execution block (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of AccountTokensResponse</returns>
        System.Threading.Tasks.Task<AccountTokensResponse> NewTokenControllerGetAccountTokensAsync(string address, decimal collectionId, string at = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="address">The ss-58 encoded address</param>
        /// <param name="collectionId"></param>
        /// <param name="at">Hash of execution block (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (AccountTokensResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<AccountTokensResponse>> NewTokenControllerGetAccountTokensWithHttpInfoAsync(string address, decimal collectionId, string at = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionId"></param>
        /// <param name="tokenId"></param>
        /// <param name="address">The ss-58 encoded address</param>
        /// <param name="at">Hash of execution block (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of TokenBalanceResponse</returns>
        System.Threading.Tasks.Task<TokenBalanceResponse> NewTokenControllerGetBalanceAsync(decimal collectionId, decimal tokenId, string address, string at = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionId"></param>
        /// <param name="tokenId"></param>
        /// <param name="address">The ss-58 encoded address</param>
        /// <param name="at">Hash of execution block (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (TokenBalanceResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<TokenBalanceResponse>> NewTokenControllerGetBalanceWithHttpInfoAsync(decimal collectionId, decimal tokenId, string address, string at = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionId"></param>
        /// <param name="tokenId"></param>
        /// <param name="at">Hash of execution block (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GetBundleResponse</returns>
        System.Threading.Tasks.Task<GetBundleResponse> NewTokenControllerGetBundleAsync(decimal collectionId, decimal tokenId, string at = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionId"></param>
        /// <param name="tokenId"></param>
        /// <param name="at">Hash of execution block (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GetBundleResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetBundleResponse>> NewTokenControllerGetBundleWithHttpInfoAsync(decimal collectionId, decimal tokenId, string at = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionId"></param>
        /// <param name="tokenId"></param>
        /// <param name="at">Hash of execution block (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of TokenByIdResponse</returns>
        System.Threading.Tasks.Task<TokenByIdResponse> NewTokenControllerGetTokenNewAsync(decimal collectionId, decimal tokenId, string at = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionId"></param>
        /// <param name="tokenId"></param>
        /// <param name="at">Hash of execution block (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (TokenByIdResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<TokenByIdResponse>> NewTokenControllerGetTokenNewWithHttpInfoAsync(decimal collectionId, decimal tokenId, string at = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionId"></param>
        /// <param name="tokenId"></param>
        /// <param name="at">Hash of execution block (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of TokenExistsResponse</returns>
        System.Threading.Tasks.Task<TokenExistsResponse> NewTokenControllerGetTokensExistsAsync(decimal collectionId, decimal tokenId, string at = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionId"></param>
        /// <param name="tokenId"></param>
        /// <param name="at">Hash of execution block (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (TokenExistsResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<TokenExistsResponse>> NewTokenControllerGetTokensExistsWithHttpInfoAsync(decimal collectionId, decimal tokenId, string at = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionId"></param>
        /// <param name="tokenId"></param>
        /// <param name="at">Hash of execution block (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of IsBundleResponse</returns>
        System.Threading.Tasks.Task<IsBundleResponse> NewTokenControllerIsBundleAsync(decimal collectionId, decimal tokenId, string at = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionId"></param>
        /// <param name="tokenId"></param>
        /// <param name="at">Hash of execution block (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (IsBundleResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<IsBundleResponse>> NewTokenControllerIsBundleWithHttpInfoAsync(decimal collectionId, decimal tokenId, string at = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionId"></param>
        /// <param name="tokenId"></param>
        /// <param name="at">Hash of execution block (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of TokenChildrenResponse</returns>
        System.Threading.Tasks.Task<TokenChildrenResponse> NewTokenControllerTokenChildrenAsync(decimal collectionId, decimal tokenId, string at = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionId"></param>
        /// <param name="tokenId"></param>
        /// <param name="at">Hash of execution block (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (TokenChildrenResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<TokenChildrenResponse>> NewTokenControllerTokenChildrenWithHttpInfoAsync(decimal collectionId, decimal tokenId, string at = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionId"></param>
        /// <param name="tokenId"></param>
        /// <param name="at">Hash of execution block (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of TokenOwnerResponse</returns>
        System.Threading.Tasks.Task<TokenOwnerResponse> NewTokenControllerTokenOwnerAsync(decimal collectionId, decimal tokenId, string at = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionId"></param>
        /// <param name="tokenId"></param>
        /// <param name="at">Hash of execution block (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (TokenOwnerResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<TokenOwnerResponse>> NewTokenControllerTokenOwnerWithHttpInfoAsync(decimal collectionId, decimal tokenId, string at = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionId"></param>
        /// <param name="tokenId"></param>
        /// <param name="at">Hash of execution block (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of TokenParentResponse</returns>
        System.Threading.Tasks.Task<TokenParentResponse> NewTokenControllerTokenParentAsync(decimal collectionId, decimal tokenId, string at = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionId"></param>
        /// <param name="tokenId"></param>
        /// <param name="at">Hash of execution block (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (TokenParentResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<TokenParentResponse>> NewTokenControllerTokenParentWithHttpInfoAsync(decimal collectionId, decimal tokenId, string at = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionId"></param>
        /// <param name="tokenId"></param>
        /// <param name="at">Hash of execution block (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of TokenPropertiesResponse</returns>
        System.Threading.Tasks.Task<TokenPropertiesResponse> NewTokenControllerTokenPropertiesAsync(decimal collectionId, decimal tokenId, string at = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionId"></param>
        /// <param name="tokenId"></param>
        /// <param name="at">Hash of execution block (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (TokenPropertiesResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<TokenPropertiesResponse>> NewTokenControllerTokenPropertiesWithHttpInfoAsync(decimal collectionId, decimal tokenId, string at = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionId"></param>
        /// <param name="tokenId"></param>
        /// <param name="at">Hash of execution block (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of TopmostTokenOwnerResponse</returns>
        System.Threading.Tasks.Task<TopmostTokenOwnerResponse> NewTokenControllerTopmostTokenOwnerAsync(decimal collectionId, decimal tokenId, string at = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionId"></param>
        /// <param name="tokenId"></param>
        /// <param name="at">Hash of execution block (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (TopmostTokenOwnerResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<TopmostTokenOwnerResponse>> NewTokenControllerTopmostTokenOwnerWithHttpInfoAsync(decimal collectionId, decimal tokenId, string at = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="setTokenPropertiesRequest"></param>
        /// <param name="use"> (optional)</param>
        /// <param name="withFee"> (optional, default to false) (deprecated)</param>
        /// <param name="verify"> (optional, default to false)</param>
        /// <param name="callbackUrl"> (optional)</param>
        /// <param name="nonce"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SetTokenPropertiesDefaultResponse</returns>
        System.Threading.Tasks.Task<SetTokenPropertiesDefaultResponse> SetTokenPropertiesAsync(SetTokenPropertiesRequest setTokenPropertiesRequest, string use = default(string), bool? withFee = default(bool?), bool? verify = default(bool?), string callbackUrl = default(string), decimal? nonce = default(decimal?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="setTokenPropertiesRequest"></param>
        /// <param name="use"> (optional)</param>
        /// <param name="withFee"> (optional, default to false) (deprecated)</param>
        /// <param name="verify"> (optional, default to false)</param>
        /// <param name="callbackUrl"> (optional)</param>
        /// <param name="nonce"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SetTokenPropertiesDefaultResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<SetTokenPropertiesDefaultResponse>> SetTokenPropertiesWithHttpInfoAsync(SetTokenPropertiesRequest setTokenPropertiesRequest, string use = default(string), bool? withFee = default(bool?), bool? verify = default(bool?), string callbackUrl = default(string), decimal? nonce = default(decimal?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="transferTokenRequest"></param>
        /// <param name="use"> (optional)</param>
        /// <param name="withFee"> (optional, default to false) (deprecated)</param>
        /// <param name="verify"> (optional, default to false)</param>
        /// <param name="callbackUrl"> (optional)</param>
        /// <param name="nonce"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of TransferTokenDefaultResponse</returns>
        System.Threading.Tasks.Task<TransferTokenDefaultResponse> TransferTokenAsync(TransferTokenRequest transferTokenRequest, string use = default(string), bool? withFee = default(bool?), bool? verify = default(bool?), string callbackUrl = default(string), decimal? nonce = default(decimal?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="transferTokenRequest"></param>
        /// <param name="use"> (optional)</param>
        /// <param name="withFee"> (optional, default to false) (deprecated)</param>
        /// <param name="verify"> (optional, default to false)</param>
        /// <param name="callbackUrl"> (optional)</param>
        /// <param name="nonce"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (TransferTokenDefaultResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<TransferTokenDefaultResponse>> TransferTokenWithHttpInfoAsync(TransferTokenRequest transferTokenRequest, string use = default(string), bool? withFee = default(bool?), bool? verify = default(bool?), string callbackUrl = default(string), decimal? nonce = default(decimal?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="unnestTokenRequest"></param>
        /// <param name="use"> (optional)</param>
        /// <param name="withFee"> (optional, default to false) (deprecated)</param>
        /// <param name="verify"> (optional, default to false)</param>
        /// <param name="callbackUrl"> (optional)</param>
        /// <param name="nonce"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of UnnestTokenDefaultResponse</returns>
        System.Threading.Tasks.Task<UnnestTokenDefaultResponse> UnnestTokenAsync(UnnestTokenRequest unnestTokenRequest, string use = default(string), bool? withFee = default(bool?), bool? verify = default(bool?), string callbackUrl = default(string), decimal? nonce = default(decimal?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="unnestTokenRequest"></param>
        /// <param name="use"> (optional)</param>
        /// <param name="withFee"> (optional, default to false) (deprecated)</param>
        /// <param name="verify"> (optional, default to false)</param>
        /// <param name="callbackUrl"> (optional)</param>
        /// <param name="nonce"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (UnnestTokenDefaultResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<UnnestTokenDefaultResponse>> UnnestTokenWithHttpInfoAsync(UnnestTokenRequest unnestTokenRequest, string use = default(string), bool? withFee = default(bool?), bool? verify = default(bool?), string callbackUrl = default(string), decimal? nonce = default(decimal?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ITokensApi : ITokensApiSync, ITokensApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class TokensApi : ITokensApi
    {
        private Org.OpenAPITools.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="TokensApi"/> class.
        /// </summary>
        /// <returns></returns>
        public TokensApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="TokensApi"/> class.
        /// </summary>
        /// <returns></returns>
        public TokensApi(string basePath)
        {
            this.Configuration = Org.OpenAPITools.Client.Configuration.MergeConfigurations(
                Org.OpenAPITools.Client.GlobalConfiguration.Instance,
                new Org.OpenAPITools.Client.Configuration { BasePath = basePath }
            );
            this.Client = new Org.OpenAPITools.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Org.OpenAPITools.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = Org.OpenAPITools.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="TokensApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public TokensApi(Org.OpenAPITools.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = Org.OpenAPITools.Client.Configuration.MergeConfigurations(
                Org.OpenAPITools.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new Org.OpenAPITools.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Org.OpenAPITools.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = Org.OpenAPITools.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="TokensApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public TokensApi(Org.OpenAPITools.Client.ISynchronousClient client, Org.OpenAPITools.Client.IAsynchronousClient asyncClient, Org.OpenAPITools.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = Org.OpenAPITools.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public Org.OpenAPITools.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public Org.OpenAPITools.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Org.OpenAPITools.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Org.OpenAPITools.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="approveRequest"></param>
        /// <param name="use"> (optional)</param>
        /// <param name="withFee"> (optional, default to false) (deprecated)</param>
        /// <param name="verify"> (optional, default to false)</param>
        /// <param name="callbackUrl"> (optional)</param>
        /// <param name="nonce"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApproveDefaultResponse</returns>
        public ApproveDefaultResponse Approve(ApproveRequest approveRequest, string use = default(string), bool? withFee = default(bool?), bool? verify = default(bool?), string callbackUrl = default(string), decimal? nonce = default(decimal?), int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<ApproveDefaultResponse> localVarResponse = ApproveWithHttpInfo(approveRequest, use, withFee, verify, callbackUrl, nonce);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="approveRequest"></param>
        /// <param name="use"> (optional)</param>
        /// <param name="withFee"> (optional, default to false) (deprecated)</param>
        /// <param name="verify"> (optional, default to false)</param>
        /// <param name="callbackUrl"> (optional)</param>
        /// <param name="nonce"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ApproveDefaultResponse</returns>
        public Org.OpenAPITools.Client.ApiResponse<ApproveDefaultResponse> ApproveWithHttpInfo(ApproveRequest approveRequest, string use = default(string), bool? withFee = default(bool?), bool? verify = default(bool?), string callbackUrl = default(string), decimal? nonce = default(decimal?), int operationIndex = 0)
        {
            // verify the required parameter 'approveRequest' is set
            if (approveRequest == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'approveRequest' when calling TokensApi->Approve");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (use != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "use", use));
            }
            if (withFee != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "withFee", withFee));
            }
            if (verify != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "verify", verify));
            }
            if (callbackUrl != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "callbackUrl", callbackUrl));
            }
            if (nonce != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "nonce", nonce));
            }
            localVarRequestOptions.Data = approveRequest;

            localVarRequestOptions.Operation = "TokensApi.Approve";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (SeedAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<ApproveDefaultResponse>("/v1/tokens/approve", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("Approve", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="approveRequest"></param>
        /// <param name="use"> (optional)</param>
        /// <param name="withFee"> (optional, default to false) (deprecated)</param>
        /// <param name="verify"> (optional, default to false)</param>
        /// <param name="callbackUrl"> (optional)</param>
        /// <param name="nonce"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApproveDefaultResponse</returns>
        public async System.Threading.Tasks.Task<ApproveDefaultResponse> ApproveAsync(ApproveRequest approveRequest, string use = default(string), bool? withFee = default(bool?), bool? verify = default(bool?), string callbackUrl = default(string), decimal? nonce = default(decimal?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<ApproveDefaultResponse> localVarResponse = await ApproveWithHttpInfoAsync(approveRequest, use, withFee, verify, callbackUrl, nonce, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="approveRequest"></param>
        /// <param name="use"> (optional)</param>
        /// <param name="withFee"> (optional, default to false) (deprecated)</param>
        /// <param name="verify"> (optional, default to false)</param>
        /// <param name="callbackUrl"> (optional)</param>
        /// <param name="nonce"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ApproveDefaultResponse)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<ApproveDefaultResponse>> ApproveWithHttpInfoAsync(ApproveRequest approveRequest, string use = default(string), bool? withFee = default(bool?), bool? verify = default(bool?), string callbackUrl = default(string), decimal? nonce = default(decimal?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'approveRequest' is set
            if (approveRequest == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'approveRequest' when calling TokensApi->Approve");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (use != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "use", use));
            }
            if (withFee != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "withFee", withFee));
            }
            if (verify != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "verify", verify));
            }
            if (callbackUrl != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "callbackUrl", callbackUrl));
            }
            if (nonce != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "nonce", nonce));
            }
            localVarRequestOptions.Data = approveRequest;

            localVarRequestOptions.Operation = "TokensApi.Approve";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (SeedAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<ApproveDefaultResponse>("/v1/tokens/approve", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("Approve", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="burnTokenRequest"></param>
        /// <param name="use"> (optional)</param>
        /// <param name="withFee"> (optional, default to false) (deprecated)</param>
        /// <param name="verify"> (optional, default to false)</param>
        /// <param name="callbackUrl"> (optional)</param>
        /// <param name="nonce"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>BurnTokenDefaultResponse</returns>
        public BurnTokenDefaultResponse BurnToken(BurnTokenRequest burnTokenRequest, string use = default(string), bool? withFee = default(bool?), bool? verify = default(bool?), string callbackUrl = default(string), decimal? nonce = default(decimal?), int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<BurnTokenDefaultResponse> localVarResponse = BurnTokenWithHttpInfo(burnTokenRequest, use, withFee, verify, callbackUrl, nonce);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="burnTokenRequest"></param>
        /// <param name="use"> (optional)</param>
        /// <param name="withFee"> (optional, default to false) (deprecated)</param>
        /// <param name="verify"> (optional, default to false)</param>
        /// <param name="callbackUrl"> (optional)</param>
        /// <param name="nonce"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of BurnTokenDefaultResponse</returns>
        public Org.OpenAPITools.Client.ApiResponse<BurnTokenDefaultResponse> BurnTokenWithHttpInfo(BurnTokenRequest burnTokenRequest, string use = default(string), bool? withFee = default(bool?), bool? verify = default(bool?), string callbackUrl = default(string), decimal? nonce = default(decimal?), int operationIndex = 0)
        {
            // verify the required parameter 'burnTokenRequest' is set
            if (burnTokenRequest == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'burnTokenRequest' when calling TokensApi->BurnToken");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (use != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "use", use));
            }
            if (withFee != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "withFee", withFee));
            }
            if (verify != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "verify", verify));
            }
            if (callbackUrl != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "callbackUrl", callbackUrl));
            }
            if (nonce != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "nonce", nonce));
            }
            localVarRequestOptions.Data = burnTokenRequest;

            localVarRequestOptions.Operation = "TokensApi.BurnToken";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (SeedAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Delete<BurnTokenDefaultResponse>("/v1/tokens", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("BurnToken", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="burnTokenRequest"></param>
        /// <param name="use"> (optional)</param>
        /// <param name="withFee"> (optional, default to false) (deprecated)</param>
        /// <param name="verify"> (optional, default to false)</param>
        /// <param name="callbackUrl"> (optional)</param>
        /// <param name="nonce"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of BurnTokenDefaultResponse</returns>
        public async System.Threading.Tasks.Task<BurnTokenDefaultResponse> BurnTokenAsync(BurnTokenRequest burnTokenRequest, string use = default(string), bool? withFee = default(bool?), bool? verify = default(bool?), string callbackUrl = default(string), decimal? nonce = default(decimal?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<BurnTokenDefaultResponse> localVarResponse = await BurnTokenWithHttpInfoAsync(burnTokenRequest, use, withFee, verify, callbackUrl, nonce, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="burnTokenRequest"></param>
        /// <param name="use"> (optional)</param>
        /// <param name="withFee"> (optional, default to false) (deprecated)</param>
        /// <param name="verify"> (optional, default to false)</param>
        /// <param name="callbackUrl"> (optional)</param>
        /// <param name="nonce"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (BurnTokenDefaultResponse)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<BurnTokenDefaultResponse>> BurnTokenWithHttpInfoAsync(BurnTokenRequest burnTokenRequest, string use = default(string), bool? withFee = default(bool?), bool? verify = default(bool?), string callbackUrl = default(string), decimal? nonce = default(decimal?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'burnTokenRequest' is set
            if (burnTokenRequest == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'burnTokenRequest' when calling TokensApi->BurnToken");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (use != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "use", use));
            }
            if (withFee != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "withFee", withFee));
            }
            if (verify != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "verify", verify));
            }
            if (callbackUrl != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "callbackUrl", callbackUrl));
            }
            if (nonce != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "nonce", nonce));
            }
            localVarRequestOptions.Data = burnTokenRequest;

            localVarRequestOptions.Operation = "TokensApi.BurnToken";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (SeedAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.DeleteAsync<BurnTokenDefaultResponse>("/v1/tokens", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("BurnToken", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createMultipleTokensMutationRequest"></param>
        /// <param name="use"> (optional)</param>
        /// <param name="withFee"> (optional, default to false) (deprecated)</param>
        /// <param name="verify"> (optional, default to false)</param>
        /// <param name="callbackUrl"> (optional)</param>
        /// <param name="nonce"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>CreateNewTokenMutationDefaultResponse</returns>
        public CreateNewTokenMutationDefaultResponse CreateMultipleTokensMutation(CreateMultipleTokensMutationRequest createMultipleTokensMutationRequest, string use = default(string), bool? withFee = default(bool?), bool? verify = default(bool?), string callbackUrl = default(string), decimal? nonce = default(decimal?), int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<CreateNewTokenMutationDefaultResponse> localVarResponse = CreateMultipleTokensMutationWithHttpInfo(createMultipleTokensMutationRequest, use, withFee, verify, callbackUrl, nonce);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createMultipleTokensMutationRequest"></param>
        /// <param name="use"> (optional)</param>
        /// <param name="withFee"> (optional, default to false) (deprecated)</param>
        /// <param name="verify"> (optional, default to false)</param>
        /// <param name="callbackUrl"> (optional)</param>
        /// <param name="nonce"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of CreateNewTokenMutationDefaultResponse</returns>
        public Org.OpenAPITools.Client.ApiResponse<CreateNewTokenMutationDefaultResponse> CreateMultipleTokensMutationWithHttpInfo(CreateMultipleTokensMutationRequest createMultipleTokensMutationRequest, string use = default(string), bool? withFee = default(bool?), bool? verify = default(bool?), string callbackUrl = default(string), decimal? nonce = default(decimal?), int operationIndex = 0)
        {
            // verify the required parameter 'createMultipleTokensMutationRequest' is set
            if (createMultipleTokensMutationRequest == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'createMultipleTokensMutationRequest' when calling TokensApi->CreateMultipleTokensMutation");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (use != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "use", use));
            }
            if (withFee != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "withFee", withFee));
            }
            if (verify != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "verify", verify));
            }
            if (callbackUrl != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "callbackUrl", callbackUrl));
            }
            if (nonce != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "nonce", nonce));
            }
            localVarRequestOptions.Data = createMultipleTokensMutationRequest;

            localVarRequestOptions.Operation = "TokensApi.CreateMultipleTokensMutation";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (SeedAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<CreateNewTokenMutationDefaultResponse>("/v1/tokens/create-multiple", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateMultipleTokensMutation", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createMultipleTokensMutationRequest"></param>
        /// <param name="use"> (optional)</param>
        /// <param name="withFee"> (optional, default to false) (deprecated)</param>
        /// <param name="verify"> (optional, default to false)</param>
        /// <param name="callbackUrl"> (optional)</param>
        /// <param name="nonce"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CreateNewTokenMutationDefaultResponse</returns>
        public async System.Threading.Tasks.Task<CreateNewTokenMutationDefaultResponse> CreateMultipleTokensMutationAsync(CreateMultipleTokensMutationRequest createMultipleTokensMutationRequest, string use = default(string), bool? withFee = default(bool?), bool? verify = default(bool?), string callbackUrl = default(string), decimal? nonce = default(decimal?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<CreateNewTokenMutationDefaultResponse> localVarResponse = await CreateMultipleTokensMutationWithHttpInfoAsync(createMultipleTokensMutationRequest, use, withFee, verify, callbackUrl, nonce, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createMultipleTokensMutationRequest"></param>
        /// <param name="use"> (optional)</param>
        /// <param name="withFee"> (optional, default to false) (deprecated)</param>
        /// <param name="verify"> (optional, default to false)</param>
        /// <param name="callbackUrl"> (optional)</param>
        /// <param name="nonce"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CreateNewTokenMutationDefaultResponse)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<CreateNewTokenMutationDefaultResponse>> CreateMultipleTokensMutationWithHttpInfoAsync(CreateMultipleTokensMutationRequest createMultipleTokensMutationRequest, string use = default(string), bool? withFee = default(bool?), bool? verify = default(bool?), string callbackUrl = default(string), decimal? nonce = default(decimal?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'createMultipleTokensMutationRequest' is set
            if (createMultipleTokensMutationRequest == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'createMultipleTokensMutationRequest' when calling TokensApi->CreateMultipleTokensMutation");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (use != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "use", use));
            }
            if (withFee != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "withFee", withFee));
            }
            if (verify != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "verify", verify));
            }
            if (callbackUrl != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "callbackUrl", callbackUrl));
            }
            if (nonce != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "nonce", nonce));
            }
            localVarRequestOptions.Data = createMultipleTokensMutationRequest;

            localVarRequestOptions.Operation = "TokensApi.CreateMultipleTokensMutation";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (SeedAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<CreateNewTokenMutationDefaultResponse>("/v1/tokens/create-multiple", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateMultipleTokensMutation", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createNewTokenMutationRequest"></param>
        /// <param name="use"> (optional)</param>
        /// <param name="withFee"> (optional, default to false) (deprecated)</param>
        /// <param name="verify"> (optional, default to false)</param>
        /// <param name="callbackUrl"> (optional)</param>
        /// <param name="nonce"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>CreateNewTokenMutationDefaultResponse</returns>
        public CreateNewTokenMutationDefaultResponse CreateNewTokenMutation(CreateNewTokenMutationRequest createNewTokenMutationRequest, string use = default(string), bool? withFee = default(bool?), bool? verify = default(bool?), string callbackUrl = default(string), decimal? nonce = default(decimal?), int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<CreateNewTokenMutationDefaultResponse> localVarResponse = CreateNewTokenMutationWithHttpInfo(createNewTokenMutationRequest, use, withFee, verify, callbackUrl, nonce);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createNewTokenMutationRequest"></param>
        /// <param name="use"> (optional)</param>
        /// <param name="withFee"> (optional, default to false) (deprecated)</param>
        /// <param name="verify"> (optional, default to false)</param>
        /// <param name="callbackUrl"> (optional)</param>
        /// <param name="nonce"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of CreateNewTokenMutationDefaultResponse</returns>
        public Org.OpenAPITools.Client.ApiResponse<CreateNewTokenMutationDefaultResponse> CreateNewTokenMutationWithHttpInfo(CreateNewTokenMutationRequest createNewTokenMutationRequest, string use = default(string), bool? withFee = default(bool?), bool? verify = default(bool?), string callbackUrl = default(string), decimal? nonce = default(decimal?), int operationIndex = 0)
        {
            // verify the required parameter 'createNewTokenMutationRequest' is set
            if (createNewTokenMutationRequest == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'createNewTokenMutationRequest' when calling TokensApi->CreateNewTokenMutation");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (use != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "use", use));
            }
            if (withFee != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "withFee", withFee));
            }
            if (verify != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "verify", verify));
            }
            if (callbackUrl != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "callbackUrl", callbackUrl));
            }
            if (nonce != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "nonce", nonce));
            }
            localVarRequestOptions.Data = createNewTokenMutationRequest;

            localVarRequestOptions.Operation = "TokensApi.CreateNewTokenMutation";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (SeedAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<CreateNewTokenMutationDefaultResponse>("/v1/tokens", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateNewTokenMutation", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createNewTokenMutationRequest"></param>
        /// <param name="use"> (optional)</param>
        /// <param name="withFee"> (optional, default to false) (deprecated)</param>
        /// <param name="verify"> (optional, default to false)</param>
        /// <param name="callbackUrl"> (optional)</param>
        /// <param name="nonce"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CreateNewTokenMutationDefaultResponse</returns>
        public async System.Threading.Tasks.Task<CreateNewTokenMutationDefaultResponse> CreateNewTokenMutationAsync(CreateNewTokenMutationRequest createNewTokenMutationRequest, string use = default(string), bool? withFee = default(bool?), bool? verify = default(bool?), string callbackUrl = default(string), decimal? nonce = default(decimal?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<CreateNewTokenMutationDefaultResponse> localVarResponse = await CreateNewTokenMutationWithHttpInfoAsync(createNewTokenMutationRequest, use, withFee, verify, callbackUrl, nonce, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createNewTokenMutationRequest"></param>
        /// <param name="use"> (optional)</param>
        /// <param name="withFee"> (optional, default to false) (deprecated)</param>
        /// <param name="verify"> (optional, default to false)</param>
        /// <param name="callbackUrl"> (optional)</param>
        /// <param name="nonce"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CreateNewTokenMutationDefaultResponse)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<CreateNewTokenMutationDefaultResponse>> CreateNewTokenMutationWithHttpInfoAsync(CreateNewTokenMutationRequest createNewTokenMutationRequest, string use = default(string), bool? withFee = default(bool?), bool? verify = default(bool?), string callbackUrl = default(string), decimal? nonce = default(decimal?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'createNewTokenMutationRequest' is set
            if (createNewTokenMutationRequest == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'createNewTokenMutationRequest' when calling TokensApi->CreateNewTokenMutation");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (use != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "use", use));
            }
            if (withFee != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "withFee", withFee));
            }
            if (verify != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "verify", verify));
            }
            if (callbackUrl != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "callbackUrl", callbackUrl));
            }
            if (nonce != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "nonce", nonce));
            }
            localVarRequestOptions.Data = createNewTokenMutationRequest;

            localVarRequestOptions.Operation = "TokensApi.CreateNewTokenMutation";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (SeedAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<CreateNewTokenMutationDefaultResponse>("/v1/tokens", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateNewTokenMutation", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deleteTokenPropertiesRequest"></param>
        /// <param name="use"> (optional)</param>
        /// <param name="withFee"> (optional, default to false) (deprecated)</param>
        /// <param name="verify"> (optional, default to false)</param>
        /// <param name="callbackUrl"> (optional)</param>
        /// <param name="nonce"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>DeleteTokenPropertiesDefaultResponse</returns>
        public DeleteTokenPropertiesDefaultResponse DeleteTokenProperties(DeleteTokenPropertiesRequest deleteTokenPropertiesRequest, string use = default(string), bool? withFee = default(bool?), bool? verify = default(bool?), string callbackUrl = default(string), decimal? nonce = default(decimal?), int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<DeleteTokenPropertiesDefaultResponse> localVarResponse = DeleteTokenPropertiesWithHttpInfo(deleteTokenPropertiesRequest, use, withFee, verify, callbackUrl, nonce);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deleteTokenPropertiesRequest"></param>
        /// <param name="use"> (optional)</param>
        /// <param name="withFee"> (optional, default to false) (deprecated)</param>
        /// <param name="verify"> (optional, default to false)</param>
        /// <param name="callbackUrl"> (optional)</param>
        /// <param name="nonce"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of DeleteTokenPropertiesDefaultResponse</returns>
        public Org.OpenAPITools.Client.ApiResponse<DeleteTokenPropertiesDefaultResponse> DeleteTokenPropertiesWithHttpInfo(DeleteTokenPropertiesRequest deleteTokenPropertiesRequest, string use = default(string), bool? withFee = default(bool?), bool? verify = default(bool?), string callbackUrl = default(string), decimal? nonce = default(decimal?), int operationIndex = 0)
        {
            // verify the required parameter 'deleteTokenPropertiesRequest' is set
            if (deleteTokenPropertiesRequest == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'deleteTokenPropertiesRequest' when calling TokensApi->DeleteTokenProperties");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (use != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "use", use));
            }
            if (withFee != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "withFee", withFee));
            }
            if (verify != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "verify", verify));
            }
            if (callbackUrl != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "callbackUrl", callbackUrl));
            }
            if (nonce != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "nonce", nonce));
            }
            localVarRequestOptions.Data = deleteTokenPropertiesRequest;

            localVarRequestOptions.Operation = "TokensApi.DeleteTokenProperties";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (SeedAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Delete<DeleteTokenPropertiesDefaultResponse>("/v1/tokens/properties", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteTokenProperties", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deleteTokenPropertiesRequest"></param>
        /// <param name="use"> (optional)</param>
        /// <param name="withFee"> (optional, default to false) (deprecated)</param>
        /// <param name="verify"> (optional, default to false)</param>
        /// <param name="callbackUrl"> (optional)</param>
        /// <param name="nonce"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of DeleteTokenPropertiesDefaultResponse</returns>
        public async System.Threading.Tasks.Task<DeleteTokenPropertiesDefaultResponse> DeleteTokenPropertiesAsync(DeleteTokenPropertiesRequest deleteTokenPropertiesRequest, string use = default(string), bool? withFee = default(bool?), bool? verify = default(bool?), string callbackUrl = default(string), decimal? nonce = default(decimal?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<DeleteTokenPropertiesDefaultResponse> localVarResponse = await DeleteTokenPropertiesWithHttpInfoAsync(deleteTokenPropertiesRequest, use, withFee, verify, callbackUrl, nonce, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deleteTokenPropertiesRequest"></param>
        /// <param name="use"> (optional)</param>
        /// <param name="withFee"> (optional, default to false) (deprecated)</param>
        /// <param name="verify"> (optional, default to false)</param>
        /// <param name="callbackUrl"> (optional)</param>
        /// <param name="nonce"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (DeleteTokenPropertiesDefaultResponse)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<DeleteTokenPropertiesDefaultResponse>> DeleteTokenPropertiesWithHttpInfoAsync(DeleteTokenPropertiesRequest deleteTokenPropertiesRequest, string use = default(string), bool? withFee = default(bool?), bool? verify = default(bool?), string callbackUrl = default(string), decimal? nonce = default(decimal?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'deleteTokenPropertiesRequest' is set
            if (deleteTokenPropertiesRequest == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'deleteTokenPropertiesRequest' when calling TokensApi->DeleteTokenProperties");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (use != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "use", use));
            }
            if (withFee != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "withFee", withFee));
            }
            if (verify != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "verify", verify));
            }
            if (callbackUrl != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "callbackUrl", callbackUrl));
            }
            if (nonce != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "nonce", nonce));
            }
            localVarRequestOptions.Data = deleteTokenPropertiesRequest;

            localVarRequestOptions.Operation = "TokensApi.DeleteTokenProperties";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (SeedAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.DeleteAsync<DeleteTokenPropertiesDefaultResponse>("/v1/tokens/properties", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteTokenProperties", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="nestTokenRequest"></param>
        /// <param name="use"> (optional)</param>
        /// <param name="withFee"> (optional, default to false) (deprecated)</param>
        /// <param name="verify"> (optional, default to false)</param>
        /// <param name="callbackUrl"> (optional)</param>
        /// <param name="nonce"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>NestTokenDefaultResponse</returns>
        public NestTokenDefaultResponse NestToken(NestTokenRequest nestTokenRequest, string use = default(string), bool? withFee = default(bool?), bool? verify = default(bool?), string callbackUrl = default(string), decimal? nonce = default(decimal?), int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<NestTokenDefaultResponse> localVarResponse = NestTokenWithHttpInfo(nestTokenRequest, use, withFee, verify, callbackUrl, nonce);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="nestTokenRequest"></param>
        /// <param name="use"> (optional)</param>
        /// <param name="withFee"> (optional, default to false) (deprecated)</param>
        /// <param name="verify"> (optional, default to false)</param>
        /// <param name="callbackUrl"> (optional)</param>
        /// <param name="nonce"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of NestTokenDefaultResponse</returns>
        public Org.OpenAPITools.Client.ApiResponse<NestTokenDefaultResponse> NestTokenWithHttpInfo(NestTokenRequest nestTokenRequest, string use = default(string), bool? withFee = default(bool?), bool? verify = default(bool?), string callbackUrl = default(string), decimal? nonce = default(decimal?), int operationIndex = 0)
        {
            // verify the required parameter 'nestTokenRequest' is set
            if (nestTokenRequest == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'nestTokenRequest' when calling TokensApi->NestToken");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (use != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "use", use));
            }
            if (withFee != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "withFee", withFee));
            }
            if (verify != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "verify", verify));
            }
            if (callbackUrl != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "callbackUrl", callbackUrl));
            }
            if (nonce != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "nonce", nonce));
            }
            localVarRequestOptions.Data = nestTokenRequest;

            localVarRequestOptions.Operation = "TokensApi.NestToken";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (SeedAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<NestTokenDefaultResponse>("/v1/tokens/nest", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("NestToken", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="nestTokenRequest"></param>
        /// <param name="use"> (optional)</param>
        /// <param name="withFee"> (optional, default to false) (deprecated)</param>
        /// <param name="verify"> (optional, default to false)</param>
        /// <param name="callbackUrl"> (optional)</param>
        /// <param name="nonce"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of NestTokenDefaultResponse</returns>
        public async System.Threading.Tasks.Task<NestTokenDefaultResponse> NestTokenAsync(NestTokenRequest nestTokenRequest, string use = default(string), bool? withFee = default(bool?), bool? verify = default(bool?), string callbackUrl = default(string), decimal? nonce = default(decimal?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<NestTokenDefaultResponse> localVarResponse = await NestTokenWithHttpInfoAsync(nestTokenRequest, use, withFee, verify, callbackUrl, nonce, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="nestTokenRequest"></param>
        /// <param name="use"> (optional)</param>
        /// <param name="withFee"> (optional, default to false) (deprecated)</param>
        /// <param name="verify"> (optional, default to false)</param>
        /// <param name="callbackUrl"> (optional)</param>
        /// <param name="nonce"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (NestTokenDefaultResponse)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<NestTokenDefaultResponse>> NestTokenWithHttpInfoAsync(NestTokenRequest nestTokenRequest, string use = default(string), bool? withFee = default(bool?), bool? verify = default(bool?), string callbackUrl = default(string), decimal? nonce = default(decimal?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'nestTokenRequest' is set
            if (nestTokenRequest == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'nestTokenRequest' when calling TokensApi->NestToken");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (use != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "use", use));
            }
            if (withFee != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "withFee", withFee));
            }
            if (verify != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "verify", verify));
            }
            if (callbackUrl != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "callbackUrl", callbackUrl));
            }
            if (nonce != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "nonce", nonce));
            }
            localVarRequestOptions.Data = nestTokenRequest;

            localVarRequestOptions.Operation = "TokensApi.NestToken";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (SeedAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<NestTokenDefaultResponse>("/v1/tokens/nest", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("NestToken", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionId"></param>
        /// <param name="tokenId"></param>
        /// <param name="from">The ss-58 encoded address</param>
        /// <param name="to">The ss-58 encoded address</param>
        /// <param name="at">Hash of execution block (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>AllowanceResultResponse</returns>
        public AllowanceResultResponse NewTokenControllerAllowance(decimal collectionId, decimal tokenId, string from, string to, string at = default(string), int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<AllowanceResultResponse> localVarResponse = NewTokenControllerAllowanceWithHttpInfo(collectionId, tokenId, from, to, at);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionId"></param>
        /// <param name="tokenId"></param>
        /// <param name="from">The ss-58 encoded address</param>
        /// <param name="to">The ss-58 encoded address</param>
        /// <param name="at">Hash of execution block (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of AllowanceResultResponse</returns>
        public Org.OpenAPITools.Client.ApiResponse<AllowanceResultResponse> NewTokenControllerAllowanceWithHttpInfo(decimal collectionId, decimal tokenId, string from, string to, string at = default(string), int operationIndex = 0)
        {
            // verify the required parameter 'from' is set
            if (from == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'from' when calling TokensApi->NewTokenControllerAllowance");
            }

            // verify the required parameter 'to' is set
            if (to == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'to' when calling TokensApi->NewTokenControllerAllowance");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (at != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "at", at));
            }
            localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "collectionId", collectionId));
            localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "tokenId", tokenId));
            localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "from", from));
            localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "to", to));

            localVarRequestOptions.Operation = "TokensApi.NewTokenControllerAllowance";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Get<AllowanceResultResponse>("/v1/tokens/allowance", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("NewTokenControllerAllowance", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionId"></param>
        /// <param name="tokenId"></param>
        /// <param name="from">The ss-58 encoded address</param>
        /// <param name="to">The ss-58 encoded address</param>
        /// <param name="at">Hash of execution block (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of AllowanceResultResponse</returns>
        public async System.Threading.Tasks.Task<AllowanceResultResponse> NewTokenControllerAllowanceAsync(decimal collectionId, decimal tokenId, string from, string to, string at = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<AllowanceResultResponse> localVarResponse = await NewTokenControllerAllowanceWithHttpInfoAsync(collectionId, tokenId, from, to, at, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionId"></param>
        /// <param name="tokenId"></param>
        /// <param name="from">The ss-58 encoded address</param>
        /// <param name="to">The ss-58 encoded address</param>
        /// <param name="at">Hash of execution block (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (AllowanceResultResponse)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<AllowanceResultResponse>> NewTokenControllerAllowanceWithHttpInfoAsync(decimal collectionId, decimal tokenId, string from, string to, string at = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'from' is set
            if (from == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'from' when calling TokensApi->NewTokenControllerAllowance");
            }

            // verify the required parameter 'to' is set
            if (to == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'to' when calling TokensApi->NewTokenControllerAllowance");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (at != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "at", at));
            }
            localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "collectionId", collectionId));
            localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "tokenId", tokenId));
            localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "from", from));
            localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "to", to));

            localVarRequestOptions.Operation = "TokensApi.NewTokenControllerAllowance";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<AllowanceResultResponse>("/v1/tokens/allowance", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("NewTokenControllerAllowance", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="address">The ss-58 encoded address</param>
        /// <param name="collectionId"></param>
        /// <param name="at">Hash of execution block (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>AccountTokensResponse</returns>
        public AccountTokensResponse NewTokenControllerGetAccountTokens(string address, decimal collectionId, string at = default(string), int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<AccountTokensResponse> localVarResponse = NewTokenControllerGetAccountTokensWithHttpInfo(address, collectionId, at);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="address">The ss-58 encoded address</param>
        /// <param name="collectionId"></param>
        /// <param name="at">Hash of execution block (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of AccountTokensResponse</returns>
        public Org.OpenAPITools.Client.ApiResponse<AccountTokensResponse> NewTokenControllerGetAccountTokensWithHttpInfo(string address, decimal collectionId, string at = default(string), int operationIndex = 0)
        {
            // verify the required parameter 'address' is set
            if (address == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'address' when calling TokensApi->NewTokenControllerGetAccountTokens");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (at != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "at", at));
            }
            localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "address", address));
            localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "collectionId", collectionId));

            localVarRequestOptions.Operation = "TokensApi.NewTokenControllerGetAccountTokens";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Get<AccountTokensResponse>("/v1/tokens/account-tokens", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("NewTokenControllerGetAccountTokens", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="address">The ss-58 encoded address</param>
        /// <param name="collectionId"></param>
        /// <param name="at">Hash of execution block (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of AccountTokensResponse</returns>
        public async System.Threading.Tasks.Task<AccountTokensResponse> NewTokenControllerGetAccountTokensAsync(string address, decimal collectionId, string at = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<AccountTokensResponse> localVarResponse = await NewTokenControllerGetAccountTokensWithHttpInfoAsync(address, collectionId, at, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="address">The ss-58 encoded address</param>
        /// <param name="collectionId"></param>
        /// <param name="at">Hash of execution block (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (AccountTokensResponse)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<AccountTokensResponse>> NewTokenControllerGetAccountTokensWithHttpInfoAsync(string address, decimal collectionId, string at = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'address' is set
            if (address == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'address' when calling TokensApi->NewTokenControllerGetAccountTokens");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (at != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "at", at));
            }
            localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "address", address));
            localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "collectionId", collectionId));

            localVarRequestOptions.Operation = "TokensApi.NewTokenControllerGetAccountTokens";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<AccountTokensResponse>("/v1/tokens/account-tokens", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("NewTokenControllerGetAccountTokens", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionId"></param>
        /// <param name="tokenId"></param>
        /// <param name="address">The ss-58 encoded address</param>
        /// <param name="at">Hash of execution block (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>TokenBalanceResponse</returns>
        public TokenBalanceResponse NewTokenControllerGetBalance(decimal collectionId, decimal tokenId, string address, string at = default(string), int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<TokenBalanceResponse> localVarResponse = NewTokenControllerGetBalanceWithHttpInfo(collectionId, tokenId, address, at);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionId"></param>
        /// <param name="tokenId"></param>
        /// <param name="address">The ss-58 encoded address</param>
        /// <param name="at">Hash of execution block (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of TokenBalanceResponse</returns>
        public Org.OpenAPITools.Client.ApiResponse<TokenBalanceResponse> NewTokenControllerGetBalanceWithHttpInfo(decimal collectionId, decimal tokenId, string address, string at = default(string), int operationIndex = 0)
        {
            // verify the required parameter 'address' is set
            if (address == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'address' when calling TokensApi->NewTokenControllerGetBalance");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (at != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "at", at));
            }
            localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "collectionId", collectionId));
            localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "tokenId", tokenId));
            localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "address", address));

            localVarRequestOptions.Operation = "TokensApi.NewTokenControllerGetBalance";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Get<TokenBalanceResponse>("/v1/tokens/balance", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("NewTokenControllerGetBalance", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionId"></param>
        /// <param name="tokenId"></param>
        /// <param name="address">The ss-58 encoded address</param>
        /// <param name="at">Hash of execution block (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of TokenBalanceResponse</returns>
        public async System.Threading.Tasks.Task<TokenBalanceResponse> NewTokenControllerGetBalanceAsync(decimal collectionId, decimal tokenId, string address, string at = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<TokenBalanceResponse> localVarResponse = await NewTokenControllerGetBalanceWithHttpInfoAsync(collectionId, tokenId, address, at, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionId"></param>
        /// <param name="tokenId"></param>
        /// <param name="address">The ss-58 encoded address</param>
        /// <param name="at">Hash of execution block (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (TokenBalanceResponse)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<TokenBalanceResponse>> NewTokenControllerGetBalanceWithHttpInfoAsync(decimal collectionId, decimal tokenId, string address, string at = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'address' is set
            if (address == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'address' when calling TokensApi->NewTokenControllerGetBalance");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (at != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "at", at));
            }
            localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "collectionId", collectionId));
            localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "tokenId", tokenId));
            localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "address", address));

            localVarRequestOptions.Operation = "TokensApi.NewTokenControllerGetBalance";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<TokenBalanceResponse>("/v1/tokens/balance", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("NewTokenControllerGetBalance", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionId"></param>
        /// <param name="tokenId"></param>
        /// <param name="at">Hash of execution block (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>GetBundleResponse</returns>
        public GetBundleResponse NewTokenControllerGetBundle(decimal collectionId, decimal tokenId, string at = default(string), int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<GetBundleResponse> localVarResponse = NewTokenControllerGetBundleWithHttpInfo(collectionId, tokenId, at);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionId"></param>
        /// <param name="tokenId"></param>
        /// <param name="at">Hash of execution block (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of GetBundleResponse</returns>
        public Org.OpenAPITools.Client.ApiResponse<GetBundleResponse> NewTokenControllerGetBundleWithHttpInfo(decimal collectionId, decimal tokenId, string at = default(string), int operationIndex = 0)
        {
            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (at != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "at", at));
            }
            localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "collectionId", collectionId));
            localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "tokenId", tokenId));

            localVarRequestOptions.Operation = "TokensApi.NewTokenControllerGetBundle";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Get<GetBundleResponse>("/v1/tokens/get-bundle", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("NewTokenControllerGetBundle", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionId"></param>
        /// <param name="tokenId"></param>
        /// <param name="at">Hash of execution block (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GetBundleResponse</returns>
        public async System.Threading.Tasks.Task<GetBundleResponse> NewTokenControllerGetBundleAsync(decimal collectionId, decimal tokenId, string at = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<GetBundleResponse> localVarResponse = await NewTokenControllerGetBundleWithHttpInfoAsync(collectionId, tokenId, at, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionId"></param>
        /// <param name="tokenId"></param>
        /// <param name="at">Hash of execution block (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GetBundleResponse)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<GetBundleResponse>> NewTokenControllerGetBundleWithHttpInfoAsync(decimal collectionId, decimal tokenId, string at = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (at != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "at", at));
            }
            localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "collectionId", collectionId));
            localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "tokenId", tokenId));

            localVarRequestOptions.Operation = "TokensApi.NewTokenControllerGetBundle";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<GetBundleResponse>("/v1/tokens/get-bundle", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("NewTokenControllerGetBundle", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionId"></param>
        /// <param name="tokenId"></param>
        /// <param name="at">Hash of execution block (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>TokenByIdResponse</returns>
        public TokenByIdResponse NewTokenControllerGetTokenNew(decimal collectionId, decimal tokenId, string at = default(string), int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<TokenByIdResponse> localVarResponse = NewTokenControllerGetTokenNewWithHttpInfo(collectionId, tokenId, at);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionId"></param>
        /// <param name="tokenId"></param>
        /// <param name="at">Hash of execution block (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of TokenByIdResponse</returns>
        public Org.OpenAPITools.Client.ApiResponse<TokenByIdResponse> NewTokenControllerGetTokenNewWithHttpInfo(decimal collectionId, decimal tokenId, string at = default(string), int operationIndex = 0)
        {
            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (at != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "at", at));
            }
            localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "collectionId", collectionId));
            localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "tokenId", tokenId));

            localVarRequestOptions.Operation = "TokensApi.NewTokenControllerGetTokenNew";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Get<TokenByIdResponse>("/v1/tokens", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("NewTokenControllerGetTokenNew", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionId"></param>
        /// <param name="tokenId"></param>
        /// <param name="at">Hash of execution block (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of TokenByIdResponse</returns>
        public async System.Threading.Tasks.Task<TokenByIdResponse> NewTokenControllerGetTokenNewAsync(decimal collectionId, decimal tokenId, string at = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<TokenByIdResponse> localVarResponse = await NewTokenControllerGetTokenNewWithHttpInfoAsync(collectionId, tokenId, at, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionId"></param>
        /// <param name="tokenId"></param>
        /// <param name="at">Hash of execution block (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (TokenByIdResponse)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<TokenByIdResponse>> NewTokenControllerGetTokenNewWithHttpInfoAsync(decimal collectionId, decimal tokenId, string at = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (at != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "at", at));
            }
            localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "collectionId", collectionId));
            localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "tokenId", tokenId));

            localVarRequestOptions.Operation = "TokensApi.NewTokenControllerGetTokenNew";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<TokenByIdResponse>("/v1/tokens", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("NewTokenControllerGetTokenNew", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionId"></param>
        /// <param name="tokenId"></param>
        /// <param name="at">Hash of execution block (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>TokenExistsResponse</returns>
        public TokenExistsResponse NewTokenControllerGetTokensExists(decimal collectionId, decimal tokenId, string at = default(string), int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<TokenExistsResponse> localVarResponse = NewTokenControllerGetTokensExistsWithHttpInfo(collectionId, tokenId, at);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionId"></param>
        /// <param name="tokenId"></param>
        /// <param name="at">Hash of execution block (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of TokenExistsResponse</returns>
        public Org.OpenAPITools.Client.ApiResponse<TokenExistsResponse> NewTokenControllerGetTokensExistsWithHttpInfo(decimal collectionId, decimal tokenId, string at = default(string), int operationIndex = 0)
        {
            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (at != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "at", at));
            }
            localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "collectionId", collectionId));
            localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "tokenId", tokenId));

            localVarRequestOptions.Operation = "TokensApi.NewTokenControllerGetTokensExists";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Get<TokenExistsResponse>("/v1/tokens/exists", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("NewTokenControllerGetTokensExists", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionId"></param>
        /// <param name="tokenId"></param>
        /// <param name="at">Hash of execution block (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of TokenExistsResponse</returns>
        public async System.Threading.Tasks.Task<TokenExistsResponse> NewTokenControllerGetTokensExistsAsync(decimal collectionId, decimal tokenId, string at = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<TokenExistsResponse> localVarResponse = await NewTokenControllerGetTokensExistsWithHttpInfoAsync(collectionId, tokenId, at, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionId"></param>
        /// <param name="tokenId"></param>
        /// <param name="at">Hash of execution block (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (TokenExistsResponse)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<TokenExistsResponse>> NewTokenControllerGetTokensExistsWithHttpInfoAsync(decimal collectionId, decimal tokenId, string at = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (at != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "at", at));
            }
            localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "collectionId", collectionId));
            localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "tokenId", tokenId));

            localVarRequestOptions.Operation = "TokensApi.NewTokenControllerGetTokensExists";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<TokenExistsResponse>("/v1/tokens/exists", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("NewTokenControllerGetTokensExists", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionId"></param>
        /// <param name="tokenId"></param>
        /// <param name="at">Hash of execution block (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>IsBundleResponse</returns>
        public IsBundleResponse NewTokenControllerIsBundle(decimal collectionId, decimal tokenId, string at = default(string), int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<IsBundleResponse> localVarResponse = NewTokenControllerIsBundleWithHttpInfo(collectionId, tokenId, at);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionId"></param>
        /// <param name="tokenId"></param>
        /// <param name="at">Hash of execution block (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of IsBundleResponse</returns>
        public Org.OpenAPITools.Client.ApiResponse<IsBundleResponse> NewTokenControllerIsBundleWithHttpInfo(decimal collectionId, decimal tokenId, string at = default(string), int operationIndex = 0)
        {
            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (at != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "at", at));
            }
            localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "collectionId", collectionId));
            localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "tokenId", tokenId));

            localVarRequestOptions.Operation = "TokensApi.NewTokenControllerIsBundle";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Get<IsBundleResponse>("/v1/tokens/is-bundle", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("NewTokenControllerIsBundle", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionId"></param>
        /// <param name="tokenId"></param>
        /// <param name="at">Hash of execution block (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of IsBundleResponse</returns>
        public async System.Threading.Tasks.Task<IsBundleResponse> NewTokenControllerIsBundleAsync(decimal collectionId, decimal tokenId, string at = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<IsBundleResponse> localVarResponse = await NewTokenControllerIsBundleWithHttpInfoAsync(collectionId, tokenId, at, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionId"></param>
        /// <param name="tokenId"></param>
        /// <param name="at">Hash of execution block (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (IsBundleResponse)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<IsBundleResponse>> NewTokenControllerIsBundleWithHttpInfoAsync(decimal collectionId, decimal tokenId, string at = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (at != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "at", at));
            }
            localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "collectionId", collectionId));
            localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "tokenId", tokenId));

            localVarRequestOptions.Operation = "TokensApi.NewTokenControllerIsBundle";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<IsBundleResponse>("/v1/tokens/is-bundle", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("NewTokenControllerIsBundle", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionId"></param>
        /// <param name="tokenId"></param>
        /// <param name="at">Hash of execution block (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>TokenChildrenResponse</returns>
        public TokenChildrenResponse NewTokenControllerTokenChildren(decimal collectionId, decimal tokenId, string at = default(string), int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<TokenChildrenResponse> localVarResponse = NewTokenControllerTokenChildrenWithHttpInfo(collectionId, tokenId, at);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionId"></param>
        /// <param name="tokenId"></param>
        /// <param name="at">Hash of execution block (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of TokenChildrenResponse</returns>
        public Org.OpenAPITools.Client.ApiResponse<TokenChildrenResponse> NewTokenControllerTokenChildrenWithHttpInfo(decimal collectionId, decimal tokenId, string at = default(string), int operationIndex = 0)
        {
            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (at != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "at", at));
            }
            localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "collectionId", collectionId));
            localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "tokenId", tokenId));

            localVarRequestOptions.Operation = "TokensApi.NewTokenControllerTokenChildren";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Get<TokenChildrenResponse>("/v1/tokens/children", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("NewTokenControllerTokenChildren", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionId"></param>
        /// <param name="tokenId"></param>
        /// <param name="at">Hash of execution block (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of TokenChildrenResponse</returns>
        public async System.Threading.Tasks.Task<TokenChildrenResponse> NewTokenControllerTokenChildrenAsync(decimal collectionId, decimal tokenId, string at = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<TokenChildrenResponse> localVarResponse = await NewTokenControllerTokenChildrenWithHttpInfoAsync(collectionId, tokenId, at, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionId"></param>
        /// <param name="tokenId"></param>
        /// <param name="at">Hash of execution block (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (TokenChildrenResponse)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<TokenChildrenResponse>> NewTokenControllerTokenChildrenWithHttpInfoAsync(decimal collectionId, decimal tokenId, string at = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (at != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "at", at));
            }
            localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "collectionId", collectionId));
            localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "tokenId", tokenId));

            localVarRequestOptions.Operation = "TokensApi.NewTokenControllerTokenChildren";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<TokenChildrenResponse>("/v1/tokens/children", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("NewTokenControllerTokenChildren", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionId"></param>
        /// <param name="tokenId"></param>
        /// <param name="at">Hash of execution block (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>TokenOwnerResponse</returns>
        public TokenOwnerResponse NewTokenControllerTokenOwner(decimal collectionId, decimal tokenId, string at = default(string), int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<TokenOwnerResponse> localVarResponse = NewTokenControllerTokenOwnerWithHttpInfo(collectionId, tokenId, at);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionId"></param>
        /// <param name="tokenId"></param>
        /// <param name="at">Hash of execution block (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of TokenOwnerResponse</returns>
        public Org.OpenAPITools.Client.ApiResponse<TokenOwnerResponse> NewTokenControllerTokenOwnerWithHttpInfo(decimal collectionId, decimal tokenId, string at = default(string), int operationIndex = 0)
        {
            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (at != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "at", at));
            }
            localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "collectionId", collectionId));
            localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "tokenId", tokenId));

            localVarRequestOptions.Operation = "TokensApi.NewTokenControllerTokenOwner";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Get<TokenOwnerResponse>("/v1/tokens/owner", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("NewTokenControllerTokenOwner", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionId"></param>
        /// <param name="tokenId"></param>
        /// <param name="at">Hash of execution block (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of TokenOwnerResponse</returns>
        public async System.Threading.Tasks.Task<TokenOwnerResponse> NewTokenControllerTokenOwnerAsync(decimal collectionId, decimal tokenId, string at = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<TokenOwnerResponse> localVarResponse = await NewTokenControllerTokenOwnerWithHttpInfoAsync(collectionId, tokenId, at, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionId"></param>
        /// <param name="tokenId"></param>
        /// <param name="at">Hash of execution block (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (TokenOwnerResponse)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<TokenOwnerResponse>> NewTokenControllerTokenOwnerWithHttpInfoAsync(decimal collectionId, decimal tokenId, string at = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (at != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "at", at));
            }
            localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "collectionId", collectionId));
            localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "tokenId", tokenId));

            localVarRequestOptions.Operation = "TokensApi.NewTokenControllerTokenOwner";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<TokenOwnerResponse>("/v1/tokens/owner", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("NewTokenControllerTokenOwner", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionId"></param>
        /// <param name="tokenId"></param>
        /// <param name="at">Hash of execution block (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>TokenParentResponse</returns>
        public TokenParentResponse NewTokenControllerTokenParent(decimal collectionId, decimal tokenId, string at = default(string), int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<TokenParentResponse> localVarResponse = NewTokenControllerTokenParentWithHttpInfo(collectionId, tokenId, at);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionId"></param>
        /// <param name="tokenId"></param>
        /// <param name="at">Hash of execution block (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of TokenParentResponse</returns>
        public Org.OpenAPITools.Client.ApiResponse<TokenParentResponse> NewTokenControllerTokenParentWithHttpInfo(decimal collectionId, decimal tokenId, string at = default(string), int operationIndex = 0)
        {
            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (at != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "at", at));
            }
            localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "collectionId", collectionId));
            localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "tokenId", tokenId));

            localVarRequestOptions.Operation = "TokensApi.NewTokenControllerTokenParent";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Get<TokenParentResponse>("/v1/tokens/parent", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("NewTokenControllerTokenParent", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionId"></param>
        /// <param name="tokenId"></param>
        /// <param name="at">Hash of execution block (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of TokenParentResponse</returns>
        public async System.Threading.Tasks.Task<TokenParentResponse> NewTokenControllerTokenParentAsync(decimal collectionId, decimal tokenId, string at = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<TokenParentResponse> localVarResponse = await NewTokenControllerTokenParentWithHttpInfoAsync(collectionId, tokenId, at, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionId"></param>
        /// <param name="tokenId"></param>
        /// <param name="at">Hash of execution block (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (TokenParentResponse)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<TokenParentResponse>> NewTokenControllerTokenParentWithHttpInfoAsync(decimal collectionId, decimal tokenId, string at = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (at != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "at", at));
            }
            localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "collectionId", collectionId));
            localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "tokenId", tokenId));

            localVarRequestOptions.Operation = "TokensApi.NewTokenControllerTokenParent";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<TokenParentResponse>("/v1/tokens/parent", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("NewTokenControllerTokenParent", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionId"></param>
        /// <param name="tokenId"></param>
        /// <param name="at">Hash of execution block (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>TokenPropertiesResponse</returns>
        public TokenPropertiesResponse NewTokenControllerTokenProperties(decimal collectionId, decimal tokenId, string at = default(string), int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<TokenPropertiesResponse> localVarResponse = NewTokenControllerTokenPropertiesWithHttpInfo(collectionId, tokenId, at);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionId"></param>
        /// <param name="tokenId"></param>
        /// <param name="at">Hash of execution block (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of TokenPropertiesResponse</returns>
        public Org.OpenAPITools.Client.ApiResponse<TokenPropertiesResponse> NewTokenControllerTokenPropertiesWithHttpInfo(decimal collectionId, decimal tokenId, string at = default(string), int operationIndex = 0)
        {
            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (at != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "at", at));
            }
            localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "collectionId", collectionId));
            localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "tokenId", tokenId));

            localVarRequestOptions.Operation = "TokensApi.NewTokenControllerTokenProperties";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Get<TokenPropertiesResponse>("/v1/tokens/properties", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("NewTokenControllerTokenProperties", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionId"></param>
        /// <param name="tokenId"></param>
        /// <param name="at">Hash of execution block (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of TokenPropertiesResponse</returns>
        public async System.Threading.Tasks.Task<TokenPropertiesResponse> NewTokenControllerTokenPropertiesAsync(decimal collectionId, decimal tokenId, string at = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<TokenPropertiesResponse> localVarResponse = await NewTokenControllerTokenPropertiesWithHttpInfoAsync(collectionId, tokenId, at, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionId"></param>
        /// <param name="tokenId"></param>
        /// <param name="at">Hash of execution block (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (TokenPropertiesResponse)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<TokenPropertiesResponse>> NewTokenControllerTokenPropertiesWithHttpInfoAsync(decimal collectionId, decimal tokenId, string at = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (at != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "at", at));
            }
            localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "collectionId", collectionId));
            localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "tokenId", tokenId));

            localVarRequestOptions.Operation = "TokensApi.NewTokenControllerTokenProperties";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<TokenPropertiesResponse>("/v1/tokens/properties", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("NewTokenControllerTokenProperties", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionId"></param>
        /// <param name="tokenId"></param>
        /// <param name="at">Hash of execution block (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>TopmostTokenOwnerResponse</returns>
        public TopmostTokenOwnerResponse NewTokenControllerTopmostTokenOwner(decimal collectionId, decimal tokenId, string at = default(string), int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<TopmostTokenOwnerResponse> localVarResponse = NewTokenControllerTopmostTokenOwnerWithHttpInfo(collectionId, tokenId, at);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionId"></param>
        /// <param name="tokenId"></param>
        /// <param name="at">Hash of execution block (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of TopmostTokenOwnerResponse</returns>
        public Org.OpenAPITools.Client.ApiResponse<TopmostTokenOwnerResponse> NewTokenControllerTopmostTokenOwnerWithHttpInfo(decimal collectionId, decimal tokenId, string at = default(string), int operationIndex = 0)
        {
            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (at != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "at", at));
            }
            localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "collectionId", collectionId));
            localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "tokenId", tokenId));

            localVarRequestOptions.Operation = "TokensApi.NewTokenControllerTopmostTokenOwner";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Get<TopmostTokenOwnerResponse>("/v1/tokens/topmost-owner", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("NewTokenControllerTopmostTokenOwner", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionId"></param>
        /// <param name="tokenId"></param>
        /// <param name="at">Hash of execution block (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of TopmostTokenOwnerResponse</returns>
        public async System.Threading.Tasks.Task<TopmostTokenOwnerResponse> NewTokenControllerTopmostTokenOwnerAsync(decimal collectionId, decimal tokenId, string at = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<TopmostTokenOwnerResponse> localVarResponse = await NewTokenControllerTopmostTokenOwnerWithHttpInfoAsync(collectionId, tokenId, at, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionId"></param>
        /// <param name="tokenId"></param>
        /// <param name="at">Hash of execution block (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (TopmostTokenOwnerResponse)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<TopmostTokenOwnerResponse>> NewTokenControllerTopmostTokenOwnerWithHttpInfoAsync(decimal collectionId, decimal tokenId, string at = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (at != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "at", at));
            }
            localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "collectionId", collectionId));
            localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "tokenId", tokenId));

            localVarRequestOptions.Operation = "TokensApi.NewTokenControllerTopmostTokenOwner";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<TopmostTokenOwnerResponse>("/v1/tokens/topmost-owner", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("NewTokenControllerTopmostTokenOwner", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="setTokenPropertiesRequest"></param>
        /// <param name="use"> (optional)</param>
        /// <param name="withFee"> (optional, default to false) (deprecated)</param>
        /// <param name="verify"> (optional, default to false)</param>
        /// <param name="callbackUrl"> (optional)</param>
        /// <param name="nonce"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>SetTokenPropertiesDefaultResponse</returns>
        public SetTokenPropertiesDefaultResponse SetTokenProperties(SetTokenPropertiesRequest setTokenPropertiesRequest, string use = default(string), bool? withFee = default(bool?), bool? verify = default(bool?), string callbackUrl = default(string), decimal? nonce = default(decimal?), int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<SetTokenPropertiesDefaultResponse> localVarResponse = SetTokenPropertiesWithHttpInfo(setTokenPropertiesRequest, use, withFee, verify, callbackUrl, nonce);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="setTokenPropertiesRequest"></param>
        /// <param name="use"> (optional)</param>
        /// <param name="withFee"> (optional, default to false) (deprecated)</param>
        /// <param name="verify"> (optional, default to false)</param>
        /// <param name="callbackUrl"> (optional)</param>
        /// <param name="nonce"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of SetTokenPropertiesDefaultResponse</returns>
        public Org.OpenAPITools.Client.ApiResponse<SetTokenPropertiesDefaultResponse> SetTokenPropertiesWithHttpInfo(SetTokenPropertiesRequest setTokenPropertiesRequest, string use = default(string), bool? withFee = default(bool?), bool? verify = default(bool?), string callbackUrl = default(string), decimal? nonce = default(decimal?), int operationIndex = 0)
        {
            // verify the required parameter 'setTokenPropertiesRequest' is set
            if (setTokenPropertiesRequest == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'setTokenPropertiesRequest' when calling TokensApi->SetTokenProperties");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (use != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "use", use));
            }
            if (withFee != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "withFee", withFee));
            }
            if (verify != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "verify", verify));
            }
            if (callbackUrl != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "callbackUrl", callbackUrl));
            }
            if (nonce != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "nonce", nonce));
            }
            localVarRequestOptions.Data = setTokenPropertiesRequest;

            localVarRequestOptions.Operation = "TokensApi.SetTokenProperties";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (SeedAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<SetTokenPropertiesDefaultResponse>("/v1/tokens/properties", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SetTokenProperties", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="setTokenPropertiesRequest"></param>
        /// <param name="use"> (optional)</param>
        /// <param name="withFee"> (optional, default to false) (deprecated)</param>
        /// <param name="verify"> (optional, default to false)</param>
        /// <param name="callbackUrl"> (optional)</param>
        /// <param name="nonce"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SetTokenPropertiesDefaultResponse</returns>
        public async System.Threading.Tasks.Task<SetTokenPropertiesDefaultResponse> SetTokenPropertiesAsync(SetTokenPropertiesRequest setTokenPropertiesRequest, string use = default(string), bool? withFee = default(bool?), bool? verify = default(bool?), string callbackUrl = default(string), decimal? nonce = default(decimal?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<SetTokenPropertiesDefaultResponse> localVarResponse = await SetTokenPropertiesWithHttpInfoAsync(setTokenPropertiesRequest, use, withFee, verify, callbackUrl, nonce, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="setTokenPropertiesRequest"></param>
        /// <param name="use"> (optional)</param>
        /// <param name="withFee"> (optional, default to false) (deprecated)</param>
        /// <param name="verify"> (optional, default to false)</param>
        /// <param name="callbackUrl"> (optional)</param>
        /// <param name="nonce"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SetTokenPropertiesDefaultResponse)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<SetTokenPropertiesDefaultResponse>> SetTokenPropertiesWithHttpInfoAsync(SetTokenPropertiesRequest setTokenPropertiesRequest, string use = default(string), bool? withFee = default(bool?), bool? verify = default(bool?), string callbackUrl = default(string), decimal? nonce = default(decimal?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'setTokenPropertiesRequest' is set
            if (setTokenPropertiesRequest == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'setTokenPropertiesRequest' when calling TokensApi->SetTokenProperties");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (use != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "use", use));
            }
            if (withFee != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "withFee", withFee));
            }
            if (verify != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "verify", verify));
            }
            if (callbackUrl != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "callbackUrl", callbackUrl));
            }
            if (nonce != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "nonce", nonce));
            }
            localVarRequestOptions.Data = setTokenPropertiesRequest;

            localVarRequestOptions.Operation = "TokensApi.SetTokenProperties";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (SeedAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<SetTokenPropertiesDefaultResponse>("/v1/tokens/properties", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SetTokenProperties", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="transferTokenRequest"></param>
        /// <param name="use"> (optional)</param>
        /// <param name="withFee"> (optional, default to false) (deprecated)</param>
        /// <param name="verify"> (optional, default to false)</param>
        /// <param name="callbackUrl"> (optional)</param>
        /// <param name="nonce"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>TransferTokenDefaultResponse</returns>
        public TransferTokenDefaultResponse TransferToken(TransferTokenRequest transferTokenRequest, string use = default(string), bool? withFee = default(bool?), bool? verify = default(bool?), string callbackUrl = default(string), decimal? nonce = default(decimal?), int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<TransferTokenDefaultResponse> localVarResponse = TransferTokenWithHttpInfo(transferTokenRequest, use, withFee, verify, callbackUrl, nonce);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="transferTokenRequest"></param>
        /// <param name="use"> (optional)</param>
        /// <param name="withFee"> (optional, default to false) (deprecated)</param>
        /// <param name="verify"> (optional, default to false)</param>
        /// <param name="callbackUrl"> (optional)</param>
        /// <param name="nonce"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of TransferTokenDefaultResponse</returns>
        public Org.OpenAPITools.Client.ApiResponse<TransferTokenDefaultResponse> TransferTokenWithHttpInfo(TransferTokenRequest transferTokenRequest, string use = default(string), bool? withFee = default(bool?), bool? verify = default(bool?), string callbackUrl = default(string), decimal? nonce = default(decimal?), int operationIndex = 0)
        {
            // verify the required parameter 'transferTokenRequest' is set
            if (transferTokenRequest == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'transferTokenRequest' when calling TokensApi->TransferToken");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (use != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "use", use));
            }
            if (withFee != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "withFee", withFee));
            }
            if (verify != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "verify", verify));
            }
            if (callbackUrl != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "callbackUrl", callbackUrl));
            }
            if (nonce != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "nonce", nonce));
            }
            localVarRequestOptions.Data = transferTokenRequest;

            localVarRequestOptions.Operation = "TokensApi.TransferToken";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (SeedAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Patch<TransferTokenDefaultResponse>("/v1/tokens/transfer", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("TransferToken", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="transferTokenRequest"></param>
        /// <param name="use"> (optional)</param>
        /// <param name="withFee"> (optional, default to false) (deprecated)</param>
        /// <param name="verify"> (optional, default to false)</param>
        /// <param name="callbackUrl"> (optional)</param>
        /// <param name="nonce"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of TransferTokenDefaultResponse</returns>
        public async System.Threading.Tasks.Task<TransferTokenDefaultResponse> TransferTokenAsync(TransferTokenRequest transferTokenRequest, string use = default(string), bool? withFee = default(bool?), bool? verify = default(bool?), string callbackUrl = default(string), decimal? nonce = default(decimal?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<TransferTokenDefaultResponse> localVarResponse = await TransferTokenWithHttpInfoAsync(transferTokenRequest, use, withFee, verify, callbackUrl, nonce, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="transferTokenRequest"></param>
        /// <param name="use"> (optional)</param>
        /// <param name="withFee"> (optional, default to false) (deprecated)</param>
        /// <param name="verify"> (optional, default to false)</param>
        /// <param name="callbackUrl"> (optional)</param>
        /// <param name="nonce"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (TransferTokenDefaultResponse)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<TransferTokenDefaultResponse>> TransferTokenWithHttpInfoAsync(TransferTokenRequest transferTokenRequest, string use = default(string), bool? withFee = default(bool?), bool? verify = default(bool?), string callbackUrl = default(string), decimal? nonce = default(decimal?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'transferTokenRequest' is set
            if (transferTokenRequest == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'transferTokenRequest' when calling TokensApi->TransferToken");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (use != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "use", use));
            }
            if (withFee != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "withFee", withFee));
            }
            if (verify != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "verify", verify));
            }
            if (callbackUrl != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "callbackUrl", callbackUrl));
            }
            if (nonce != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "nonce", nonce));
            }
            localVarRequestOptions.Data = transferTokenRequest;

            localVarRequestOptions.Operation = "TokensApi.TransferToken";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (SeedAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PatchAsync<TransferTokenDefaultResponse>("/v1/tokens/transfer", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("TransferToken", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="unnestTokenRequest"></param>
        /// <param name="use"> (optional)</param>
        /// <param name="withFee"> (optional, default to false) (deprecated)</param>
        /// <param name="verify"> (optional, default to false)</param>
        /// <param name="callbackUrl"> (optional)</param>
        /// <param name="nonce"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>UnnestTokenDefaultResponse</returns>
        public UnnestTokenDefaultResponse UnnestToken(UnnestTokenRequest unnestTokenRequest, string use = default(string), bool? withFee = default(bool?), bool? verify = default(bool?), string callbackUrl = default(string), decimal? nonce = default(decimal?), int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<UnnestTokenDefaultResponse> localVarResponse = UnnestTokenWithHttpInfo(unnestTokenRequest, use, withFee, verify, callbackUrl, nonce);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="unnestTokenRequest"></param>
        /// <param name="use"> (optional)</param>
        /// <param name="withFee"> (optional, default to false) (deprecated)</param>
        /// <param name="verify"> (optional, default to false)</param>
        /// <param name="callbackUrl"> (optional)</param>
        /// <param name="nonce"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of UnnestTokenDefaultResponse</returns>
        public Org.OpenAPITools.Client.ApiResponse<UnnestTokenDefaultResponse> UnnestTokenWithHttpInfo(UnnestTokenRequest unnestTokenRequest, string use = default(string), bool? withFee = default(bool?), bool? verify = default(bool?), string callbackUrl = default(string), decimal? nonce = default(decimal?), int operationIndex = 0)
        {
            // verify the required parameter 'unnestTokenRequest' is set
            if (unnestTokenRequest == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'unnestTokenRequest' when calling TokensApi->UnnestToken");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (use != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "use", use));
            }
            if (withFee != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "withFee", withFee));
            }
            if (verify != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "verify", verify));
            }
            if (callbackUrl != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "callbackUrl", callbackUrl));
            }
            if (nonce != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "nonce", nonce));
            }
            localVarRequestOptions.Data = unnestTokenRequest;

            localVarRequestOptions.Operation = "TokensApi.UnnestToken";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (SeedAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<UnnestTokenDefaultResponse>("/v1/tokens/unnest", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UnnestToken", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="unnestTokenRequest"></param>
        /// <param name="use"> (optional)</param>
        /// <param name="withFee"> (optional, default to false) (deprecated)</param>
        /// <param name="verify"> (optional, default to false)</param>
        /// <param name="callbackUrl"> (optional)</param>
        /// <param name="nonce"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of UnnestTokenDefaultResponse</returns>
        public async System.Threading.Tasks.Task<UnnestTokenDefaultResponse> UnnestTokenAsync(UnnestTokenRequest unnestTokenRequest, string use = default(string), bool? withFee = default(bool?), bool? verify = default(bool?), string callbackUrl = default(string), decimal? nonce = default(decimal?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<UnnestTokenDefaultResponse> localVarResponse = await UnnestTokenWithHttpInfoAsync(unnestTokenRequest, use, withFee, verify, callbackUrl, nonce, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="unnestTokenRequest"></param>
        /// <param name="use"> (optional)</param>
        /// <param name="withFee"> (optional, default to false) (deprecated)</param>
        /// <param name="verify"> (optional, default to false)</param>
        /// <param name="callbackUrl"> (optional)</param>
        /// <param name="nonce"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (UnnestTokenDefaultResponse)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<UnnestTokenDefaultResponse>> UnnestTokenWithHttpInfoAsync(UnnestTokenRequest unnestTokenRequest, string use = default(string), bool? withFee = default(bool?), bool? verify = default(bool?), string callbackUrl = default(string), decimal? nonce = default(decimal?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'unnestTokenRequest' is set
            if (unnestTokenRequest == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'unnestTokenRequest' when calling TokensApi->UnnestToken");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (use != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "use", use));
            }
            if (withFee != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "withFee", withFee));
            }
            if (verify != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "verify", verify));
            }
            if (callbackUrl != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "callbackUrl", callbackUrl));
            }
            if (nonce != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "nonce", nonce));
            }
            localVarRequestOptions.Data = unnestTokenRequest;

            localVarRequestOptions.Operation = "TokensApi.UnnestToken";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (SeedAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<UnnestTokenDefaultResponse>("/v1/tokens/unnest", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UnnestToken", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

    }
}
