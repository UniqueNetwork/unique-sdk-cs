/*
 * Unique SDK
 *
 * Unique SDK HTTP API  <b>Main connection to wss://ws-opal.unique.network (<a target=\"_blank\" href=\"https://polkadot.js.org/apps/?rpc=wss://ws-opal.unique.network\">apps ↗</a>)</b>  Secondary substrate connection to wss://ws-relay-bench.unique.network  (<a target=\"_blank\" href=\"https://polkadot.js.org/apps/?rpc=wss://ws-relay-bench.unique.network\">apps ↗</a>). Go to <a href=\"/relay/swagger\">/relay/swagger</a>  Consumable OpenAPI specification - (<a target=\"_blank\" href=\"/swagger-json\">JSON ↗</a>) (<a target=\"_blank\" href=\"/swagger-yaml\">YAML ↗</a>)
 *
 * The version of the OpenAPI document: 0.6.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using Org.OpenAPITools.Client;
using Org.OpenAPITools.Model;

namespace Org.OpenAPITools.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IRefungibleApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="addTokensMutationRequest1"></param>
        /// <param name="use"> (optional)</param>
        /// <param name="withFee"> (optional, default to false) (deprecated)</param>
        /// <param name="verify"> (optional, default to false)</param>
        /// <param name="callbackUrl"> (optional)</param>
        /// <param name="nonce"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>AddTokensMutationDefaultResponse1</returns>
        AddTokensMutationDefaultResponse1 AddTokensMutation(AddTokensMutationRequest1 addTokensMutationRequest1, string use = default(string), bool? withFee = default(bool?), bool? verify = default(bool?), string callbackUrl = default(string), decimal? nonce = default(decimal?), int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="addTokensMutationRequest1"></param>
        /// <param name="use"> (optional)</param>
        /// <param name="withFee"> (optional, default to false) (deprecated)</param>
        /// <param name="verify"> (optional, default to false)</param>
        /// <param name="callbackUrl"> (optional)</param>
        /// <param name="nonce"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of AddTokensMutationDefaultResponse1</returns>
        ApiResponse<AddTokensMutationDefaultResponse1> AddTokensMutationWithHttpInfo(AddTokensMutationRequest1 addTokensMutationRequest1, string use = default(string), bool? withFee = default(bool?), bool? verify = default(bool?), string callbackUrl = default(string), decimal? nonce = default(decimal?), int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="approveTokensMutationRequest1"></param>
        /// <param name="use"> (optional)</param>
        /// <param name="withFee"> (optional, default to false) (deprecated)</param>
        /// <param name="verify"> (optional, default to false)</param>
        /// <param name="callbackUrl"> (optional)</param>
        /// <param name="nonce"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApproveTokensMutationDefaultResponse1</returns>
        ApproveTokensMutationDefaultResponse1 ApproveTokensMutation(ApproveTokensMutationRequest1 approveTokensMutationRequest1, string use = default(string), bool? withFee = default(bool?), bool? verify = default(bool?), string callbackUrl = default(string), decimal? nonce = default(decimal?), int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="approveTokensMutationRequest1"></param>
        /// <param name="use"> (optional)</param>
        /// <param name="withFee"> (optional, default to false) (deprecated)</param>
        /// <param name="verify"> (optional, default to false)</param>
        /// <param name="callbackUrl"> (optional)</param>
        /// <param name="nonce"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ApproveTokensMutationDefaultResponse1</returns>
        ApiResponse<ApproveTokensMutationDefaultResponse1> ApproveTokensMutationWithHttpInfo(ApproveTokensMutationRequest1 approveTokensMutationRequest1, string use = default(string), bool? withFee = default(bool?), bool? verify = default(bool?), string callbackUrl = default(string), decimal? nonce = default(decimal?), int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createRefungibleCollectionMutationRequest"></param>
        /// <param name="use"> (optional)</param>
        /// <param name="withFee"> (optional, default to false) (deprecated)</param>
        /// <param name="verify"> (optional, default to false)</param>
        /// <param name="callbackUrl"> (optional)</param>
        /// <param name="nonce"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>CreateCollectionMutationDefaultResponse</returns>
        CreateCollectionMutationDefaultResponse CreateRefungibleCollectionMutation(CreateRefungibleCollectionMutationRequest createRefungibleCollectionMutationRequest, string use = default(string), bool? withFee = default(bool?), bool? verify = default(bool?), string callbackUrl = default(string), decimal? nonce = default(decimal?), int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createRefungibleCollectionMutationRequest"></param>
        /// <param name="use"> (optional)</param>
        /// <param name="withFee"> (optional, default to false) (deprecated)</param>
        /// <param name="verify"> (optional, default to false)</param>
        /// <param name="callbackUrl"> (optional)</param>
        /// <param name="nonce"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of CreateCollectionMutationDefaultResponse</returns>
        ApiResponse<CreateCollectionMutationDefaultResponse> CreateRefungibleCollectionMutationWithHttpInfo(CreateRefungibleCollectionMutationRequest createRefungibleCollectionMutationRequest, string use = default(string), bool? withFee = default(bool?), bool? verify = default(bool?), string callbackUrl = default(string), decimal? nonce = default(decimal?), int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionId"></param>
        /// <param name="tokenId"></param>
        /// <param name="from">The ss-58 encoded address</param>
        /// <param name="to">The ss-58 encoded address</param>
        /// <param name="at">Hash of execution block (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>AllowanceRefungibleTokenResponse</returns>
        AllowanceRefungibleTokenResponse RefungibleControllerAllowanceTokens(decimal collectionId, decimal tokenId, string from, string to, string at = default(string), int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionId"></param>
        /// <param name="tokenId"></param>
        /// <param name="from">The ss-58 encoded address</param>
        /// <param name="to">The ss-58 encoded address</param>
        /// <param name="at">Hash of execution block (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of AllowanceRefungibleTokenResponse</returns>
        ApiResponse<AllowanceRefungibleTokenResponse> RefungibleControllerAllowanceTokensWithHttpInfo(decimal collectionId, decimal tokenId, string from, string to, string at = default(string), int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionId"></param>
        /// <param name="tokenId"></param>
        /// <param name="address">The ss-58 encoded address</param>
        /// <param name="at">Hash of execution block (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>TokenBalanceResponse</returns>
        TokenBalanceResponse RefungibleControllerGetBalance(decimal collectionId, decimal tokenId, string address, string at = default(string), int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionId"></param>
        /// <param name="tokenId"></param>
        /// <param name="address">The ss-58 encoded address</param>
        /// <param name="at">Hash of execution block (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of TokenBalanceResponse</returns>
        ApiResponse<TokenBalanceResponse> RefungibleControllerGetBalanceWithHttpInfo(decimal collectionId, decimal tokenId, string address, string at = default(string), int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionId"></param>
        /// <param name="at">Hash of execution block (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>CollectionInfoWithSchemaResponse</returns>
        CollectionInfoWithSchemaResponse RefungibleControllerGetCollection(decimal collectionId, string at = default(string), int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionId"></param>
        /// <param name="at">Hash of execution block (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of CollectionInfoWithSchemaResponse</returns>
        ApiResponse<CollectionInfoWithSchemaResponse> RefungibleControllerGetCollectionWithHttpInfo(decimal collectionId, string at = default(string), int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionId"></param>
        /// <param name="tokenId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>TotalPiecesResponse</returns>
        TotalPiecesResponse RefungibleControllerTotalPieces(decimal collectionId, decimal tokenId, int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionId"></param>
        /// <param name="tokenId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of TotalPiecesResponse</returns>
        ApiResponse<TotalPiecesResponse> RefungibleControllerTotalPiecesWithHttpInfo(decimal collectionId, decimal tokenId, int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="repartitionTokenMutationRequest"></param>
        /// <param name="use"> (optional)</param>
        /// <param name="withFee"> (optional, default to false) (deprecated)</param>
        /// <param name="verify"> (optional, default to false)</param>
        /// <param name="callbackUrl"> (optional)</param>
        /// <param name="nonce"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>RepartitionTokenMutationDefaultResponse</returns>
        RepartitionTokenMutationDefaultResponse RepartitionTokenMutation(RepartitionTokenMutationRequest repartitionTokenMutationRequest, string use = default(string), bool? withFee = default(bool?), bool? verify = default(bool?), string callbackUrl = default(string), decimal? nonce = default(decimal?), int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="repartitionTokenMutationRequest"></param>
        /// <param name="use"> (optional)</param>
        /// <param name="withFee"> (optional, default to false) (deprecated)</param>
        /// <param name="verify"> (optional, default to false)</param>
        /// <param name="callbackUrl"> (optional)</param>
        /// <param name="nonce"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of RepartitionTokenMutationDefaultResponse</returns>
        ApiResponse<RepartitionTokenMutationDefaultResponse> RepartitionTokenMutationWithHttpInfo(RepartitionTokenMutationRequest repartitionTokenMutationRequest, string use = default(string), bool? withFee = default(bool?), bool? verify = default(bool?), string callbackUrl = default(string), decimal? nonce = default(decimal?), int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="transferTokensMutationRequest1"></param>
        /// <param name="use"> (optional)</param>
        /// <param name="withFee"> (optional, default to false) (deprecated)</param>
        /// <param name="verify"> (optional, default to false)</param>
        /// <param name="callbackUrl"> (optional)</param>
        /// <param name="nonce"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>TransferTokensMutationDefaultResponse1</returns>
        TransferTokensMutationDefaultResponse1 TransferTokensMutation(TransferTokensMutationRequest1 transferTokensMutationRequest1, string use = default(string), bool? withFee = default(bool?), bool? verify = default(bool?), string callbackUrl = default(string), decimal? nonce = default(decimal?), int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="transferTokensMutationRequest1"></param>
        /// <param name="use"> (optional)</param>
        /// <param name="withFee"> (optional, default to false) (deprecated)</param>
        /// <param name="verify"> (optional, default to false)</param>
        /// <param name="callbackUrl"> (optional)</param>
        /// <param name="nonce"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of TransferTokensMutationDefaultResponse1</returns>
        ApiResponse<TransferTokensMutationDefaultResponse1> TransferTokensMutationWithHttpInfo(TransferTokensMutationRequest1 transferTokensMutationRequest1, string use = default(string), bool? withFee = default(bool?), bool? verify = default(bool?), string callbackUrl = default(string), decimal? nonce = default(decimal?), int operationIndex = 0);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IRefungibleApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="addTokensMutationRequest1"></param>
        /// <param name="use"> (optional)</param>
        /// <param name="withFee"> (optional, default to false) (deprecated)</param>
        /// <param name="verify"> (optional, default to false)</param>
        /// <param name="callbackUrl"> (optional)</param>
        /// <param name="nonce"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of AddTokensMutationDefaultResponse1</returns>
        System.Threading.Tasks.Task<AddTokensMutationDefaultResponse1> AddTokensMutationAsync(AddTokensMutationRequest1 addTokensMutationRequest1, string use = default(string), bool? withFee = default(bool?), bool? verify = default(bool?), string callbackUrl = default(string), decimal? nonce = default(decimal?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="addTokensMutationRequest1"></param>
        /// <param name="use"> (optional)</param>
        /// <param name="withFee"> (optional, default to false) (deprecated)</param>
        /// <param name="verify"> (optional, default to false)</param>
        /// <param name="callbackUrl"> (optional)</param>
        /// <param name="nonce"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (AddTokensMutationDefaultResponse1)</returns>
        System.Threading.Tasks.Task<ApiResponse<AddTokensMutationDefaultResponse1>> AddTokensMutationWithHttpInfoAsync(AddTokensMutationRequest1 addTokensMutationRequest1, string use = default(string), bool? withFee = default(bool?), bool? verify = default(bool?), string callbackUrl = default(string), decimal? nonce = default(decimal?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="approveTokensMutationRequest1"></param>
        /// <param name="use"> (optional)</param>
        /// <param name="withFee"> (optional, default to false) (deprecated)</param>
        /// <param name="verify"> (optional, default to false)</param>
        /// <param name="callbackUrl"> (optional)</param>
        /// <param name="nonce"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApproveTokensMutationDefaultResponse1</returns>
        System.Threading.Tasks.Task<ApproveTokensMutationDefaultResponse1> ApproveTokensMutationAsync(ApproveTokensMutationRequest1 approveTokensMutationRequest1, string use = default(string), bool? withFee = default(bool?), bool? verify = default(bool?), string callbackUrl = default(string), decimal? nonce = default(decimal?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="approveTokensMutationRequest1"></param>
        /// <param name="use"> (optional)</param>
        /// <param name="withFee"> (optional, default to false) (deprecated)</param>
        /// <param name="verify"> (optional, default to false)</param>
        /// <param name="callbackUrl"> (optional)</param>
        /// <param name="nonce"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ApproveTokensMutationDefaultResponse1)</returns>
        System.Threading.Tasks.Task<ApiResponse<ApproveTokensMutationDefaultResponse1>> ApproveTokensMutationWithHttpInfoAsync(ApproveTokensMutationRequest1 approveTokensMutationRequest1, string use = default(string), bool? withFee = default(bool?), bool? verify = default(bool?), string callbackUrl = default(string), decimal? nonce = default(decimal?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createRefungibleCollectionMutationRequest"></param>
        /// <param name="use"> (optional)</param>
        /// <param name="withFee"> (optional, default to false) (deprecated)</param>
        /// <param name="verify"> (optional, default to false)</param>
        /// <param name="callbackUrl"> (optional)</param>
        /// <param name="nonce"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CreateCollectionMutationDefaultResponse</returns>
        System.Threading.Tasks.Task<CreateCollectionMutationDefaultResponse> CreateRefungibleCollectionMutationAsync(CreateRefungibleCollectionMutationRequest createRefungibleCollectionMutationRequest, string use = default(string), bool? withFee = default(bool?), bool? verify = default(bool?), string callbackUrl = default(string), decimal? nonce = default(decimal?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createRefungibleCollectionMutationRequest"></param>
        /// <param name="use"> (optional)</param>
        /// <param name="withFee"> (optional, default to false) (deprecated)</param>
        /// <param name="verify"> (optional, default to false)</param>
        /// <param name="callbackUrl"> (optional)</param>
        /// <param name="nonce"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CreateCollectionMutationDefaultResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<CreateCollectionMutationDefaultResponse>> CreateRefungibleCollectionMutationWithHttpInfoAsync(CreateRefungibleCollectionMutationRequest createRefungibleCollectionMutationRequest, string use = default(string), bool? withFee = default(bool?), bool? verify = default(bool?), string callbackUrl = default(string), decimal? nonce = default(decimal?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionId"></param>
        /// <param name="tokenId"></param>
        /// <param name="from">The ss-58 encoded address</param>
        /// <param name="to">The ss-58 encoded address</param>
        /// <param name="at">Hash of execution block (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of AllowanceRefungibleTokenResponse</returns>
        System.Threading.Tasks.Task<AllowanceRefungibleTokenResponse> RefungibleControllerAllowanceTokensAsync(decimal collectionId, decimal tokenId, string from, string to, string at = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionId"></param>
        /// <param name="tokenId"></param>
        /// <param name="from">The ss-58 encoded address</param>
        /// <param name="to">The ss-58 encoded address</param>
        /// <param name="at">Hash of execution block (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (AllowanceRefungibleTokenResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<AllowanceRefungibleTokenResponse>> RefungibleControllerAllowanceTokensWithHttpInfoAsync(decimal collectionId, decimal tokenId, string from, string to, string at = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionId"></param>
        /// <param name="tokenId"></param>
        /// <param name="address">The ss-58 encoded address</param>
        /// <param name="at">Hash of execution block (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of TokenBalanceResponse</returns>
        System.Threading.Tasks.Task<TokenBalanceResponse> RefungibleControllerGetBalanceAsync(decimal collectionId, decimal tokenId, string address, string at = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionId"></param>
        /// <param name="tokenId"></param>
        /// <param name="address">The ss-58 encoded address</param>
        /// <param name="at">Hash of execution block (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (TokenBalanceResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<TokenBalanceResponse>> RefungibleControllerGetBalanceWithHttpInfoAsync(decimal collectionId, decimal tokenId, string address, string at = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionId"></param>
        /// <param name="at">Hash of execution block (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CollectionInfoWithSchemaResponse</returns>
        System.Threading.Tasks.Task<CollectionInfoWithSchemaResponse> RefungibleControllerGetCollectionAsync(decimal collectionId, string at = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionId"></param>
        /// <param name="at">Hash of execution block (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CollectionInfoWithSchemaResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<CollectionInfoWithSchemaResponse>> RefungibleControllerGetCollectionWithHttpInfoAsync(decimal collectionId, string at = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionId"></param>
        /// <param name="tokenId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of TotalPiecesResponse</returns>
        System.Threading.Tasks.Task<TotalPiecesResponse> RefungibleControllerTotalPiecesAsync(decimal collectionId, decimal tokenId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionId"></param>
        /// <param name="tokenId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (TotalPiecesResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<TotalPiecesResponse>> RefungibleControllerTotalPiecesWithHttpInfoAsync(decimal collectionId, decimal tokenId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="repartitionTokenMutationRequest"></param>
        /// <param name="use"> (optional)</param>
        /// <param name="withFee"> (optional, default to false) (deprecated)</param>
        /// <param name="verify"> (optional, default to false)</param>
        /// <param name="callbackUrl"> (optional)</param>
        /// <param name="nonce"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of RepartitionTokenMutationDefaultResponse</returns>
        System.Threading.Tasks.Task<RepartitionTokenMutationDefaultResponse> RepartitionTokenMutationAsync(RepartitionTokenMutationRequest repartitionTokenMutationRequest, string use = default(string), bool? withFee = default(bool?), bool? verify = default(bool?), string callbackUrl = default(string), decimal? nonce = default(decimal?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="repartitionTokenMutationRequest"></param>
        /// <param name="use"> (optional)</param>
        /// <param name="withFee"> (optional, default to false) (deprecated)</param>
        /// <param name="verify"> (optional, default to false)</param>
        /// <param name="callbackUrl"> (optional)</param>
        /// <param name="nonce"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (RepartitionTokenMutationDefaultResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<RepartitionTokenMutationDefaultResponse>> RepartitionTokenMutationWithHttpInfoAsync(RepartitionTokenMutationRequest repartitionTokenMutationRequest, string use = default(string), bool? withFee = default(bool?), bool? verify = default(bool?), string callbackUrl = default(string), decimal? nonce = default(decimal?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="transferTokensMutationRequest1"></param>
        /// <param name="use"> (optional)</param>
        /// <param name="withFee"> (optional, default to false) (deprecated)</param>
        /// <param name="verify"> (optional, default to false)</param>
        /// <param name="callbackUrl"> (optional)</param>
        /// <param name="nonce"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of TransferTokensMutationDefaultResponse1</returns>
        System.Threading.Tasks.Task<TransferTokensMutationDefaultResponse1> TransferTokensMutationAsync(TransferTokensMutationRequest1 transferTokensMutationRequest1, string use = default(string), bool? withFee = default(bool?), bool? verify = default(bool?), string callbackUrl = default(string), decimal? nonce = default(decimal?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="transferTokensMutationRequest1"></param>
        /// <param name="use"> (optional)</param>
        /// <param name="withFee"> (optional, default to false) (deprecated)</param>
        /// <param name="verify"> (optional, default to false)</param>
        /// <param name="callbackUrl"> (optional)</param>
        /// <param name="nonce"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (TransferTokensMutationDefaultResponse1)</returns>
        System.Threading.Tasks.Task<ApiResponse<TransferTokensMutationDefaultResponse1>> TransferTokensMutationWithHttpInfoAsync(TransferTokensMutationRequest1 transferTokensMutationRequest1, string use = default(string), bool? withFee = default(bool?), bool? verify = default(bool?), string callbackUrl = default(string), decimal? nonce = default(decimal?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IRefungibleApi : IRefungibleApiSync, IRefungibleApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class RefungibleApi : IRefungibleApi
    {
        private Org.OpenAPITools.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="RefungibleApi"/> class.
        /// </summary>
        /// <returns></returns>
        public RefungibleApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="RefungibleApi"/> class.
        /// </summary>
        /// <returns></returns>
        public RefungibleApi(string basePath)
        {
            this.Configuration = Org.OpenAPITools.Client.Configuration.MergeConfigurations(
                Org.OpenAPITools.Client.GlobalConfiguration.Instance,
                new Org.OpenAPITools.Client.Configuration { BasePath = basePath }
            );
            this.Client = new Org.OpenAPITools.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Org.OpenAPITools.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = Org.OpenAPITools.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="RefungibleApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public RefungibleApi(Org.OpenAPITools.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = Org.OpenAPITools.Client.Configuration.MergeConfigurations(
                Org.OpenAPITools.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new Org.OpenAPITools.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Org.OpenAPITools.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = Org.OpenAPITools.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="RefungibleApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public RefungibleApi(Org.OpenAPITools.Client.ISynchronousClient client, Org.OpenAPITools.Client.IAsynchronousClient asyncClient, Org.OpenAPITools.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = Org.OpenAPITools.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public Org.OpenAPITools.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public Org.OpenAPITools.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Org.OpenAPITools.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Org.OpenAPITools.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="addTokensMutationRequest1"></param>
        /// <param name="use"> (optional)</param>
        /// <param name="withFee"> (optional, default to false) (deprecated)</param>
        /// <param name="verify"> (optional, default to false)</param>
        /// <param name="callbackUrl"> (optional)</param>
        /// <param name="nonce"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>AddTokensMutationDefaultResponse1</returns>
        public AddTokensMutationDefaultResponse1 AddTokensMutation(AddTokensMutationRequest1 addTokensMutationRequest1, string use = default(string), bool? withFee = default(bool?), bool? verify = default(bool?), string callbackUrl = default(string), decimal? nonce = default(decimal?), int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<AddTokensMutationDefaultResponse1> localVarResponse = AddTokensMutationWithHttpInfo(addTokensMutationRequest1, use, withFee, verify, callbackUrl, nonce);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="addTokensMutationRequest1"></param>
        /// <param name="use"> (optional)</param>
        /// <param name="withFee"> (optional, default to false) (deprecated)</param>
        /// <param name="verify"> (optional, default to false)</param>
        /// <param name="callbackUrl"> (optional)</param>
        /// <param name="nonce"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of AddTokensMutationDefaultResponse1</returns>
        public Org.OpenAPITools.Client.ApiResponse<AddTokensMutationDefaultResponse1> AddTokensMutationWithHttpInfo(AddTokensMutationRequest1 addTokensMutationRequest1, string use = default(string), bool? withFee = default(bool?), bool? verify = default(bool?), string callbackUrl = default(string), decimal? nonce = default(decimal?), int operationIndex = 0)
        {
            // verify the required parameter 'addTokensMutationRequest1' is set
            if (addTokensMutationRequest1 == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'addTokensMutationRequest1' when calling RefungibleApi->AddTokensMutation");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (use != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "use", use));
            }
            if (withFee != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "withFee", withFee));
            }
            if (verify != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "verify", verify));
            }
            if (callbackUrl != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "callbackUrl", callbackUrl));
            }
            if (nonce != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "nonce", nonce));
            }
            localVarRequestOptions.Data = addTokensMutationRequest1;

            localVarRequestOptions.Operation = "RefungibleApi.AddTokensMutation";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (SeedAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<AddTokensMutationDefaultResponse1>("/v1/refungible/tokens", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AddTokensMutation", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="addTokensMutationRequest1"></param>
        /// <param name="use"> (optional)</param>
        /// <param name="withFee"> (optional, default to false) (deprecated)</param>
        /// <param name="verify"> (optional, default to false)</param>
        /// <param name="callbackUrl"> (optional)</param>
        /// <param name="nonce"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of AddTokensMutationDefaultResponse1</returns>
        public async System.Threading.Tasks.Task<AddTokensMutationDefaultResponse1> AddTokensMutationAsync(AddTokensMutationRequest1 addTokensMutationRequest1, string use = default(string), bool? withFee = default(bool?), bool? verify = default(bool?), string callbackUrl = default(string), decimal? nonce = default(decimal?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<AddTokensMutationDefaultResponse1> localVarResponse = await AddTokensMutationWithHttpInfoAsync(addTokensMutationRequest1, use, withFee, verify, callbackUrl, nonce, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="addTokensMutationRequest1"></param>
        /// <param name="use"> (optional)</param>
        /// <param name="withFee"> (optional, default to false) (deprecated)</param>
        /// <param name="verify"> (optional, default to false)</param>
        /// <param name="callbackUrl"> (optional)</param>
        /// <param name="nonce"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (AddTokensMutationDefaultResponse1)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<AddTokensMutationDefaultResponse1>> AddTokensMutationWithHttpInfoAsync(AddTokensMutationRequest1 addTokensMutationRequest1, string use = default(string), bool? withFee = default(bool?), bool? verify = default(bool?), string callbackUrl = default(string), decimal? nonce = default(decimal?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'addTokensMutationRequest1' is set
            if (addTokensMutationRequest1 == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'addTokensMutationRequest1' when calling RefungibleApi->AddTokensMutation");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (use != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "use", use));
            }
            if (withFee != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "withFee", withFee));
            }
            if (verify != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "verify", verify));
            }
            if (callbackUrl != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "callbackUrl", callbackUrl));
            }
            if (nonce != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "nonce", nonce));
            }
            localVarRequestOptions.Data = addTokensMutationRequest1;

            localVarRequestOptions.Operation = "RefungibleApi.AddTokensMutation";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (SeedAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<AddTokensMutationDefaultResponse1>("/v1/refungible/tokens", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AddTokensMutation", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="approveTokensMutationRequest1"></param>
        /// <param name="use"> (optional)</param>
        /// <param name="withFee"> (optional, default to false) (deprecated)</param>
        /// <param name="verify"> (optional, default to false)</param>
        /// <param name="callbackUrl"> (optional)</param>
        /// <param name="nonce"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApproveTokensMutationDefaultResponse1</returns>
        public ApproveTokensMutationDefaultResponse1 ApproveTokensMutation(ApproveTokensMutationRequest1 approveTokensMutationRequest1, string use = default(string), bool? withFee = default(bool?), bool? verify = default(bool?), string callbackUrl = default(string), decimal? nonce = default(decimal?), int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<ApproveTokensMutationDefaultResponse1> localVarResponse = ApproveTokensMutationWithHttpInfo(approveTokensMutationRequest1, use, withFee, verify, callbackUrl, nonce);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="approveTokensMutationRequest1"></param>
        /// <param name="use"> (optional)</param>
        /// <param name="withFee"> (optional, default to false) (deprecated)</param>
        /// <param name="verify"> (optional, default to false)</param>
        /// <param name="callbackUrl"> (optional)</param>
        /// <param name="nonce"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ApproveTokensMutationDefaultResponse1</returns>
        public Org.OpenAPITools.Client.ApiResponse<ApproveTokensMutationDefaultResponse1> ApproveTokensMutationWithHttpInfo(ApproveTokensMutationRequest1 approveTokensMutationRequest1, string use = default(string), bool? withFee = default(bool?), bool? verify = default(bool?), string callbackUrl = default(string), decimal? nonce = default(decimal?), int operationIndex = 0)
        {
            // verify the required parameter 'approveTokensMutationRequest1' is set
            if (approveTokensMutationRequest1 == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'approveTokensMutationRequest1' when calling RefungibleApi->ApproveTokensMutation");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (use != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "use", use));
            }
            if (withFee != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "withFee", withFee));
            }
            if (verify != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "verify", verify));
            }
            if (callbackUrl != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "callbackUrl", callbackUrl));
            }
            if (nonce != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "nonce", nonce));
            }
            localVarRequestOptions.Data = approveTokensMutationRequest1;

            localVarRequestOptions.Operation = "RefungibleApi.ApproveTokensMutation";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (SeedAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<ApproveTokensMutationDefaultResponse1>("/v1/refungible/tokens/approve", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApproveTokensMutation", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="approveTokensMutationRequest1"></param>
        /// <param name="use"> (optional)</param>
        /// <param name="withFee"> (optional, default to false) (deprecated)</param>
        /// <param name="verify"> (optional, default to false)</param>
        /// <param name="callbackUrl"> (optional)</param>
        /// <param name="nonce"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApproveTokensMutationDefaultResponse1</returns>
        public async System.Threading.Tasks.Task<ApproveTokensMutationDefaultResponse1> ApproveTokensMutationAsync(ApproveTokensMutationRequest1 approveTokensMutationRequest1, string use = default(string), bool? withFee = default(bool?), bool? verify = default(bool?), string callbackUrl = default(string), decimal? nonce = default(decimal?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<ApproveTokensMutationDefaultResponse1> localVarResponse = await ApproveTokensMutationWithHttpInfoAsync(approveTokensMutationRequest1, use, withFee, verify, callbackUrl, nonce, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="approveTokensMutationRequest1"></param>
        /// <param name="use"> (optional)</param>
        /// <param name="withFee"> (optional, default to false) (deprecated)</param>
        /// <param name="verify"> (optional, default to false)</param>
        /// <param name="callbackUrl"> (optional)</param>
        /// <param name="nonce"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ApproveTokensMutationDefaultResponse1)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<ApproveTokensMutationDefaultResponse1>> ApproveTokensMutationWithHttpInfoAsync(ApproveTokensMutationRequest1 approveTokensMutationRequest1, string use = default(string), bool? withFee = default(bool?), bool? verify = default(bool?), string callbackUrl = default(string), decimal? nonce = default(decimal?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'approveTokensMutationRequest1' is set
            if (approveTokensMutationRequest1 == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'approveTokensMutationRequest1' when calling RefungibleApi->ApproveTokensMutation");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (use != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "use", use));
            }
            if (withFee != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "withFee", withFee));
            }
            if (verify != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "verify", verify));
            }
            if (callbackUrl != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "callbackUrl", callbackUrl));
            }
            if (nonce != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "nonce", nonce));
            }
            localVarRequestOptions.Data = approveTokensMutationRequest1;

            localVarRequestOptions.Operation = "RefungibleApi.ApproveTokensMutation";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (SeedAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<ApproveTokensMutationDefaultResponse1>("/v1/refungible/tokens/approve", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApproveTokensMutation", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createRefungibleCollectionMutationRequest"></param>
        /// <param name="use"> (optional)</param>
        /// <param name="withFee"> (optional, default to false) (deprecated)</param>
        /// <param name="verify"> (optional, default to false)</param>
        /// <param name="callbackUrl"> (optional)</param>
        /// <param name="nonce"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>CreateCollectionMutationDefaultResponse</returns>
        public CreateCollectionMutationDefaultResponse CreateRefungibleCollectionMutation(CreateRefungibleCollectionMutationRequest createRefungibleCollectionMutationRequest, string use = default(string), bool? withFee = default(bool?), bool? verify = default(bool?), string callbackUrl = default(string), decimal? nonce = default(decimal?), int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<CreateCollectionMutationDefaultResponse> localVarResponse = CreateRefungibleCollectionMutationWithHttpInfo(createRefungibleCollectionMutationRequest, use, withFee, verify, callbackUrl, nonce);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createRefungibleCollectionMutationRequest"></param>
        /// <param name="use"> (optional)</param>
        /// <param name="withFee"> (optional, default to false) (deprecated)</param>
        /// <param name="verify"> (optional, default to false)</param>
        /// <param name="callbackUrl"> (optional)</param>
        /// <param name="nonce"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of CreateCollectionMutationDefaultResponse</returns>
        public Org.OpenAPITools.Client.ApiResponse<CreateCollectionMutationDefaultResponse> CreateRefungibleCollectionMutationWithHttpInfo(CreateRefungibleCollectionMutationRequest createRefungibleCollectionMutationRequest, string use = default(string), bool? withFee = default(bool?), bool? verify = default(bool?), string callbackUrl = default(string), decimal? nonce = default(decimal?), int operationIndex = 0)
        {
            // verify the required parameter 'createRefungibleCollectionMutationRequest' is set
            if (createRefungibleCollectionMutationRequest == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'createRefungibleCollectionMutationRequest' when calling RefungibleApi->CreateRefungibleCollectionMutation");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (use != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "use", use));
            }
            if (withFee != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "withFee", withFee));
            }
            if (verify != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "verify", verify));
            }
            if (callbackUrl != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "callbackUrl", callbackUrl));
            }
            if (nonce != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "nonce", nonce));
            }
            localVarRequestOptions.Data = createRefungibleCollectionMutationRequest;

            localVarRequestOptions.Operation = "RefungibleApi.CreateRefungibleCollectionMutation";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (SeedAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<CreateCollectionMutationDefaultResponse>("/v1/refungible/collection", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateRefungibleCollectionMutation", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createRefungibleCollectionMutationRequest"></param>
        /// <param name="use"> (optional)</param>
        /// <param name="withFee"> (optional, default to false) (deprecated)</param>
        /// <param name="verify"> (optional, default to false)</param>
        /// <param name="callbackUrl"> (optional)</param>
        /// <param name="nonce"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CreateCollectionMutationDefaultResponse</returns>
        public async System.Threading.Tasks.Task<CreateCollectionMutationDefaultResponse> CreateRefungibleCollectionMutationAsync(CreateRefungibleCollectionMutationRequest createRefungibleCollectionMutationRequest, string use = default(string), bool? withFee = default(bool?), bool? verify = default(bool?), string callbackUrl = default(string), decimal? nonce = default(decimal?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<CreateCollectionMutationDefaultResponse> localVarResponse = await CreateRefungibleCollectionMutationWithHttpInfoAsync(createRefungibleCollectionMutationRequest, use, withFee, verify, callbackUrl, nonce, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createRefungibleCollectionMutationRequest"></param>
        /// <param name="use"> (optional)</param>
        /// <param name="withFee"> (optional, default to false) (deprecated)</param>
        /// <param name="verify"> (optional, default to false)</param>
        /// <param name="callbackUrl"> (optional)</param>
        /// <param name="nonce"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CreateCollectionMutationDefaultResponse)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<CreateCollectionMutationDefaultResponse>> CreateRefungibleCollectionMutationWithHttpInfoAsync(CreateRefungibleCollectionMutationRequest createRefungibleCollectionMutationRequest, string use = default(string), bool? withFee = default(bool?), bool? verify = default(bool?), string callbackUrl = default(string), decimal? nonce = default(decimal?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'createRefungibleCollectionMutationRequest' is set
            if (createRefungibleCollectionMutationRequest == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'createRefungibleCollectionMutationRequest' when calling RefungibleApi->CreateRefungibleCollectionMutation");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (use != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "use", use));
            }
            if (withFee != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "withFee", withFee));
            }
            if (verify != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "verify", verify));
            }
            if (callbackUrl != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "callbackUrl", callbackUrl));
            }
            if (nonce != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "nonce", nonce));
            }
            localVarRequestOptions.Data = createRefungibleCollectionMutationRequest;

            localVarRequestOptions.Operation = "RefungibleApi.CreateRefungibleCollectionMutation";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (SeedAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<CreateCollectionMutationDefaultResponse>("/v1/refungible/collection", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateRefungibleCollectionMutation", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionId"></param>
        /// <param name="tokenId"></param>
        /// <param name="from">The ss-58 encoded address</param>
        /// <param name="to">The ss-58 encoded address</param>
        /// <param name="at">Hash of execution block (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>AllowanceRefungibleTokenResponse</returns>
        public AllowanceRefungibleTokenResponse RefungibleControllerAllowanceTokens(decimal collectionId, decimal tokenId, string from, string to, string at = default(string), int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<AllowanceRefungibleTokenResponse> localVarResponse = RefungibleControllerAllowanceTokensWithHttpInfo(collectionId, tokenId, from, to, at);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionId"></param>
        /// <param name="tokenId"></param>
        /// <param name="from">The ss-58 encoded address</param>
        /// <param name="to">The ss-58 encoded address</param>
        /// <param name="at">Hash of execution block (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of AllowanceRefungibleTokenResponse</returns>
        public Org.OpenAPITools.Client.ApiResponse<AllowanceRefungibleTokenResponse> RefungibleControllerAllowanceTokensWithHttpInfo(decimal collectionId, decimal tokenId, string from, string to, string at = default(string), int operationIndex = 0)
        {
            // verify the required parameter 'from' is set
            if (from == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'from' when calling RefungibleApi->RefungibleControllerAllowanceTokens");
            }

            // verify the required parameter 'to' is set
            if (to == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'to' when calling RefungibleApi->RefungibleControllerAllowanceTokens");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (at != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "at", at));
            }
            localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "collectionId", collectionId));
            localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "tokenId", tokenId));
            localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "from", from));
            localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "to", to));

            localVarRequestOptions.Operation = "RefungibleApi.RefungibleControllerAllowanceTokens";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Get<AllowanceRefungibleTokenResponse>("/v1/refungible/tokens/allowance", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RefungibleControllerAllowanceTokens", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionId"></param>
        /// <param name="tokenId"></param>
        /// <param name="from">The ss-58 encoded address</param>
        /// <param name="to">The ss-58 encoded address</param>
        /// <param name="at">Hash of execution block (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of AllowanceRefungibleTokenResponse</returns>
        public async System.Threading.Tasks.Task<AllowanceRefungibleTokenResponse> RefungibleControllerAllowanceTokensAsync(decimal collectionId, decimal tokenId, string from, string to, string at = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<AllowanceRefungibleTokenResponse> localVarResponse = await RefungibleControllerAllowanceTokensWithHttpInfoAsync(collectionId, tokenId, from, to, at, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionId"></param>
        /// <param name="tokenId"></param>
        /// <param name="from">The ss-58 encoded address</param>
        /// <param name="to">The ss-58 encoded address</param>
        /// <param name="at">Hash of execution block (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (AllowanceRefungibleTokenResponse)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<AllowanceRefungibleTokenResponse>> RefungibleControllerAllowanceTokensWithHttpInfoAsync(decimal collectionId, decimal tokenId, string from, string to, string at = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'from' is set
            if (from == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'from' when calling RefungibleApi->RefungibleControllerAllowanceTokens");
            }

            // verify the required parameter 'to' is set
            if (to == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'to' when calling RefungibleApi->RefungibleControllerAllowanceTokens");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (at != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "at", at));
            }
            localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "collectionId", collectionId));
            localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "tokenId", tokenId));
            localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "from", from));
            localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "to", to));

            localVarRequestOptions.Operation = "RefungibleApi.RefungibleControllerAllowanceTokens";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<AllowanceRefungibleTokenResponse>("/v1/refungible/tokens/allowance", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RefungibleControllerAllowanceTokens", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionId"></param>
        /// <param name="tokenId"></param>
        /// <param name="address">The ss-58 encoded address</param>
        /// <param name="at">Hash of execution block (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>TokenBalanceResponse</returns>
        public TokenBalanceResponse RefungibleControllerGetBalance(decimal collectionId, decimal tokenId, string address, string at = default(string), int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<TokenBalanceResponse> localVarResponse = RefungibleControllerGetBalanceWithHttpInfo(collectionId, tokenId, address, at);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionId"></param>
        /// <param name="tokenId"></param>
        /// <param name="address">The ss-58 encoded address</param>
        /// <param name="at">Hash of execution block (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of TokenBalanceResponse</returns>
        public Org.OpenAPITools.Client.ApiResponse<TokenBalanceResponse> RefungibleControllerGetBalanceWithHttpInfo(decimal collectionId, decimal tokenId, string address, string at = default(string), int operationIndex = 0)
        {
            // verify the required parameter 'address' is set
            if (address == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'address' when calling RefungibleApi->RefungibleControllerGetBalance");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (at != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "at", at));
            }
            localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "collectionId", collectionId));
            localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "tokenId", tokenId));
            localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "address", address));

            localVarRequestOptions.Operation = "RefungibleApi.RefungibleControllerGetBalance";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Get<TokenBalanceResponse>("/v1/refungible/tokens/balance", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RefungibleControllerGetBalance", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionId"></param>
        /// <param name="tokenId"></param>
        /// <param name="address">The ss-58 encoded address</param>
        /// <param name="at">Hash of execution block (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of TokenBalanceResponse</returns>
        public async System.Threading.Tasks.Task<TokenBalanceResponse> RefungibleControllerGetBalanceAsync(decimal collectionId, decimal tokenId, string address, string at = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<TokenBalanceResponse> localVarResponse = await RefungibleControllerGetBalanceWithHttpInfoAsync(collectionId, tokenId, address, at, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionId"></param>
        /// <param name="tokenId"></param>
        /// <param name="address">The ss-58 encoded address</param>
        /// <param name="at">Hash of execution block (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (TokenBalanceResponse)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<TokenBalanceResponse>> RefungibleControllerGetBalanceWithHttpInfoAsync(decimal collectionId, decimal tokenId, string address, string at = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'address' is set
            if (address == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'address' when calling RefungibleApi->RefungibleControllerGetBalance");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (at != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "at", at));
            }
            localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "collectionId", collectionId));
            localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "tokenId", tokenId));
            localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "address", address));

            localVarRequestOptions.Operation = "RefungibleApi.RefungibleControllerGetBalance";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<TokenBalanceResponse>("/v1/refungible/tokens/balance", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RefungibleControllerGetBalance", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionId"></param>
        /// <param name="at">Hash of execution block (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>CollectionInfoWithSchemaResponse</returns>
        public CollectionInfoWithSchemaResponse RefungibleControllerGetCollection(decimal collectionId, string at = default(string), int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<CollectionInfoWithSchemaResponse> localVarResponse = RefungibleControllerGetCollectionWithHttpInfo(collectionId, at);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionId"></param>
        /// <param name="at">Hash of execution block (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of CollectionInfoWithSchemaResponse</returns>
        public Org.OpenAPITools.Client.ApiResponse<CollectionInfoWithSchemaResponse> RefungibleControllerGetCollectionWithHttpInfo(decimal collectionId, string at = default(string), int operationIndex = 0)
        {
            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (at != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "at", at));
            }
            localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "collectionId", collectionId));

            localVarRequestOptions.Operation = "RefungibleApi.RefungibleControllerGetCollection";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Get<CollectionInfoWithSchemaResponse>("/v1/refungible/collection", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RefungibleControllerGetCollection", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionId"></param>
        /// <param name="at">Hash of execution block (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CollectionInfoWithSchemaResponse</returns>
        public async System.Threading.Tasks.Task<CollectionInfoWithSchemaResponse> RefungibleControllerGetCollectionAsync(decimal collectionId, string at = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<CollectionInfoWithSchemaResponse> localVarResponse = await RefungibleControllerGetCollectionWithHttpInfoAsync(collectionId, at, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionId"></param>
        /// <param name="at">Hash of execution block (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CollectionInfoWithSchemaResponse)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<CollectionInfoWithSchemaResponse>> RefungibleControllerGetCollectionWithHttpInfoAsync(decimal collectionId, string at = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (at != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "at", at));
            }
            localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "collectionId", collectionId));

            localVarRequestOptions.Operation = "RefungibleApi.RefungibleControllerGetCollection";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<CollectionInfoWithSchemaResponse>("/v1/refungible/collection", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RefungibleControllerGetCollection", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionId"></param>
        /// <param name="tokenId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>TotalPiecesResponse</returns>
        public TotalPiecesResponse RefungibleControllerTotalPieces(decimal collectionId, decimal tokenId, int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<TotalPiecesResponse> localVarResponse = RefungibleControllerTotalPiecesWithHttpInfo(collectionId, tokenId);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionId"></param>
        /// <param name="tokenId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of TotalPiecesResponse</returns>
        public Org.OpenAPITools.Client.ApiResponse<TotalPiecesResponse> RefungibleControllerTotalPiecesWithHttpInfo(decimal collectionId, decimal tokenId, int operationIndex = 0)
        {
            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "collectionId", collectionId));
            localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "tokenId", tokenId));

            localVarRequestOptions.Operation = "RefungibleApi.RefungibleControllerTotalPieces";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Get<TotalPiecesResponse>("/v1/refungible/tokens/total-pieces", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RefungibleControllerTotalPieces", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionId"></param>
        /// <param name="tokenId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of TotalPiecesResponse</returns>
        public async System.Threading.Tasks.Task<TotalPiecesResponse> RefungibleControllerTotalPiecesAsync(decimal collectionId, decimal tokenId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<TotalPiecesResponse> localVarResponse = await RefungibleControllerTotalPiecesWithHttpInfoAsync(collectionId, tokenId, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionId"></param>
        /// <param name="tokenId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (TotalPiecesResponse)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<TotalPiecesResponse>> RefungibleControllerTotalPiecesWithHttpInfoAsync(decimal collectionId, decimal tokenId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "collectionId", collectionId));
            localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "tokenId", tokenId));

            localVarRequestOptions.Operation = "RefungibleApi.RefungibleControllerTotalPieces";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<TotalPiecesResponse>("/v1/refungible/tokens/total-pieces", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RefungibleControllerTotalPieces", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="repartitionTokenMutationRequest"></param>
        /// <param name="use"> (optional)</param>
        /// <param name="withFee"> (optional, default to false) (deprecated)</param>
        /// <param name="verify"> (optional, default to false)</param>
        /// <param name="callbackUrl"> (optional)</param>
        /// <param name="nonce"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>RepartitionTokenMutationDefaultResponse</returns>
        public RepartitionTokenMutationDefaultResponse RepartitionTokenMutation(RepartitionTokenMutationRequest repartitionTokenMutationRequest, string use = default(string), bool? withFee = default(bool?), bool? verify = default(bool?), string callbackUrl = default(string), decimal? nonce = default(decimal?), int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<RepartitionTokenMutationDefaultResponse> localVarResponse = RepartitionTokenMutationWithHttpInfo(repartitionTokenMutationRequest, use, withFee, verify, callbackUrl, nonce);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="repartitionTokenMutationRequest"></param>
        /// <param name="use"> (optional)</param>
        /// <param name="withFee"> (optional, default to false) (deprecated)</param>
        /// <param name="verify"> (optional, default to false)</param>
        /// <param name="callbackUrl"> (optional)</param>
        /// <param name="nonce"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of RepartitionTokenMutationDefaultResponse</returns>
        public Org.OpenAPITools.Client.ApiResponse<RepartitionTokenMutationDefaultResponse> RepartitionTokenMutationWithHttpInfo(RepartitionTokenMutationRequest repartitionTokenMutationRequest, string use = default(string), bool? withFee = default(bool?), bool? verify = default(bool?), string callbackUrl = default(string), decimal? nonce = default(decimal?), int operationIndex = 0)
        {
            // verify the required parameter 'repartitionTokenMutationRequest' is set
            if (repartitionTokenMutationRequest == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'repartitionTokenMutationRequest' when calling RefungibleApi->RepartitionTokenMutation");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (use != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "use", use));
            }
            if (withFee != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "withFee", withFee));
            }
            if (verify != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "verify", verify));
            }
            if (callbackUrl != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "callbackUrl", callbackUrl));
            }
            if (nonce != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "nonce", nonce));
            }
            localVarRequestOptions.Data = repartitionTokenMutationRequest;

            localVarRequestOptions.Operation = "RefungibleApi.RepartitionTokenMutation";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (SeedAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<RepartitionTokenMutationDefaultResponse>("/v1/refungible/tokens/repartition", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RepartitionTokenMutation", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="repartitionTokenMutationRequest"></param>
        /// <param name="use"> (optional)</param>
        /// <param name="withFee"> (optional, default to false) (deprecated)</param>
        /// <param name="verify"> (optional, default to false)</param>
        /// <param name="callbackUrl"> (optional)</param>
        /// <param name="nonce"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of RepartitionTokenMutationDefaultResponse</returns>
        public async System.Threading.Tasks.Task<RepartitionTokenMutationDefaultResponse> RepartitionTokenMutationAsync(RepartitionTokenMutationRequest repartitionTokenMutationRequest, string use = default(string), bool? withFee = default(bool?), bool? verify = default(bool?), string callbackUrl = default(string), decimal? nonce = default(decimal?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<RepartitionTokenMutationDefaultResponse> localVarResponse = await RepartitionTokenMutationWithHttpInfoAsync(repartitionTokenMutationRequest, use, withFee, verify, callbackUrl, nonce, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="repartitionTokenMutationRequest"></param>
        /// <param name="use"> (optional)</param>
        /// <param name="withFee"> (optional, default to false) (deprecated)</param>
        /// <param name="verify"> (optional, default to false)</param>
        /// <param name="callbackUrl"> (optional)</param>
        /// <param name="nonce"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (RepartitionTokenMutationDefaultResponse)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<RepartitionTokenMutationDefaultResponse>> RepartitionTokenMutationWithHttpInfoAsync(RepartitionTokenMutationRequest repartitionTokenMutationRequest, string use = default(string), bool? withFee = default(bool?), bool? verify = default(bool?), string callbackUrl = default(string), decimal? nonce = default(decimal?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'repartitionTokenMutationRequest' is set
            if (repartitionTokenMutationRequest == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'repartitionTokenMutationRequest' when calling RefungibleApi->RepartitionTokenMutation");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (use != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "use", use));
            }
            if (withFee != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "withFee", withFee));
            }
            if (verify != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "verify", verify));
            }
            if (callbackUrl != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "callbackUrl", callbackUrl));
            }
            if (nonce != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "nonce", nonce));
            }
            localVarRequestOptions.Data = repartitionTokenMutationRequest;

            localVarRequestOptions.Operation = "RefungibleApi.RepartitionTokenMutation";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (SeedAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<RepartitionTokenMutationDefaultResponse>("/v1/refungible/tokens/repartition", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RepartitionTokenMutation", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="transferTokensMutationRequest1"></param>
        /// <param name="use"> (optional)</param>
        /// <param name="withFee"> (optional, default to false) (deprecated)</param>
        /// <param name="verify"> (optional, default to false)</param>
        /// <param name="callbackUrl"> (optional)</param>
        /// <param name="nonce"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>TransferTokensMutationDefaultResponse1</returns>
        public TransferTokensMutationDefaultResponse1 TransferTokensMutation(TransferTokensMutationRequest1 transferTokensMutationRequest1, string use = default(string), bool? withFee = default(bool?), bool? verify = default(bool?), string callbackUrl = default(string), decimal? nonce = default(decimal?), int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<TransferTokensMutationDefaultResponse1> localVarResponse = TransferTokensMutationWithHttpInfo(transferTokensMutationRequest1, use, withFee, verify, callbackUrl, nonce);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="transferTokensMutationRequest1"></param>
        /// <param name="use"> (optional)</param>
        /// <param name="withFee"> (optional, default to false) (deprecated)</param>
        /// <param name="verify"> (optional, default to false)</param>
        /// <param name="callbackUrl"> (optional)</param>
        /// <param name="nonce"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of TransferTokensMutationDefaultResponse1</returns>
        public Org.OpenAPITools.Client.ApiResponse<TransferTokensMutationDefaultResponse1> TransferTokensMutationWithHttpInfo(TransferTokensMutationRequest1 transferTokensMutationRequest1, string use = default(string), bool? withFee = default(bool?), bool? verify = default(bool?), string callbackUrl = default(string), decimal? nonce = default(decimal?), int operationIndex = 0)
        {
            // verify the required parameter 'transferTokensMutationRequest1' is set
            if (transferTokensMutationRequest1 == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'transferTokensMutationRequest1' when calling RefungibleApi->TransferTokensMutation");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (use != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "use", use));
            }
            if (withFee != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "withFee", withFee));
            }
            if (verify != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "verify", verify));
            }
            if (callbackUrl != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "callbackUrl", callbackUrl));
            }
            if (nonce != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "nonce", nonce));
            }
            localVarRequestOptions.Data = transferTokensMutationRequest1;

            localVarRequestOptions.Operation = "RefungibleApi.TransferTokensMutation";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (SeedAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<TransferTokensMutationDefaultResponse1>("/v1/refungible/tokens/transfer", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("TransferTokensMutation", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="transferTokensMutationRequest1"></param>
        /// <param name="use"> (optional)</param>
        /// <param name="withFee"> (optional, default to false) (deprecated)</param>
        /// <param name="verify"> (optional, default to false)</param>
        /// <param name="callbackUrl"> (optional)</param>
        /// <param name="nonce"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of TransferTokensMutationDefaultResponse1</returns>
        public async System.Threading.Tasks.Task<TransferTokensMutationDefaultResponse1> TransferTokensMutationAsync(TransferTokensMutationRequest1 transferTokensMutationRequest1, string use = default(string), bool? withFee = default(bool?), bool? verify = default(bool?), string callbackUrl = default(string), decimal? nonce = default(decimal?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<TransferTokensMutationDefaultResponse1> localVarResponse = await TransferTokensMutationWithHttpInfoAsync(transferTokensMutationRequest1, use, withFee, verify, callbackUrl, nonce, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="transferTokensMutationRequest1"></param>
        /// <param name="use"> (optional)</param>
        /// <param name="withFee"> (optional, default to false) (deprecated)</param>
        /// <param name="verify"> (optional, default to false)</param>
        /// <param name="callbackUrl"> (optional)</param>
        /// <param name="nonce"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (TransferTokensMutationDefaultResponse1)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<TransferTokensMutationDefaultResponse1>> TransferTokensMutationWithHttpInfoAsync(TransferTokensMutationRequest1 transferTokensMutationRequest1, string use = default(string), bool? withFee = default(bool?), bool? verify = default(bool?), string callbackUrl = default(string), decimal? nonce = default(decimal?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'transferTokensMutationRequest1' is set
            if (transferTokensMutationRequest1 == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'transferTokensMutationRequest1' when calling RefungibleApi->TransferTokensMutation");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (use != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "use", use));
            }
            if (withFee != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "withFee", withFee));
            }
            if (verify != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "verify", verify));
            }
            if (callbackUrl != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "callbackUrl", callbackUrl));
            }
            if (nonce != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "nonce", nonce));
            }
            localVarRequestOptions.Data = transferTokensMutationRequest1;

            localVarRequestOptions.Operation = "RefungibleApi.TransferTokensMutation";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (SeedAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<TransferTokensMutationDefaultResponse1>("/v1/refungible/tokens/transfer", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("TransferTokensMutation", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

    }
}
