/*
 * Unique SDK
 *
 * Unique SDK HTTP API  <b>Main connection to wss://ws-opal.unique.network (<a target=\"_blank\" href=\"https://polkadot.js.org/apps/?rpc=wss://ws-opal.unique.network\">apps ↗</a>)</b>  Secondary substrate connection to wss://ws-relay-bench.unique.network  (<a target=\"_blank\" href=\"https://polkadot.js.org/apps/?rpc=wss://ws-relay-bench.unique.network\">apps ↗</a>). Go to <a href=\"/relay/swagger\">/relay/swagger</a>  Consumable OpenAPI specification - (<a target=\"_blank\" href=\"/swagger-json\">JSON ↗</a>) (<a target=\"_blank\" href=\"/swagger-yaml\">YAML ↗</a>)
 *
 * The version of the OpenAPI document: 0.6.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Network.Unique.API.Client.OpenAPIDateConverter;

namespace Network.Unique.API.Model
{
    /// <summary>
    /// ApproveTokenBody
    /// </summary>
    [DataContract(Name = "ApproveTokenBody")]
    public partial class ApproveTokenBody : IEquatable<ApproveTokenBody>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ApproveTokenBody" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected ApproveTokenBody() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="ApproveTokenBody" /> class.
        /// </summary>
        /// <param name="address">The ss-58 encoded address (required).</param>
        /// <param name="spender">The ss-58 encoded address (required).</param>
        /// <param name="collectionId">collectionId (required).</param>
        /// <param name="tokenId">tokenId (required).</param>
        /// <param name="isApprove">isApprove (required).</param>
        public ApproveTokenBody(string address = default(string), string spender = default(string), decimal collectionId = default(decimal), decimal tokenId = default(decimal), bool isApprove = default(bool))
        {
            // to ensure "address" is required (not null)
            if (address == null)
            {
                throw new ArgumentNullException("address is a required property for ApproveTokenBody and cannot be null");
            }
            this.Address = address;
            // to ensure "spender" is required (not null)
            if (spender == null)
            {
                throw new ArgumentNullException("spender is a required property for ApproveTokenBody and cannot be null");
            }
            this.Spender = spender;
            this.CollectionId = collectionId;
            this.TokenId = tokenId;
            this.IsApprove = isApprove;
        }

        /// <summary>
        /// The ss-58 encoded address
        /// </summary>
        /// <value>The ss-58 encoded address</value>
        [DataMember(Name = "address", IsRequired = true, EmitDefaultValue = true)]
        public string Address { get; set; }

        /// <summary>
        /// The ss-58 encoded address
        /// </summary>
        /// <value>The ss-58 encoded address</value>
        [DataMember(Name = "spender", IsRequired = true, EmitDefaultValue = true)]
        public string Spender { get; set; }

        /// <summary>
        /// Gets or Sets CollectionId
        /// </summary>
        [DataMember(Name = "collectionId", IsRequired = true, EmitDefaultValue = true)]
        public decimal CollectionId { get; set; }

        /// <summary>
        /// Gets or Sets TokenId
        /// </summary>
        [DataMember(Name = "tokenId", IsRequired = true, EmitDefaultValue = true)]
        public decimal TokenId { get; set; }

        /// <summary>
        /// Gets or Sets IsApprove
        /// </summary>
        [DataMember(Name = "isApprove", IsRequired = true, EmitDefaultValue = true)]
        public bool IsApprove { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ApproveTokenBody {\n");
            sb.Append("  Address: ").Append(Address).Append("\n");
            sb.Append("  Spender: ").Append(Spender).Append("\n");
            sb.Append("  CollectionId: ").Append(CollectionId).Append("\n");
            sb.Append("  TokenId: ").Append(TokenId).Append("\n");
            sb.Append("  IsApprove: ").Append(IsApprove).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ApproveTokenBody);
        }

        /// <summary>
        /// Returns true if ApproveTokenBody instances are equal
        /// </summary>
        /// <param name="input">Instance of ApproveTokenBody to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ApproveTokenBody input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Address == input.Address ||
                    (this.Address != null &&
                    this.Address.Equals(input.Address))
                ) && 
                (
                    this.Spender == input.Spender ||
                    (this.Spender != null &&
                    this.Spender.Equals(input.Spender))
                ) && 
                (
                    this.CollectionId == input.CollectionId ||
                    this.CollectionId.Equals(input.CollectionId)
                ) && 
                (
                    this.TokenId == input.TokenId ||
                    this.TokenId.Equals(input.TokenId)
                ) && 
                (
                    this.IsApprove == input.IsApprove ||
                    this.IsApprove.Equals(input.IsApprove)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Address != null)
                {
                    hashCode = (hashCode * 59) + this.Address.GetHashCode();
                }
                if (this.Spender != null)
                {
                    hashCode = (hashCode * 59) + this.Spender.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.CollectionId.GetHashCode();
                hashCode = (hashCode * 59) + this.TokenId.GetHashCode();
                hashCode = (hashCode * 59) + this.IsApprove.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
