/*
 * Unique SDK
 *
 * Unique SDK HTTP API  <b>Main connection to wss://ws-opal.unique.network (<a target=\"_blank\" href=\"https://polkadot.js.org/apps/?rpc=wss://ws-opal.unique.network\">apps ↗</a>)</b>  Secondary substrate connection to wss://ws-relay-bench.unique.network  (<a target=\"_blank\" href=\"https://polkadot.js.org/apps/?rpc=wss://ws-relay-bench.unique.network\">apps ↗</a>). Go to <a href=\"/relay/swagger\">/relay/swagger</a>  Consumable OpenAPI specification - (<a target=\"_blank\" href=\"/swagger-json\">JSON ↗</a>) (<a target=\"_blank\" href=\"/swagger-yaml\">YAML ↗</a>)
 *
 * The version of the OpenAPI document: 0.6.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Network.Unique.API.Client.OpenAPIDateConverter;

namespace Network.Unique.API.Model
{
    /// <summary>
    /// UniqueTokenToCreateDto
    /// </summary>
    [DataContract(Name = "UniqueTokenToCreateDto")]
    public partial class UniqueTokenToCreateDto : IEquatable<UniqueTokenToCreateDto>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="UniqueTokenToCreateDto" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected UniqueTokenToCreateDto() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="UniqueTokenToCreateDto" /> class.
        /// </summary>
        /// <param name="image">image (required).</param>
        /// <param name="attributes">attributes.</param>
        /// <param name="encodedAttributes">encodedAttributes.</param>
        /// <param name="name">name.</param>
        /// <param name="audio">audio.</param>
        /// <param name="description">description.</param>
        /// <param name="imagePreview">imagePreview.</param>
        /// <param name="spatialObject">spatialObject.</param>
        /// <param name="video">video.</param>
        public UniqueTokenToCreateDto(UniqueTokenToCreateDtoImage image = default(UniqueTokenToCreateDtoImage), Dictionary<string, UniqueTokenToCreateDtoAttributesValue> attributes = default(Dictionary<string, UniqueTokenToCreateDtoAttributesValue>), Dictionary<string, UniqueTokenToCreateDtoEncodedAttributesValue> encodedAttributes = default(Dictionary<string, UniqueTokenToCreateDtoEncodedAttributesValue>), DecodedAttributeDtoName name = default(DecodedAttributeDtoName), UniqueTokenToCreateDtoImage audio = default(UniqueTokenToCreateDtoImage), DecodedAttributeDtoName description = default(DecodedAttributeDtoName), UniqueTokenToCreateDtoImage imagePreview = default(UniqueTokenToCreateDtoImage), UniqueTokenToCreateDtoImage spatialObject = default(UniqueTokenToCreateDtoImage), UniqueTokenToCreateDtoImage video = default(UniqueTokenToCreateDtoImage))
        {
            // to ensure "image" is required (not null)
            if (image == null)
            {
                throw new ArgumentNullException("image is a required property for UniqueTokenToCreateDto and cannot be null");
            }
            this.Image = image;
            this.Attributes = attributes;
            this.EncodedAttributes = encodedAttributes;
            this.Name = name;
            this.Audio = audio;
            this.Description = description;
            this.ImagePreview = imagePreview;
            this.SpatialObject = spatialObject;
            this.Video = video;
        }

        /// <summary>
        /// Gets or Sets Image
        /// </summary>
        [DataMember(Name = "image", IsRequired = true, EmitDefaultValue = true)]
        public UniqueTokenToCreateDtoImage Image { get; set; }

        /// <summary>
        /// Gets or Sets Attributes
        /// </summary>
        [DataMember(Name = "attributes", EmitDefaultValue = false)]
        public Dictionary<string, UniqueTokenToCreateDtoAttributesValue> Attributes { get; set; }

        /// <summary>
        /// Gets or Sets EncodedAttributes
        /// </summary>
        [DataMember(Name = "encodedAttributes", EmitDefaultValue = false)]
        public Dictionary<string, UniqueTokenToCreateDtoEncodedAttributesValue> EncodedAttributes { get; set; }

        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [DataMember(Name = "name", EmitDefaultValue = false)]
        public DecodedAttributeDtoName Name { get; set; }

        /// <summary>
        /// Gets or Sets Audio
        /// </summary>
        [DataMember(Name = "audio", EmitDefaultValue = false)]
        public UniqueTokenToCreateDtoImage Audio { get; set; }

        /// <summary>
        /// Gets or Sets Description
        /// </summary>
        [DataMember(Name = "description", EmitDefaultValue = false)]
        public DecodedAttributeDtoName Description { get; set; }

        /// <summary>
        /// Gets or Sets ImagePreview
        /// </summary>
        [DataMember(Name = "imagePreview", EmitDefaultValue = false)]
        public UniqueTokenToCreateDtoImage ImagePreview { get; set; }

        /// <summary>
        /// Gets or Sets SpatialObject
        /// </summary>
        [DataMember(Name = "spatialObject", EmitDefaultValue = false)]
        public UniqueTokenToCreateDtoImage SpatialObject { get; set; }

        /// <summary>
        /// Gets or Sets Video
        /// </summary>
        [DataMember(Name = "video", EmitDefaultValue = false)]
        public UniqueTokenToCreateDtoImage Video { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class UniqueTokenToCreateDto {\n");
            sb.Append("  Image: ").Append(Image).Append("\n");
            sb.Append("  Attributes: ").Append(Attributes).Append("\n");
            sb.Append("  EncodedAttributes: ").Append(EncodedAttributes).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Audio: ").Append(Audio).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  ImagePreview: ").Append(ImagePreview).Append("\n");
            sb.Append("  SpatialObject: ").Append(SpatialObject).Append("\n");
            sb.Append("  Video: ").Append(Video).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as UniqueTokenToCreateDto);
        }

        /// <summary>
        /// Returns true if UniqueTokenToCreateDto instances are equal
        /// </summary>
        /// <param name="input">Instance of UniqueTokenToCreateDto to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(UniqueTokenToCreateDto input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Image == input.Image ||
                    (this.Image != null &&
                    this.Image.Equals(input.Image))
                ) && 
                (
                    this.Attributes == input.Attributes ||
                    this.Attributes != null &&
                    input.Attributes != null &&
                    this.Attributes.SequenceEqual(input.Attributes)
                ) && 
                (
                    this.EncodedAttributes == input.EncodedAttributes ||
                    this.EncodedAttributes != null &&
                    input.EncodedAttributes != null &&
                    this.EncodedAttributes.SequenceEqual(input.EncodedAttributes)
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.Audio == input.Audio ||
                    (this.Audio != null &&
                    this.Audio.Equals(input.Audio))
                ) && 
                (
                    this.Description == input.Description ||
                    (this.Description != null &&
                    this.Description.Equals(input.Description))
                ) && 
                (
                    this.ImagePreview == input.ImagePreview ||
                    (this.ImagePreview != null &&
                    this.ImagePreview.Equals(input.ImagePreview))
                ) && 
                (
                    this.SpatialObject == input.SpatialObject ||
                    (this.SpatialObject != null &&
                    this.SpatialObject.Equals(input.SpatialObject))
                ) && 
                (
                    this.Video == input.Video ||
                    (this.Video != null &&
                    this.Video.Equals(input.Video))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Image != null)
                {
                    hashCode = (hashCode * 59) + this.Image.GetHashCode();
                }
                if (this.Attributes != null)
                {
                    hashCode = (hashCode * 59) + this.Attributes.GetHashCode();
                }
                if (this.EncodedAttributes != null)
                {
                    hashCode = (hashCode * 59) + this.EncodedAttributes.GetHashCode();
                }
                if (this.Name != null)
                {
                    hashCode = (hashCode * 59) + this.Name.GetHashCode();
                }
                if (this.Audio != null)
                {
                    hashCode = (hashCode * 59) + this.Audio.GetHashCode();
                }
                if (this.Description != null)
                {
                    hashCode = (hashCode * 59) + this.Description.GetHashCode();
                }
                if (this.ImagePreview != null)
                {
                    hashCode = (hashCode * 59) + this.ImagePreview.GetHashCode();
                }
                if (this.SpatialObject != null)
                {
                    hashCode = (hashCode * 59) + this.SpatialObject.GetHashCode();
                }
                if (this.Video != null)
                {
                    hashCode = (hashCode * 59) + this.Video.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
