/*
 * Unique SDK
 *
 * Unique SDK HTTP API  <b>Main connection to wss://ws-opal.unique.network (<a target=\"_blank\" href=\"https://polkadot.js.org/apps/?rpc=wss://ws-opal.unique.network\">apps ↗</a>)</b>  Secondary substrate connection to wss://ws-relay-bench.unique.network  (<a target=\"_blank\" href=\"https://polkadot.js.org/apps/?rpc=wss://ws-relay-bench.unique.network\">apps ↗</a>). Go to <a href=\"/relay/swagger\">/relay/swagger</a>  Consumable OpenAPI specification - (<a target=\"_blank\" href=\"/swagger-json\">JSON ↗</a>) (<a target=\"_blank\" href=\"/swagger-yaml\">YAML ↗</a>)
 *
 * The version of the OpenAPI document: 0.6.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Network.Unique.API.Client.OpenAPIDateConverter;

namespace Network.Unique.API.Model
{
    /// <summary>
    /// MutationQuery
    /// </summary>
    [DataContract(Name = "MutationQuery")]
    public partial class MutationQuery : IEquatable<MutationQuery>, IValidatableObject
    {
        /// <summary>
        /// Defines Use
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum UseEnum
        {
            /// <summary>
            /// Enum Build for value: Build
            /// </summary>
            [EnumMember(Value = "Build")]
            Build = 1,

            /// <summary>
            /// Enum BuildBatch for value: BuildBatch
            /// </summary>
            [EnumMember(Value = "BuildBatch")]
            BuildBatch = 2,

            /// <summary>
            /// Enum Sign for value: Sign
            /// </summary>
            [EnumMember(Value = "Sign")]
            Sign = 3,

            /// <summary>
            /// Enum Submit for value: Submit
            /// </summary>
            [EnumMember(Value = "Submit")]
            Submit = 4,

            /// <summary>
            /// Enum Result for value: Result
            /// </summary>
            [EnumMember(Value = "Result")]
            Result = 5,

            /// <summary>
            /// Enum GetFee for value: GetFee
            /// </summary>
            [EnumMember(Value = "GetFee")]
            GetFee = 6

        }


        /// <summary>
        /// Gets or Sets Use
        /// </summary>
        [DataMember(Name = "use", EmitDefaultValue = false)]
        public UseEnum? Use { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="MutationQuery" /> class.
        /// </summary>
        /// <param name="use">use.</param>
        /// <param name="withFee">withFee (default to false).</param>
        /// <param name="verify">verify (default to false).</param>
        /// <param name="callbackUrl">callbackUrl.</param>
        /// <param name="nonce">nonce.</param>
        public MutationQuery(UseEnum? use = default(UseEnum?), bool withFee = false, bool verify = false, string callbackUrl = default(string), decimal nonce = default(decimal))
        {
            this.Use = use;
            this.WithFee = withFee;
            this.Verify = verify;
            this.CallbackUrl = callbackUrl;
            this.Nonce = nonce;
        }

        /// <summary>
        /// Gets or Sets WithFee
        /// </summary>
        [DataMember(Name = "withFee", EmitDefaultValue = true)]
        [Obsolete]
        public bool WithFee { get; set; }

        /// <summary>
        /// Gets or Sets Verify
        /// </summary>
        [DataMember(Name = "verify", EmitDefaultValue = true)]
        public bool Verify { get; set; }

        /// <summary>
        /// Gets or Sets CallbackUrl
        /// </summary>
        [DataMember(Name = "callbackUrl", EmitDefaultValue = false)]
        public string CallbackUrl { get; set; }

        /// <summary>
        /// Gets or Sets Nonce
        /// </summary>
        [DataMember(Name = "nonce", EmitDefaultValue = false)]
        public decimal Nonce { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class MutationQuery {\n");
            sb.Append("  Use: ").Append(Use).Append("\n");
            sb.Append("  WithFee: ").Append(WithFee).Append("\n");
            sb.Append("  Verify: ").Append(Verify).Append("\n");
            sb.Append("  CallbackUrl: ").Append(CallbackUrl).Append("\n");
            sb.Append("  Nonce: ").Append(Nonce).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as MutationQuery);
        }

        /// <summary>
        /// Returns true if MutationQuery instances are equal
        /// </summary>
        /// <param name="input">Instance of MutationQuery to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(MutationQuery input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Use == input.Use ||
                    this.Use.Equals(input.Use)
                ) && 
                (
                    this.WithFee == input.WithFee ||
                    this.WithFee.Equals(input.WithFee)
                ) && 
                (
                    this.Verify == input.Verify ||
                    this.Verify.Equals(input.Verify)
                ) && 
                (
                    this.CallbackUrl == input.CallbackUrl ||
                    (this.CallbackUrl != null &&
                    this.CallbackUrl.Equals(input.CallbackUrl))
                ) && 
                (
                    this.Nonce == input.Nonce ||
                    this.Nonce.Equals(input.Nonce)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = (hashCode * 59) + this.Use.GetHashCode();
                hashCode = (hashCode * 59) + this.WithFee.GetHashCode();
                hashCode = (hashCode * 59) + this.Verify.GetHashCode();
                if (this.CallbackUrl != null)
                {
                    hashCode = (hashCode * 59) + this.CallbackUrl.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.Nonce.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
