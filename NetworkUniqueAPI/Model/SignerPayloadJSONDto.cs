/*
 * Unique SDK
 *
 * Unique SDK HTTP API  <b>Main connection to wss://ws-opal.unique.network (<a target=\"_blank\" href=\"https://polkadot.js.org/apps/?rpc=wss://ws-opal.unique.network\">apps ↗</a>)</b>  Secondary substrate connection to wss://ws-relay-bench.unique.network  (<a target=\"_blank\" href=\"https://polkadot.js.org/apps/?rpc=wss://ws-relay-bench.unique.network\">apps ↗</a>). Go to <a href=\"/relay/swagger\">/relay/swagger</a>  Consumable OpenAPI specification - (<a target=\"_blank\" href=\"/swagger-json\">JSON ↗</a>) (<a target=\"_blank\" href=\"/swagger-yaml\">YAML ↗</a>)
 *
 * The version of the OpenAPI document: 0.6.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Network.Unique.API.Client.OpenAPIDateConverter;

namespace Network.Unique.API.Model
{
    /// <summary>
    /// SignerPayloadJSONDto
    /// </summary>
    [DataContract(Name = "SignerPayloadJSONDto")]
    public partial class SignerPayloadJSONDto : IEquatable<SignerPayloadJSONDto>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="SignerPayloadJSONDto" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected SignerPayloadJSONDto() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="SignerPayloadJSONDto" /> class.
        /// </summary>
        /// <param name="address">The ss-58 encoded address (required).</param>
        /// <param name="blockHash">The checkpoint hash of the block, in hex (required).</param>
        /// <param name="blockNumber">The checkpoint block number, in hex (required).</param>
        /// <param name="era">The era for this transaction, in hex (required).</param>
        /// <param name="genesisHash">The genesis hash of the chain, in hex (required).</param>
        /// <param name="method">The encoded method (with arguments) in hex (required).</param>
        /// <param name="nonce">The nonce for this transaction, in hex (required).</param>
        /// <param name="specVersion">The current spec version for the runtime (required).</param>
        /// <param name="tip">The tip for this transaction, in hex (required).</param>
        /// <param name="transactionVersion">The current transaction version for the runtime (required).</param>
        /// <param name="signedExtensions">The applicable signed extensions for this runtime (required).</param>
        /// <param name="version">The version of the extrinsic we are dealing with (required).</param>
        public SignerPayloadJSONDto(string address = default(string), string blockHash = default(string), string blockNumber = default(string), string era = default(string), string genesisHash = default(string), string method = default(string), string nonce = default(string), string specVersion = default(string), string tip = default(string), string transactionVersion = default(string), List<string> signedExtensions = default(List<string>), decimal version = default(decimal))
        {
            // to ensure "address" is required (not null)
            if (address == null)
            {
                throw new ArgumentNullException("address is a required property for SignerPayloadJSONDto and cannot be null");
            }
            this.Address = address;
            // to ensure "blockHash" is required (not null)
            if (blockHash == null)
            {
                throw new ArgumentNullException("blockHash is a required property for SignerPayloadJSONDto and cannot be null");
            }
            this.BlockHash = blockHash;
            // to ensure "blockNumber" is required (not null)
            if (blockNumber == null)
            {
                throw new ArgumentNullException("blockNumber is a required property for SignerPayloadJSONDto and cannot be null");
            }
            this.BlockNumber = blockNumber;
            // to ensure "era" is required (not null)
            if (era == null)
            {
                throw new ArgumentNullException("era is a required property for SignerPayloadJSONDto and cannot be null");
            }
            this.Era = era;
            // to ensure "genesisHash" is required (not null)
            if (genesisHash == null)
            {
                throw new ArgumentNullException("genesisHash is a required property for SignerPayloadJSONDto and cannot be null");
            }
            this.GenesisHash = genesisHash;
            // to ensure "method" is required (not null)
            if (method == null)
            {
                throw new ArgumentNullException("method is a required property for SignerPayloadJSONDto and cannot be null");
            }
            this.Method = method;
            // to ensure "nonce" is required (not null)
            if (nonce == null)
            {
                throw new ArgumentNullException("nonce is a required property for SignerPayloadJSONDto and cannot be null");
            }
            this.Nonce = nonce;
            // to ensure "specVersion" is required (not null)
            if (specVersion == null)
            {
                throw new ArgumentNullException("specVersion is a required property for SignerPayloadJSONDto and cannot be null");
            }
            this.SpecVersion = specVersion;
            // to ensure "tip" is required (not null)
            if (tip == null)
            {
                throw new ArgumentNullException("tip is a required property for SignerPayloadJSONDto and cannot be null");
            }
            this.Tip = tip;
            // to ensure "transactionVersion" is required (not null)
            if (transactionVersion == null)
            {
                throw new ArgumentNullException("transactionVersion is a required property for SignerPayloadJSONDto and cannot be null");
            }
            this.TransactionVersion = transactionVersion;
            // to ensure "signedExtensions" is required (not null)
            if (signedExtensions == null)
            {
                throw new ArgumentNullException("signedExtensions is a required property for SignerPayloadJSONDto and cannot be null");
            }
            this.SignedExtensions = signedExtensions;
            this._Version = version;
        }

        /// <summary>
        /// The ss-58 encoded address
        /// </summary>
        /// <value>The ss-58 encoded address</value>
        [DataMember(Name = "address", IsRequired = true, EmitDefaultValue = true)]
        public string Address { get; set; }

        /// <summary>
        /// The checkpoint hash of the block, in hex
        /// </summary>
        /// <value>The checkpoint hash of the block, in hex</value>
        [DataMember(Name = "blockHash", IsRequired = true, EmitDefaultValue = true)]
        public string BlockHash { get; set; }

        /// <summary>
        /// The checkpoint block number, in hex
        /// </summary>
        /// <value>The checkpoint block number, in hex</value>
        [DataMember(Name = "blockNumber", IsRequired = true, EmitDefaultValue = true)]
        public string BlockNumber { get; set; }

        /// <summary>
        /// The era for this transaction, in hex
        /// </summary>
        /// <value>The era for this transaction, in hex</value>
        [DataMember(Name = "era", IsRequired = true, EmitDefaultValue = true)]
        public string Era { get; set; }

        /// <summary>
        /// The genesis hash of the chain, in hex
        /// </summary>
        /// <value>The genesis hash of the chain, in hex</value>
        [DataMember(Name = "genesisHash", IsRequired = true, EmitDefaultValue = true)]
        public string GenesisHash { get; set; }

        /// <summary>
        /// The encoded method (with arguments) in hex
        /// </summary>
        /// <value>The encoded method (with arguments) in hex</value>
        [DataMember(Name = "method", IsRequired = true, EmitDefaultValue = true)]
        public string Method { get; set; }

        /// <summary>
        /// The nonce for this transaction, in hex
        /// </summary>
        /// <value>The nonce for this transaction, in hex</value>
        [DataMember(Name = "nonce", IsRequired = true, EmitDefaultValue = true)]
        public string Nonce { get; set; }

        /// <summary>
        /// The current spec version for the runtime
        /// </summary>
        /// <value>The current spec version for the runtime</value>
        [DataMember(Name = "specVersion", IsRequired = true, EmitDefaultValue = true)]
        public string SpecVersion { get; set; }

        /// <summary>
        /// The tip for this transaction, in hex
        /// </summary>
        /// <value>The tip for this transaction, in hex</value>
        [DataMember(Name = "tip", IsRequired = true, EmitDefaultValue = true)]
        public string Tip { get; set; }

        /// <summary>
        /// The current transaction version for the runtime
        /// </summary>
        /// <value>The current transaction version for the runtime</value>
        [DataMember(Name = "transactionVersion", IsRequired = true, EmitDefaultValue = true)]
        public string TransactionVersion { get; set; }

        /// <summary>
        /// The applicable signed extensions for this runtime
        /// </summary>
        /// <value>The applicable signed extensions for this runtime</value>
        [DataMember(Name = "signedExtensions", IsRequired = true, EmitDefaultValue = true)]
        public List<string> SignedExtensions { get; set; }

        /// <summary>
        /// The version of the extrinsic we are dealing with
        /// </summary>
        /// <value>The version of the extrinsic we are dealing with</value>
        [DataMember(Name = "version", IsRequired = true, EmitDefaultValue = true)]
        public decimal _Version { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class SignerPayloadJSONDto {\n");
            sb.Append("  Address: ").Append(Address).Append("\n");
            sb.Append("  BlockHash: ").Append(BlockHash).Append("\n");
            sb.Append("  BlockNumber: ").Append(BlockNumber).Append("\n");
            sb.Append("  Era: ").Append(Era).Append("\n");
            sb.Append("  GenesisHash: ").Append(GenesisHash).Append("\n");
            sb.Append("  Method: ").Append(Method).Append("\n");
            sb.Append("  Nonce: ").Append(Nonce).Append("\n");
            sb.Append("  SpecVersion: ").Append(SpecVersion).Append("\n");
            sb.Append("  Tip: ").Append(Tip).Append("\n");
            sb.Append("  TransactionVersion: ").Append(TransactionVersion).Append("\n");
            sb.Append("  SignedExtensions: ").Append(SignedExtensions).Append("\n");
            sb.Append("  _Version: ").Append(_Version).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as SignerPayloadJSONDto);
        }

        /// <summary>
        /// Returns true if SignerPayloadJSONDto instances are equal
        /// </summary>
        /// <param name="input">Instance of SignerPayloadJSONDto to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(SignerPayloadJSONDto input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Address == input.Address ||
                    (this.Address != null &&
                    this.Address.Equals(input.Address))
                ) && 
                (
                    this.BlockHash == input.BlockHash ||
                    (this.BlockHash != null &&
                    this.BlockHash.Equals(input.BlockHash))
                ) && 
                (
                    this.BlockNumber == input.BlockNumber ||
                    (this.BlockNumber != null &&
                    this.BlockNumber.Equals(input.BlockNumber))
                ) && 
                (
                    this.Era == input.Era ||
                    (this.Era != null &&
                    this.Era.Equals(input.Era))
                ) && 
                (
                    this.GenesisHash == input.GenesisHash ||
                    (this.GenesisHash != null &&
                    this.GenesisHash.Equals(input.GenesisHash))
                ) && 
                (
                    this.Method == input.Method ||
                    (this.Method != null &&
                    this.Method.Equals(input.Method))
                ) && 
                (
                    this.Nonce == input.Nonce ||
                    (this.Nonce != null &&
                    this.Nonce.Equals(input.Nonce))
                ) && 
                (
                    this.SpecVersion == input.SpecVersion ||
                    (this.SpecVersion != null &&
                    this.SpecVersion.Equals(input.SpecVersion))
                ) && 
                (
                    this.Tip == input.Tip ||
                    (this.Tip != null &&
                    this.Tip.Equals(input.Tip))
                ) && 
                (
                    this.TransactionVersion == input.TransactionVersion ||
                    (this.TransactionVersion != null &&
                    this.TransactionVersion.Equals(input.TransactionVersion))
                ) && 
                (
                    this.SignedExtensions == input.SignedExtensions ||
                    this.SignedExtensions != null &&
                    input.SignedExtensions != null &&
                    this.SignedExtensions.SequenceEqual(input.SignedExtensions)
                ) && 
                (
                    this._Version == input._Version ||
                    this._Version.Equals(input._Version)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Address != null)
                {
                    hashCode = (hashCode * 59) + this.Address.GetHashCode();
                }
                if (this.BlockHash != null)
                {
                    hashCode = (hashCode * 59) + this.BlockHash.GetHashCode();
                }
                if (this.BlockNumber != null)
                {
                    hashCode = (hashCode * 59) + this.BlockNumber.GetHashCode();
                }
                if (this.Era != null)
                {
                    hashCode = (hashCode * 59) + this.Era.GetHashCode();
                }
                if (this.GenesisHash != null)
                {
                    hashCode = (hashCode * 59) + this.GenesisHash.GetHashCode();
                }
                if (this.Method != null)
                {
                    hashCode = (hashCode * 59) + this.Method.GetHashCode();
                }
                if (this.Nonce != null)
                {
                    hashCode = (hashCode * 59) + this.Nonce.GetHashCode();
                }
                if (this.SpecVersion != null)
                {
                    hashCode = (hashCode * 59) + this.SpecVersion.GetHashCode();
                }
                if (this.Tip != null)
                {
                    hashCode = (hashCode * 59) + this.Tip.GetHashCode();
                }
                if (this.TransactionVersion != null)
                {
                    hashCode = (hashCode * 59) + this.TransactionVersion.GetHashCode();
                }
                if (this.SignedExtensions != null)
                {
                    hashCode = (hashCode * 59) + this.SignedExtensions.GetHashCode();
                }
                hashCode = (hashCode * 59) + this._Version.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
