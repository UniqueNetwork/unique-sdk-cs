/*
 * Unique SDK
 *
 * Unique SDK HTTP API  <b>Main connection to wss://ws-opal.unique.network (<a target=\"_blank\" href=\"https://polkadot.js.org/apps/?rpc=wss://ws-opal.unique.network\">apps ↗</a>)</b>  Secondary substrate connection to wss://ws-relay-bench.unique.network  (<a target=\"_blank\" href=\"https://polkadot.js.org/apps/?rpc=wss://ws-relay-bench.unique.network\">apps ↗</a>). Go to <a href=\"/relay/swagger\">/relay/swagger</a>  Consumable OpenAPI specification - (<a target=\"_blank\" href=\"/swagger-json\">JSON ↗</a>) (<a target=\"_blank\" href=\"/swagger-yaml\">YAML ↗</a>)
 *
 * The version of the OpenAPI document: 0.6.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Network.Unique.API.Client.OpenAPIDateConverter;

namespace Network.Unique.API.Model
{
    /// <summary>
    /// CollectionPermissionsDto
    /// </summary>
    [DataContract(Name = "CollectionPermissionsDto")]
    public partial class CollectionPermissionsDto : IEquatable<CollectionPermissionsDto>, IValidatableObject
    {
        /// <summary>
        /// Defines Access
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum AccessEnum
        {
            /// <summary>
            /// Enum Normal for value: Normal
            /// </summary>
            [EnumMember(Value = "Normal")]
            Normal = 1,

            /// <summary>
            /// Enum AllowList for value: AllowList
            /// </summary>
            [EnumMember(Value = "AllowList")]
            AllowList = 2

        }


        /// <summary>
        /// Gets or Sets Access
        /// </summary>
        [DataMember(Name = "access", EmitDefaultValue = false)]
        public AccessEnum? Access { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="CollectionPermissionsDto" /> class.
        /// </summary>
        /// <param name="access">access.</param>
        /// <param name="mintMode">mintMode.</param>
        /// <param name="nesting">nesting.</param>
        public CollectionPermissionsDto(AccessEnum? access = default(AccessEnum?), bool mintMode = default(bool), CollectionNestingPermissionsDto nesting = default(CollectionNestingPermissionsDto))
        {
            this.Access = access;
            this.MintMode = mintMode;
            this.Nesting = nesting;
        }

        /// <summary>
        /// Gets or Sets MintMode
        /// </summary>
        [DataMember(Name = "mintMode", EmitDefaultValue = true)]
        public bool MintMode { get; set; }

        /// <summary>
        /// Gets or Sets Nesting
        /// </summary>
        [DataMember(Name = "nesting", EmitDefaultValue = false)]
        public CollectionNestingPermissionsDto Nesting { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class CollectionPermissionsDto {\n");
            sb.Append("  Access: ").Append(Access).Append("\n");
            sb.Append("  MintMode: ").Append(MintMode).Append("\n");
            sb.Append("  Nesting: ").Append(Nesting).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as CollectionPermissionsDto);
        }

        /// <summary>
        /// Returns true if CollectionPermissionsDto instances are equal
        /// </summary>
        /// <param name="input">Instance of CollectionPermissionsDto to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CollectionPermissionsDto input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Access == input.Access ||
                    this.Access.Equals(input.Access)
                ) && 
                (
                    this.MintMode == input.MintMode ||
                    this.MintMode.Equals(input.MintMode)
                ) && 
                (
                    this.Nesting == input.Nesting ||
                    (this.Nesting != null &&
                    this.Nesting.Equals(input.Nesting))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = (hashCode * 59) + this.Access.GetHashCode();
                hashCode = (hashCode * 59) + this.MintMode.GetHashCode();
                if (this.Nesting != null)
                {
                    hashCode = (hashCode * 59) + this.Nesting.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
