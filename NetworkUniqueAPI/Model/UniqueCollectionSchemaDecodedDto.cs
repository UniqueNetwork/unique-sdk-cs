/*
 * Unique SDK
 *
 * Unique SDK HTTP API  <b>Main connection to wss://ws-opal.unique.network (<a target=\"_blank\" href=\"https://polkadot.js.org/apps/?rpc=wss://ws-opal.unique.network\">apps ↗</a>)</b>  Secondary substrate connection to wss://ws-relay-bench.unique.network  (<a target=\"_blank\" href=\"https://polkadot.js.org/apps/?rpc=wss://ws-relay-bench.unique.network\">apps ↗</a>). Go to <a href=\"/relay/swagger\">/relay/swagger</a>  Consumable OpenAPI specification - (<a target=\"_blank\" href=\"/swagger-json\">JSON ↗</a>) (<a target=\"_blank\" href=\"/swagger-yaml\">YAML ↗</a>)
 *
 * The version of the OpenAPI document: 0.6.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Network.Unique.API.Client.OpenAPIDateConverter;

namespace Network.Unique.API.Model
{
    /// <summary>
    /// UniqueCollectionSchemaDecodedDto
    /// </summary>
    [DataContract(Name = "UniqueCollectionSchemaDecodedDto")]
    public partial class UniqueCollectionSchemaDecodedDto : IEquatable<UniqueCollectionSchemaDecodedDto>, IValidatableObject
    {
        /// <summary>
        /// Defines SchemaName
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum SchemaNameEnum
        {
            /// <summary>
            /// Enum Unique for value: unique
            /// </summary>
            [EnumMember(Value = "unique")]
            Unique = 1,

            /// <summary>
            /// Enum Old for value: _old_
            /// </summary>
            [EnumMember(Value = "_old_")]
            Old = 2,

            /// <summary>
            /// Enum ERC721Metadata for value: ERC721Metadata
            /// </summary>
            [EnumMember(Value = "ERC721Metadata")]
            ERC721Metadata = 3

        }


        /// <summary>
        /// Gets or Sets SchemaName
        /// </summary>
        [DataMember(Name = "schemaName", IsRequired = true, EmitDefaultValue = true)]
        public SchemaNameEnum SchemaName { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="UniqueCollectionSchemaDecodedDto" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected UniqueCollectionSchemaDecodedDto() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="UniqueCollectionSchemaDecodedDto" /> class.
        /// </summary>
        /// <param name="attributesSchema">attributesSchema.</param>
        /// <param name="attributesSchemaVersion">attributesSchemaVersion.</param>
        /// <param name="collectionId">collectionId (required).</param>
        /// <param name="coverPicture">coverPicture (required).</param>
        /// <param name="image">image (required).</param>
        /// <param name="schemaName">schemaName (required).</param>
        /// <param name="schemaVersion">schemaVersion (required).</param>
        /// <param name="oldProperties">oldProperties (required).</param>
        /// <param name="coverPicturePreview">coverPicturePreview.</param>
        /// <param name="imagePreview">imagePreview.</param>
        /// <param name="audio">audio (required).</param>
        /// <param name="spatialObject">spatialObject (required).</param>
        /// <param name="video">video (required).</param>
        public UniqueCollectionSchemaDecodedDto(Dictionary<string, AttributeSchemaDto> attributesSchema = default(Dictionary<string, AttributeSchemaDto>), string attributesSchemaVersion = default(string), decimal collectionId = default(decimal), UniqueCollectionSchemaDecodedDtoCoverPicture coverPicture = default(UniqueCollectionSchemaDecodedDtoCoverPicture), ImageDto image = default(ImageDto), SchemaNameEnum schemaName = default(SchemaNameEnum), string schemaVersion = default(string), OldPropertiesDto oldProperties = default(OldPropertiesDto), UniqueCollectionSchemaDecodedDtoCoverPicture coverPicturePreview = default(UniqueCollectionSchemaDecodedDtoCoverPicture), ImagePreviewDto imagePreview = default(ImagePreviewDto), AudioDto audio = default(AudioDto), SpatialObjectDto spatialObject = default(SpatialObjectDto), VideoDto video = default(VideoDto))
        {
            this.CollectionId = collectionId;
            // to ensure "coverPicture" is required (not null)
            if (coverPicture == null)
            {
                throw new ArgumentNullException("coverPicture is a required property for UniqueCollectionSchemaDecodedDto and cannot be null");
            }
            this.CoverPicture = coverPicture;
            // to ensure "image" is required (not null)
            if (image == null)
            {
                throw new ArgumentNullException("image is a required property for UniqueCollectionSchemaDecodedDto and cannot be null");
            }
            this.Image = image;
            this.SchemaName = schemaName;
            // to ensure "schemaVersion" is required (not null)
            if (schemaVersion == null)
            {
                throw new ArgumentNullException("schemaVersion is a required property for UniqueCollectionSchemaDecodedDto and cannot be null");
            }
            this.SchemaVersion = schemaVersion;
            // to ensure "oldProperties" is required (not null)
            if (oldProperties == null)
            {
                throw new ArgumentNullException("oldProperties is a required property for UniqueCollectionSchemaDecodedDto and cannot be null");
            }
            this.OldProperties = oldProperties;
            // to ensure "audio" is required (not null)
            if (audio == null)
            {
                throw new ArgumentNullException("audio is a required property for UniqueCollectionSchemaDecodedDto and cannot be null");
            }
            this.Audio = audio;
            // to ensure "spatialObject" is required (not null)
            if (spatialObject == null)
            {
                throw new ArgumentNullException("spatialObject is a required property for UniqueCollectionSchemaDecodedDto and cannot be null");
            }
            this.SpatialObject = spatialObject;
            // to ensure "video" is required (not null)
            if (video == null)
            {
                throw new ArgumentNullException("video is a required property for UniqueCollectionSchemaDecodedDto and cannot be null");
            }
            this.Video = video;
            this.AttributesSchema = attributesSchema;
            this.AttributesSchemaVersion = attributesSchemaVersion;
            this.CoverPicturePreview = coverPicturePreview;
            this.ImagePreview = imagePreview;
        }

        /// <summary>
        /// Gets or Sets AttributesSchema
        /// </summary>
        [DataMember(Name = "attributesSchema", EmitDefaultValue = false)]
        public Dictionary<string, AttributeSchemaDto> AttributesSchema { get; set; }

        /// <summary>
        /// Gets or Sets AttributesSchemaVersion
        /// </summary>
        [DataMember(Name = "attributesSchemaVersion", EmitDefaultValue = false)]
        public string AttributesSchemaVersion { get; set; }

        /// <summary>
        /// Gets or Sets CollectionId
        /// </summary>
        [DataMember(Name = "collectionId", IsRequired = true, EmitDefaultValue = true)]
        public decimal CollectionId { get; set; }

        /// <summary>
        /// Gets or Sets CoverPicture
        /// </summary>
        [DataMember(Name = "coverPicture", IsRequired = true, EmitDefaultValue = true)]
        public UniqueCollectionSchemaDecodedDtoCoverPicture CoverPicture { get; set; }

        /// <summary>
        /// Gets or Sets Image
        /// </summary>
        [DataMember(Name = "image", IsRequired = true, EmitDefaultValue = true)]
        public ImageDto Image { get; set; }

        /// <summary>
        /// Gets or Sets SchemaVersion
        /// </summary>
        [DataMember(Name = "schemaVersion", IsRequired = true, EmitDefaultValue = true)]
        public string SchemaVersion { get; set; }

        /// <summary>
        /// Gets or Sets OldProperties
        /// </summary>
        [DataMember(Name = "oldProperties", IsRequired = true, EmitDefaultValue = true)]
        public OldPropertiesDto OldProperties { get; set; }

        /// <summary>
        /// Gets or Sets CoverPicturePreview
        /// </summary>
        [DataMember(Name = "coverPicturePreview", EmitDefaultValue = false)]
        public UniqueCollectionSchemaDecodedDtoCoverPicture CoverPicturePreview { get; set; }

        /// <summary>
        /// Gets or Sets ImagePreview
        /// </summary>
        [DataMember(Name = "imagePreview", EmitDefaultValue = false)]
        public ImagePreviewDto ImagePreview { get; set; }

        /// <summary>
        /// Gets or Sets Audio
        /// </summary>
        [DataMember(Name = "audio", IsRequired = true, EmitDefaultValue = true)]
        public AudioDto Audio { get; set; }

        /// <summary>
        /// Gets or Sets SpatialObject
        /// </summary>
        [DataMember(Name = "spatialObject", IsRequired = true, EmitDefaultValue = true)]
        public SpatialObjectDto SpatialObject { get; set; }

        /// <summary>
        /// Gets or Sets Video
        /// </summary>
        [DataMember(Name = "video", IsRequired = true, EmitDefaultValue = true)]
        public VideoDto Video { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class UniqueCollectionSchemaDecodedDto {\n");
            sb.Append("  AttributesSchema: ").Append(AttributesSchema).Append("\n");
            sb.Append("  AttributesSchemaVersion: ").Append(AttributesSchemaVersion).Append("\n");
            sb.Append("  CollectionId: ").Append(CollectionId).Append("\n");
            sb.Append("  CoverPicture: ").Append(CoverPicture).Append("\n");
            sb.Append("  Image: ").Append(Image).Append("\n");
            sb.Append("  SchemaName: ").Append(SchemaName).Append("\n");
            sb.Append("  SchemaVersion: ").Append(SchemaVersion).Append("\n");
            sb.Append("  OldProperties: ").Append(OldProperties).Append("\n");
            sb.Append("  CoverPicturePreview: ").Append(CoverPicturePreview).Append("\n");
            sb.Append("  ImagePreview: ").Append(ImagePreview).Append("\n");
            sb.Append("  Audio: ").Append(Audio).Append("\n");
            sb.Append("  SpatialObject: ").Append(SpatialObject).Append("\n");
            sb.Append("  Video: ").Append(Video).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as UniqueCollectionSchemaDecodedDto);
        }

        /// <summary>
        /// Returns true if UniqueCollectionSchemaDecodedDto instances are equal
        /// </summary>
        /// <param name="input">Instance of UniqueCollectionSchemaDecodedDto to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(UniqueCollectionSchemaDecodedDto input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.AttributesSchema == input.AttributesSchema ||
                    this.AttributesSchema != null &&
                    input.AttributesSchema != null &&
                    this.AttributesSchema.SequenceEqual(input.AttributesSchema)
                ) && 
                (
                    this.AttributesSchemaVersion == input.AttributesSchemaVersion ||
                    (this.AttributesSchemaVersion != null &&
                    this.AttributesSchemaVersion.Equals(input.AttributesSchemaVersion))
                ) && 
                (
                    this.CollectionId == input.CollectionId ||
                    this.CollectionId.Equals(input.CollectionId)
                ) && 
                (
                    this.CoverPicture == input.CoverPicture ||
                    (this.CoverPicture != null &&
                    this.CoverPicture.Equals(input.CoverPicture))
                ) && 
                (
                    this.Image == input.Image ||
                    (this.Image != null &&
                    this.Image.Equals(input.Image))
                ) && 
                (
                    this.SchemaName == input.SchemaName ||
                    this.SchemaName.Equals(input.SchemaName)
                ) && 
                (
                    this.SchemaVersion == input.SchemaVersion ||
                    (this.SchemaVersion != null &&
                    this.SchemaVersion.Equals(input.SchemaVersion))
                ) && 
                (
                    this.OldProperties == input.OldProperties ||
                    (this.OldProperties != null &&
                    this.OldProperties.Equals(input.OldProperties))
                ) && 
                (
                    this.CoverPicturePreview == input.CoverPicturePreview ||
                    (this.CoverPicturePreview != null &&
                    this.CoverPicturePreview.Equals(input.CoverPicturePreview))
                ) && 
                (
                    this.ImagePreview == input.ImagePreview ||
                    (this.ImagePreview != null &&
                    this.ImagePreview.Equals(input.ImagePreview))
                ) && 
                (
                    this.Audio == input.Audio ||
                    (this.Audio != null &&
                    this.Audio.Equals(input.Audio))
                ) && 
                (
                    this.SpatialObject == input.SpatialObject ||
                    (this.SpatialObject != null &&
                    this.SpatialObject.Equals(input.SpatialObject))
                ) && 
                (
                    this.Video == input.Video ||
                    (this.Video != null &&
                    this.Video.Equals(input.Video))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.AttributesSchema != null)
                {
                    hashCode = (hashCode * 59) + this.AttributesSchema.GetHashCode();
                }
                if (this.AttributesSchemaVersion != null)
                {
                    hashCode = (hashCode * 59) + this.AttributesSchemaVersion.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.CollectionId.GetHashCode();
                if (this.CoverPicture != null)
                {
                    hashCode = (hashCode * 59) + this.CoverPicture.GetHashCode();
                }
                if (this.Image != null)
                {
                    hashCode = (hashCode * 59) + this.Image.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.SchemaName.GetHashCode();
                if (this.SchemaVersion != null)
                {
                    hashCode = (hashCode * 59) + this.SchemaVersion.GetHashCode();
                }
                if (this.OldProperties != null)
                {
                    hashCode = (hashCode * 59) + this.OldProperties.GetHashCode();
                }
                if (this.CoverPicturePreview != null)
                {
                    hashCode = (hashCode * 59) + this.CoverPicturePreview.GetHashCode();
                }
                if (this.ImagePreview != null)
                {
                    hashCode = (hashCode * 59) + this.ImagePreview.GetHashCode();
                }
                if (this.Audio != null)
                {
                    hashCode = (hashCode * 59) + this.Audio.GetHashCode();
                }
                if (this.SpatialObject != null)
                {
                    hashCode = (hashCode * 59) + this.SpatialObject.GetHashCode();
                }
                if (this.Video != null)
                {
                    hashCode = (hashCode * 59) + this.Video.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
