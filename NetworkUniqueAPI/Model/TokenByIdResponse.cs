/*
 * Unique SDK
 *
 * Unique SDK HTTP API  <b>Main connection to wss://ws-opal.unique.network (<a target=\"_blank\" href=\"https://polkadot.js.org/apps/?rpc=wss://ws-opal.unique.network\">apps ↗</a>)</b>  Secondary substrate connection to wss://ws-relay-bench.unique.network  (<a target=\"_blank\" href=\"https://polkadot.js.org/apps/?rpc=wss://ws-relay-bench.unique.network\">apps ↗</a>). Go to <a href=\"/relay/swagger\">/relay/swagger</a>  Consumable OpenAPI specification - (<a target=\"_blank\" href=\"/swagger-json\">JSON ↗</a>) (<a target=\"_blank\" href=\"/swagger-yaml\">YAML ↗</a>)
 *
 * The version of the OpenAPI document: 0.6.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Network.Unique.API.Client.OpenAPIDateConverter;

namespace Network.Unique.API.Model
{
    /// <summary>
    /// TokenByIdResponse
    /// </summary>
    [DataContract(Name = "TokenByIdResponse")]
    public partial class TokenByIdResponse : IEquatable<TokenByIdResponse>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="TokenByIdResponse" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected TokenByIdResponse() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="TokenByIdResponse" /> class.
        /// </summary>
        /// <param name="attributes">attributes (required).</param>
        /// <param name="collectionId">collectionId (required).</param>
        /// <param name="image">image (required).</param>
        /// <param name="owner">The ss-58 encoded address (required).</param>
        /// <param name="tokenId">tokenId (required).</param>
        /// <param name="audio">audio.</param>
        /// <param name="description">description.</param>
        /// <param name="name">name.</param>
        /// <param name="imagePreview">imagePreview.</param>
        /// <param name="nestingParentToken">nestingParentToken (required).</param>
        /// <param name="spatialObject">spatialObject.</param>
        /// <param name="video">video.</param>
        /// <param name="properties">properties (required).</param>
        /// <param name="collection">collection (required).</param>
        public TokenByIdResponse(List<DecodedAttributeDto> attributes = default(List<DecodedAttributeDto>), decimal collectionId = default(decimal), UniqueCollectionSchemaDecodedDtoCoverPicture image = default(UniqueCollectionSchemaDecodedDtoCoverPicture), string owner = default(string), decimal tokenId = default(decimal), UniqueCollectionSchemaDecodedDtoCoverPicture audio = default(UniqueCollectionSchemaDecodedDtoCoverPicture), DecodedAttributeDtoName description = default(DecodedAttributeDtoName), DecodedAttributeDtoName name = default(DecodedAttributeDtoName), UniqueCollectionSchemaDecodedDtoCoverPicture imagePreview = default(UniqueCollectionSchemaDecodedDtoCoverPicture), NestingParentId nestingParentToken = default(NestingParentId), UniqueCollectionSchemaDecodedDtoCoverPicture spatialObject = default(UniqueCollectionSchemaDecodedDtoCoverPicture), UniqueCollectionSchemaDecodedDtoCoverPicture video = default(UniqueCollectionSchemaDecodedDtoCoverPicture), List<TokenProperty> properties = default(List<TokenProperty>), CollectionInfoWithSchemaResponse collection = default(CollectionInfoWithSchemaResponse))
        {
            // to ensure "attributes" is required (not null)
            if (attributes == null)
            {
                throw new ArgumentNullException("attributes is a required property for TokenByIdResponse and cannot be null");
            }
            this.Attributes = attributes;
            this.CollectionId = collectionId;
            // to ensure "image" is required (not null)
            if (image == null)
            {
                throw new ArgumentNullException("image is a required property for TokenByIdResponse and cannot be null");
            }
            this.Image = image;
            // to ensure "owner" is required (not null)
            if (owner == null)
            {
                throw new ArgumentNullException("owner is a required property for TokenByIdResponse and cannot be null");
            }
            this.Owner = owner;
            this.TokenId = tokenId;
            // to ensure "nestingParentToken" is required (not null)
            if (nestingParentToken == null)
            {
                throw new ArgumentNullException("nestingParentToken is a required property for TokenByIdResponse and cannot be null");
            }
            this.NestingParentToken = nestingParentToken;
            // to ensure "properties" is required (not null)
            if (properties == null)
            {
                throw new ArgumentNullException("properties is a required property for TokenByIdResponse and cannot be null");
            }
            this.Properties = properties;
            // to ensure "collection" is required (not null)
            if (collection == null)
            {
                throw new ArgumentNullException("collection is a required property for TokenByIdResponse and cannot be null");
            }
            this.Collection = collection;
            this.Audio = audio;
            this.Description = description;
            this.Name = name;
            this.ImagePreview = imagePreview;
            this.SpatialObject = spatialObject;
            this.Video = video;
        }

        /// <summary>
        /// Gets or Sets Attributes
        /// </summary>
        [DataMember(Name = "attributes", IsRequired = true, EmitDefaultValue = true)]
        public List<DecodedAttributeDto> Attributes { get; set; }

        /// <summary>
        /// Gets or Sets CollectionId
        /// </summary>
        [DataMember(Name = "collectionId", IsRequired = true, EmitDefaultValue = true)]
        public decimal CollectionId { get; set; }

        /// <summary>
        /// Gets or Sets Image
        /// </summary>
        [DataMember(Name = "image", IsRequired = true, EmitDefaultValue = true)]
        public UniqueCollectionSchemaDecodedDtoCoverPicture Image { get; set; }

        /// <summary>
        /// The ss-58 encoded address
        /// </summary>
        /// <value>The ss-58 encoded address</value>
        [DataMember(Name = "owner", IsRequired = true, EmitDefaultValue = true)]
        public string Owner { get; set; }

        /// <summary>
        /// Gets or Sets TokenId
        /// </summary>
        [DataMember(Name = "tokenId", IsRequired = true, EmitDefaultValue = true)]
        public decimal TokenId { get; set; }

        /// <summary>
        /// Gets or Sets Audio
        /// </summary>
        [DataMember(Name = "audio", EmitDefaultValue = false)]
        public UniqueCollectionSchemaDecodedDtoCoverPicture Audio { get; set; }

        /// <summary>
        /// Gets or Sets Description
        /// </summary>
        [DataMember(Name = "description", EmitDefaultValue = false)]
        public DecodedAttributeDtoName Description { get; set; }

        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [DataMember(Name = "name", EmitDefaultValue = false)]
        public DecodedAttributeDtoName Name { get; set; }

        /// <summary>
        /// Gets or Sets ImagePreview
        /// </summary>
        [DataMember(Name = "imagePreview", EmitDefaultValue = false)]
        public UniqueCollectionSchemaDecodedDtoCoverPicture ImagePreview { get; set; }

        /// <summary>
        /// Gets or Sets NestingParentToken
        /// </summary>
        [DataMember(Name = "nestingParentToken", IsRequired = true, EmitDefaultValue = true)]
        public NestingParentId NestingParentToken { get; set; }

        /// <summary>
        /// Gets or Sets SpatialObject
        /// </summary>
        [DataMember(Name = "spatialObject", EmitDefaultValue = false)]
        public UniqueCollectionSchemaDecodedDtoCoverPicture SpatialObject { get; set; }

        /// <summary>
        /// Gets or Sets Video
        /// </summary>
        [DataMember(Name = "video", EmitDefaultValue = false)]
        public UniqueCollectionSchemaDecodedDtoCoverPicture Video { get; set; }

        /// <summary>
        /// Gets or Sets Properties
        /// </summary>
        [DataMember(Name = "properties", IsRequired = true, EmitDefaultValue = true)]
        public List<TokenProperty> Properties { get; set; }

        /// <summary>
        /// Gets or Sets Collection
        /// </summary>
        [DataMember(Name = "collection", IsRequired = true, EmitDefaultValue = true)]
        public CollectionInfoWithSchemaResponse Collection { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class TokenByIdResponse {\n");
            sb.Append("  Attributes: ").Append(Attributes).Append("\n");
            sb.Append("  CollectionId: ").Append(CollectionId).Append("\n");
            sb.Append("  Image: ").Append(Image).Append("\n");
            sb.Append("  Owner: ").Append(Owner).Append("\n");
            sb.Append("  TokenId: ").Append(TokenId).Append("\n");
            sb.Append("  Audio: ").Append(Audio).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  ImagePreview: ").Append(ImagePreview).Append("\n");
            sb.Append("  NestingParentToken: ").Append(NestingParentToken).Append("\n");
            sb.Append("  SpatialObject: ").Append(SpatialObject).Append("\n");
            sb.Append("  Video: ").Append(Video).Append("\n");
            sb.Append("  Properties: ").Append(Properties).Append("\n");
            sb.Append("  Collection: ").Append(Collection).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as TokenByIdResponse);
        }

        /// <summary>
        /// Returns true if TokenByIdResponse instances are equal
        /// </summary>
        /// <param name="input">Instance of TokenByIdResponse to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(TokenByIdResponse input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Attributes == input.Attributes ||
                    this.Attributes != null &&
                    input.Attributes != null &&
                    this.Attributes.SequenceEqual(input.Attributes)
                ) && 
                (
                    this.CollectionId == input.CollectionId ||
                    this.CollectionId.Equals(input.CollectionId)
                ) && 
                (
                    this.Image == input.Image ||
                    (this.Image != null &&
                    this.Image.Equals(input.Image))
                ) && 
                (
                    this.Owner == input.Owner ||
                    (this.Owner != null &&
                    this.Owner.Equals(input.Owner))
                ) && 
                (
                    this.TokenId == input.TokenId ||
                    this.TokenId.Equals(input.TokenId)
                ) && 
                (
                    this.Audio == input.Audio ||
                    (this.Audio != null &&
                    this.Audio.Equals(input.Audio))
                ) && 
                (
                    this.Description == input.Description ||
                    (this.Description != null &&
                    this.Description.Equals(input.Description))
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.ImagePreview == input.ImagePreview ||
                    (this.ImagePreview != null &&
                    this.ImagePreview.Equals(input.ImagePreview))
                ) && 
                (
                    this.NestingParentToken == input.NestingParentToken ||
                    (this.NestingParentToken != null &&
                    this.NestingParentToken.Equals(input.NestingParentToken))
                ) && 
                (
                    this.SpatialObject == input.SpatialObject ||
                    (this.SpatialObject != null &&
                    this.SpatialObject.Equals(input.SpatialObject))
                ) && 
                (
                    this.Video == input.Video ||
                    (this.Video != null &&
                    this.Video.Equals(input.Video))
                ) && 
                (
                    this.Properties == input.Properties ||
                    this.Properties != null &&
                    input.Properties != null &&
                    this.Properties.SequenceEqual(input.Properties)
                ) && 
                (
                    this.Collection == input.Collection ||
                    (this.Collection != null &&
                    this.Collection.Equals(input.Collection))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Attributes != null)
                {
                    hashCode = (hashCode * 59) + this.Attributes.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.CollectionId.GetHashCode();
                if (this.Image != null)
                {
                    hashCode = (hashCode * 59) + this.Image.GetHashCode();
                }
                if (this.Owner != null)
                {
                    hashCode = (hashCode * 59) + this.Owner.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.TokenId.GetHashCode();
                if (this.Audio != null)
                {
                    hashCode = (hashCode * 59) + this.Audio.GetHashCode();
                }
                if (this.Description != null)
                {
                    hashCode = (hashCode * 59) + this.Description.GetHashCode();
                }
                if (this.Name != null)
                {
                    hashCode = (hashCode * 59) + this.Name.GetHashCode();
                }
                if (this.ImagePreview != null)
                {
                    hashCode = (hashCode * 59) + this.ImagePreview.GetHashCode();
                }
                if (this.NestingParentToken != null)
                {
                    hashCode = (hashCode * 59) + this.NestingParentToken.GetHashCode();
                }
                if (this.SpatialObject != null)
                {
                    hashCode = (hashCode * 59) + this.SpatialObject.GetHashCode();
                }
                if (this.Video != null)
                {
                    hashCode = (hashCode * 59) + this.Video.GetHashCode();
                }
                if (this.Properties != null)
                {
                    hashCode = (hashCode * 59) + this.Properties.GetHashCode();
                }
                if (this.Collection != null)
                {
                    hashCode = (hashCode * 59) + this.Collection.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
