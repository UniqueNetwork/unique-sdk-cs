/*
 * Unique SDK
 *
 * Unique SDK HTTP API  <b>Main connection to wss://ws-opal.unique.network (<a target=\"_blank\" href=\"https://polkadot.js.org/apps/?rpc=wss://ws-opal.unique.network\">apps ↗</a>)</b>  Secondary substrate connection to wss://ws-relay-bench.unique.network  (<a target=\"_blank\" href=\"https://polkadot.js.org/apps/?rpc=wss://ws-relay-bench.unique.network\">apps ↗</a>). Go to <a href=\"/relay/swagger\">/relay/swagger</a>  Consumable OpenAPI specification - (<a target=\"_blank\" href=\"/swagger-json\">JSON ↗</a>) (<a target=\"_blank\" href=\"/swagger-yaml\">YAML ↗</a>)
 *
 * The version of the OpenAPI document: 0.6.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Network.Unique.API.Client.OpenAPIDateConverter;

namespace Network.Unique.API.Model
{
    /// <summary>
    /// The collection limits
    /// </summary>
    [DataContract(Name = "EffectiveCollectionLimitsResponse_limits")]
    public partial class EffectiveCollectionLimitsResponseLimits : IEquatable<EffectiveCollectionLimitsResponseLimits>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="EffectiveCollectionLimitsResponseLimits" /> class.
        /// </summary>
        /// <param name="accountTokenOwnershipLimit">Maximum number of tokens that one address can own.</param>
        /// <param name="sponsoredDataSize">Maximum byte size of custom token data that can be sponsored when tokens are minted in sponsored mode.</param>
        /// <param name="sponsoredDataRateLimit">Defines how many blocks need to pass between setVariableMetadata transactions in order for them to be sponsored.</param>
        /// <param name="tokenLimit">Total amount of tokens that can be minted in this collection.</param>
        /// <param name="sponsorTransferTimeout">Time interval in blocks that defines once per how long a non-privileged user transfer or mint transaction can be sponsored.</param>
        /// <param name="sponsorApproveTimeout">Time interval in blocks that defines once per how long a non-privileged user approve transaction can be sponsored.</param>
        /// <param name="ownerCanTransfer">Boolean value that tells if collection owner or admins can transfer or burn tokens owned by other non-privileged users.</param>
        /// <param name="ownerCanDestroy">Boolean value that tells if collection owner can destroy it.</param>
        /// <param name="transfersEnabled">Flag that defines whether token transfers between users are currently enabled.</param>
        public EffectiveCollectionLimitsResponseLimits(decimal accountTokenOwnershipLimit = default(decimal), decimal sponsoredDataSize = default(decimal), decimal sponsoredDataRateLimit = default(decimal), decimal tokenLimit = default(decimal), decimal sponsorTransferTimeout = default(decimal), decimal sponsorApproveTimeout = default(decimal), bool ownerCanTransfer = default(bool), bool ownerCanDestroy = default(bool), bool transfersEnabled = default(bool))
        {
            this.AccountTokenOwnershipLimit = accountTokenOwnershipLimit;
            this.SponsoredDataSize = sponsoredDataSize;
            this.SponsoredDataRateLimit = sponsoredDataRateLimit;
            this.TokenLimit = tokenLimit;
            this.SponsorTransferTimeout = sponsorTransferTimeout;
            this.SponsorApproveTimeout = sponsorApproveTimeout;
            this.OwnerCanTransfer = ownerCanTransfer;
            this.OwnerCanDestroy = ownerCanDestroy;
            this.TransfersEnabled = transfersEnabled;
        }

        /// <summary>
        /// Maximum number of tokens that one address can own
        /// </summary>
        /// <value>Maximum number of tokens that one address can own</value>
        [DataMember(Name = "accountTokenOwnershipLimit", EmitDefaultValue = false)]
        public decimal AccountTokenOwnershipLimit { get; set; }

        /// <summary>
        /// Maximum byte size of custom token data that can be sponsored when tokens are minted in sponsored mode
        /// </summary>
        /// <value>Maximum byte size of custom token data that can be sponsored when tokens are minted in sponsored mode</value>
        [DataMember(Name = "sponsoredDataSize", EmitDefaultValue = false)]
        public decimal SponsoredDataSize { get; set; }

        /// <summary>
        /// Defines how many blocks need to pass between setVariableMetadata transactions in order for them to be sponsored
        /// </summary>
        /// <value>Defines how many blocks need to pass between setVariableMetadata transactions in order for them to be sponsored</value>
        [DataMember(Name = "sponsoredDataRateLimit", EmitDefaultValue = false)]
        public decimal SponsoredDataRateLimit { get; set; }

        /// <summary>
        /// Total amount of tokens that can be minted in this collection
        /// </summary>
        /// <value>Total amount of tokens that can be minted in this collection</value>
        [DataMember(Name = "tokenLimit", EmitDefaultValue = false)]
        public decimal TokenLimit { get; set; }

        /// <summary>
        /// Time interval in blocks that defines once per how long a non-privileged user transfer or mint transaction can be sponsored
        /// </summary>
        /// <value>Time interval in blocks that defines once per how long a non-privileged user transfer or mint transaction can be sponsored</value>
        [DataMember(Name = "sponsorTransferTimeout", EmitDefaultValue = false)]
        public decimal SponsorTransferTimeout { get; set; }

        /// <summary>
        /// Time interval in blocks that defines once per how long a non-privileged user approve transaction can be sponsored
        /// </summary>
        /// <value>Time interval in blocks that defines once per how long a non-privileged user approve transaction can be sponsored</value>
        [DataMember(Name = "sponsorApproveTimeout", EmitDefaultValue = false)]
        public decimal SponsorApproveTimeout { get; set; }

        /// <summary>
        /// Boolean value that tells if collection owner or admins can transfer or burn tokens owned by other non-privileged users
        /// </summary>
        /// <value>Boolean value that tells if collection owner or admins can transfer or burn tokens owned by other non-privileged users</value>
        [DataMember(Name = "ownerCanTransfer", EmitDefaultValue = true)]
        public bool OwnerCanTransfer { get; set; }

        /// <summary>
        /// Boolean value that tells if collection owner can destroy it
        /// </summary>
        /// <value>Boolean value that tells if collection owner can destroy it</value>
        [DataMember(Name = "ownerCanDestroy", EmitDefaultValue = true)]
        public bool OwnerCanDestroy { get; set; }

        /// <summary>
        /// Flag that defines whether token transfers between users are currently enabled
        /// </summary>
        /// <value>Flag that defines whether token transfers between users are currently enabled</value>
        [DataMember(Name = "transfersEnabled", EmitDefaultValue = true)]
        public bool TransfersEnabled { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class EffectiveCollectionLimitsResponseLimits {\n");
            sb.Append("  AccountTokenOwnershipLimit: ").Append(AccountTokenOwnershipLimit).Append("\n");
            sb.Append("  SponsoredDataSize: ").Append(SponsoredDataSize).Append("\n");
            sb.Append("  SponsoredDataRateLimit: ").Append(SponsoredDataRateLimit).Append("\n");
            sb.Append("  TokenLimit: ").Append(TokenLimit).Append("\n");
            sb.Append("  SponsorTransferTimeout: ").Append(SponsorTransferTimeout).Append("\n");
            sb.Append("  SponsorApproveTimeout: ").Append(SponsorApproveTimeout).Append("\n");
            sb.Append("  OwnerCanTransfer: ").Append(OwnerCanTransfer).Append("\n");
            sb.Append("  OwnerCanDestroy: ").Append(OwnerCanDestroy).Append("\n");
            sb.Append("  TransfersEnabled: ").Append(TransfersEnabled).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as EffectiveCollectionLimitsResponseLimits);
        }

        /// <summary>
        /// Returns true if EffectiveCollectionLimitsResponseLimits instances are equal
        /// </summary>
        /// <param name="input">Instance of EffectiveCollectionLimitsResponseLimits to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(EffectiveCollectionLimitsResponseLimits input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.AccountTokenOwnershipLimit == input.AccountTokenOwnershipLimit ||
                    this.AccountTokenOwnershipLimit.Equals(input.AccountTokenOwnershipLimit)
                ) && 
                (
                    this.SponsoredDataSize == input.SponsoredDataSize ||
                    this.SponsoredDataSize.Equals(input.SponsoredDataSize)
                ) && 
                (
                    this.SponsoredDataRateLimit == input.SponsoredDataRateLimit ||
                    this.SponsoredDataRateLimit.Equals(input.SponsoredDataRateLimit)
                ) && 
                (
                    this.TokenLimit == input.TokenLimit ||
                    this.TokenLimit.Equals(input.TokenLimit)
                ) && 
                (
                    this.SponsorTransferTimeout == input.SponsorTransferTimeout ||
                    this.SponsorTransferTimeout.Equals(input.SponsorTransferTimeout)
                ) && 
                (
                    this.SponsorApproveTimeout == input.SponsorApproveTimeout ||
                    this.SponsorApproveTimeout.Equals(input.SponsorApproveTimeout)
                ) && 
                (
                    this.OwnerCanTransfer == input.OwnerCanTransfer ||
                    this.OwnerCanTransfer.Equals(input.OwnerCanTransfer)
                ) && 
                (
                    this.OwnerCanDestroy == input.OwnerCanDestroy ||
                    this.OwnerCanDestroy.Equals(input.OwnerCanDestroy)
                ) && 
                (
                    this.TransfersEnabled == input.TransfersEnabled ||
                    this.TransfersEnabled.Equals(input.TransfersEnabled)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = (hashCode * 59) + this.AccountTokenOwnershipLimit.GetHashCode();
                hashCode = (hashCode * 59) + this.SponsoredDataSize.GetHashCode();
                hashCode = (hashCode * 59) + this.SponsoredDataRateLimit.GetHashCode();
                hashCode = (hashCode * 59) + this.TokenLimit.GetHashCode();
                hashCode = (hashCode * 59) + this.SponsorTransferTimeout.GetHashCode();
                hashCode = (hashCode * 59) + this.SponsorApproveTimeout.GetHashCode();
                hashCode = (hashCode * 59) + this.OwnerCanTransfer.GetHashCode();
                hashCode = (hashCode * 59) + this.OwnerCanDestroy.GetHashCode();
                hashCode = (hashCode * 59) + this.TransfersEnabled.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
