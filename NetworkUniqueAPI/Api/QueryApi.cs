/*
 * Unique SDK
 *
 * Unique SDK HTTP API  <b>Main connection to wss://ws-opal.unique.network (<a target=\"_blank\" href=\"https://polkadot.js.org/apps/?rpc=wss://ws-opal.unique.network\">apps ↗</a>)</b>  Secondary substrate connection to wss://ws-relay-bench.unique.network  (<a target=\"_blank\" href=\"https://polkadot.js.org/apps/?rpc=wss://ws-relay-bench.unique.network\">apps ↗</a>). Go to <a href=\"/relay/swagger\">/relay/swagger</a>  Consumable OpenAPI specification - (<a target=\"_blank\" href=\"/swagger-json\">JSON ↗</a>) (<a target=\"_blank\" href=\"/swagger-yaml\">YAML ↗</a>)
 *
 * The version of the OpenAPI document: 0.6.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using Network.Unique.API.Client;
using Network.Unique.API.Model;

namespace Network.Unique.API.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IQueryApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Direct get to any Polkadot getter
        /// </summary>
        /// <remarks>
        /// For read Polkadot &lt;a href&#x3D;\&quot;https://polkadot.js.org/docs/substrate/constants\&quot;&gt;constants&lt;/a&gt; select the appropriate value from the interface &lt;code&gt;api.&amp;lt;endpoint&amp;gt;.&amp;lt;module&amp;gt;.&amp;lt;method&amp;gt;&lt;/code&gt;.
        /// </remarks>
        /// <exception cref="Network.Unique.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="endpoint"></param>
        /// <param name="module"></param>
        /// <param name="method"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Object</returns>
        Object QueryControllerGet(string endpoint, string module, string method, int operationIndex = 0);

        /// <summary>
        /// Direct get to any Polkadot getter
        /// </summary>
        /// <remarks>
        /// For read Polkadot &lt;a href&#x3D;\&quot;https://polkadot.js.org/docs/substrate/constants\&quot;&gt;constants&lt;/a&gt; select the appropriate value from the interface &lt;code&gt;api.&amp;lt;endpoint&amp;gt;.&amp;lt;module&amp;gt;.&amp;lt;method&amp;gt;&lt;/code&gt;.
        /// </remarks>
        /// <exception cref="Network.Unique.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="endpoint"></param>
        /// <param name="module"></param>
        /// <param name="method"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> QueryControllerGetWithHttpInfo(string endpoint, string module, string method, int operationIndex = 0);
        /// <summary>
        /// Direct call to any Polkadot method
        /// </summary>
        /// <remarks>
        /// For call Polkadot method &lt;a href&#x3D;\&quot;https://polkadot.js.org/docs/substrate/storage/#number-u32\&quot;&gt;The current block number being processed&lt;/a&gt;  &lt;ul&gt;&lt;li&gt;&lt;code&gt;number(): u32&lt;FrameSystemPhase&gt;&lt;/code&gt;&lt;/li&gt;  &lt;li&gt;&lt;code&gt;interface: api.query.system.number&lt;/code&gt;&lt;/li&gt;&lt;/ul&gt; select the appropriate value from the interface &lt;code&gt;api.&amp;lt;endpoint&amp;gt;.&amp;lt;module&amp;gt;.&amp;lt;method&amp;gt;&lt;/code&gt; and pass the parameters to the method in the args list.
        /// </remarks>
        /// <exception cref="Network.Unique.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="endpoint"></param>
        /// <param name="module"></param>
        /// <param name="method"></param>
        /// <param name="apiRequestBody"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Object</returns>
        Object QueryControllerQuery(string endpoint, string module, string method, ApiRequestBody apiRequestBody, int operationIndex = 0);

        /// <summary>
        /// Direct call to any Polkadot method
        /// </summary>
        /// <remarks>
        /// For call Polkadot method &lt;a href&#x3D;\&quot;https://polkadot.js.org/docs/substrate/storage/#number-u32\&quot;&gt;The current block number being processed&lt;/a&gt;  &lt;ul&gt;&lt;li&gt;&lt;code&gt;number(): u32&lt;FrameSystemPhase&gt;&lt;/code&gt;&lt;/li&gt;  &lt;li&gt;&lt;code&gt;interface: api.query.system.number&lt;/code&gt;&lt;/li&gt;&lt;/ul&gt; select the appropriate value from the interface &lt;code&gt;api.&amp;lt;endpoint&amp;gt;.&amp;lt;module&amp;gt;.&amp;lt;method&amp;gt;&lt;/code&gt; and pass the parameters to the method in the args list.
        /// </remarks>
        /// <exception cref="Network.Unique.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="endpoint"></param>
        /// <param name="module"></param>
        /// <param name="method"></param>
        /// <param name="apiRequestBody"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> QueryControllerQueryWithHttpInfo(string endpoint, string module, string method, ApiRequestBody apiRequestBody, int operationIndex = 0);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IQueryApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Direct get to any Polkadot getter
        /// </summary>
        /// <remarks>
        /// For read Polkadot &lt;a href&#x3D;\&quot;https://polkadot.js.org/docs/substrate/constants\&quot;&gt;constants&lt;/a&gt; select the appropriate value from the interface &lt;code&gt;api.&amp;lt;endpoint&amp;gt;.&amp;lt;module&amp;gt;.&amp;lt;method&amp;gt;&lt;/code&gt;.
        /// </remarks>
        /// <exception cref="Network.Unique.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="endpoint"></param>
        /// <param name="module"></param>
        /// <param name="method"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> QueryControllerGetAsync(string endpoint, string module, string method, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Direct get to any Polkadot getter
        /// </summary>
        /// <remarks>
        /// For read Polkadot &lt;a href&#x3D;\&quot;https://polkadot.js.org/docs/substrate/constants\&quot;&gt;constants&lt;/a&gt; select the appropriate value from the interface &lt;code&gt;api.&amp;lt;endpoint&amp;gt;.&amp;lt;module&amp;gt;.&amp;lt;method&amp;gt;&lt;/code&gt;.
        /// </remarks>
        /// <exception cref="Network.Unique.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="endpoint"></param>
        /// <param name="module"></param>
        /// <param name="method"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> QueryControllerGetWithHttpInfoAsync(string endpoint, string module, string method, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Direct call to any Polkadot method
        /// </summary>
        /// <remarks>
        /// For call Polkadot method &lt;a href&#x3D;\&quot;https://polkadot.js.org/docs/substrate/storage/#number-u32\&quot;&gt;The current block number being processed&lt;/a&gt;  &lt;ul&gt;&lt;li&gt;&lt;code&gt;number(): u32&lt;FrameSystemPhase&gt;&lt;/code&gt;&lt;/li&gt;  &lt;li&gt;&lt;code&gt;interface: api.query.system.number&lt;/code&gt;&lt;/li&gt;&lt;/ul&gt; select the appropriate value from the interface &lt;code&gt;api.&amp;lt;endpoint&amp;gt;.&amp;lt;module&amp;gt;.&amp;lt;method&amp;gt;&lt;/code&gt; and pass the parameters to the method in the args list.
        /// </remarks>
        /// <exception cref="Network.Unique.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="endpoint"></param>
        /// <param name="module"></param>
        /// <param name="method"></param>
        /// <param name="apiRequestBody"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> QueryControllerQueryAsync(string endpoint, string module, string method, ApiRequestBody apiRequestBody, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Direct call to any Polkadot method
        /// </summary>
        /// <remarks>
        /// For call Polkadot method &lt;a href&#x3D;\&quot;https://polkadot.js.org/docs/substrate/storage/#number-u32\&quot;&gt;The current block number being processed&lt;/a&gt;  &lt;ul&gt;&lt;li&gt;&lt;code&gt;number(): u32&lt;FrameSystemPhase&gt;&lt;/code&gt;&lt;/li&gt;  &lt;li&gt;&lt;code&gt;interface: api.query.system.number&lt;/code&gt;&lt;/li&gt;&lt;/ul&gt; select the appropriate value from the interface &lt;code&gt;api.&amp;lt;endpoint&amp;gt;.&amp;lt;module&amp;gt;.&amp;lt;method&amp;gt;&lt;/code&gt; and pass the parameters to the method in the args list.
        /// </remarks>
        /// <exception cref="Network.Unique.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="endpoint"></param>
        /// <param name="module"></param>
        /// <param name="method"></param>
        /// <param name="apiRequestBody"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> QueryControllerQueryWithHttpInfoAsync(string endpoint, string module, string method, ApiRequestBody apiRequestBody, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IQueryApi : IQueryApiSync, IQueryApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class QueryApi : IQueryApi
    {
        private Network.Unique.API.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="QueryApi"/> class.
        /// </summary>
        /// <returns></returns>
        public QueryApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="QueryApi"/> class.
        /// </summary>
        /// <returns></returns>
        public QueryApi(string basePath)
        {
            this.Configuration = Network.Unique.API.Client.Configuration.MergeConfigurations(
                Network.Unique.API.Client.GlobalConfiguration.Instance,
                new Network.Unique.API.Client.Configuration { BasePath = basePath }
            );
            this.Client = new Network.Unique.API.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Network.Unique.API.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = Network.Unique.API.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="QueryApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public QueryApi(Network.Unique.API.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = Network.Unique.API.Client.Configuration.MergeConfigurations(
                Network.Unique.API.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new Network.Unique.API.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Network.Unique.API.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = Network.Unique.API.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="QueryApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public QueryApi(Network.Unique.API.Client.ISynchronousClient client, Network.Unique.API.Client.IAsynchronousClient asyncClient, Network.Unique.API.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = Network.Unique.API.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public Network.Unique.API.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public Network.Unique.API.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Network.Unique.API.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Network.Unique.API.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Direct get to any Polkadot getter For read Polkadot &lt;a href&#x3D;\&quot;https://polkadot.js.org/docs/substrate/constants\&quot;&gt;constants&lt;/a&gt; select the appropriate value from the interface &lt;code&gt;api.&amp;lt;endpoint&amp;gt;.&amp;lt;module&amp;gt;.&amp;lt;method&amp;gt;&lt;/code&gt;.
        /// </summary>
        /// <exception cref="Network.Unique.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="endpoint"></param>
        /// <param name="module"></param>
        /// <param name="method"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Object</returns>
        public Object QueryControllerGet(string endpoint, string module, string method, int operationIndex = 0)
        {
            Network.Unique.API.Client.ApiResponse<Object> localVarResponse = QueryControllerGetWithHttpInfo(endpoint, module, method);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Direct get to any Polkadot getter For read Polkadot &lt;a href&#x3D;\&quot;https://polkadot.js.org/docs/substrate/constants\&quot;&gt;constants&lt;/a&gt; select the appropriate value from the interface &lt;code&gt;api.&amp;lt;endpoint&amp;gt;.&amp;lt;module&amp;gt;.&amp;lt;method&amp;gt;&lt;/code&gt;.
        /// </summary>
        /// <exception cref="Network.Unique.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="endpoint"></param>
        /// <param name="module"></param>
        /// <param name="method"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object</returns>
        public Network.Unique.API.Client.ApiResponse<Object> QueryControllerGetWithHttpInfo(string endpoint, string module, string method, int operationIndex = 0)
        {
            // verify the required parameter 'endpoint' is set
            if (endpoint == null)
            {
                throw new Network.Unique.API.Client.ApiException(400, "Missing required parameter 'endpoint' when calling QueryApi->QueryControllerGet");
            }

            // verify the required parameter 'module' is set
            if (module == null)
            {
                throw new Network.Unique.API.Client.ApiException(400, "Missing required parameter 'module' when calling QueryApi->QueryControllerGet");
            }

            // verify the required parameter 'method' is set
            if (method == null)
            {
                throw new Network.Unique.API.Client.ApiException(400, "Missing required parameter 'method' when calling QueryApi->QueryControllerGet");
            }

            Network.Unique.API.Client.RequestOptions localVarRequestOptions = new Network.Unique.API.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Network.Unique.API.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Network.Unique.API.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("endpoint", Network.Unique.API.Client.ClientUtils.ParameterToString(endpoint)); // path parameter
            localVarRequestOptions.PathParameters.Add("module", Network.Unique.API.Client.ClientUtils.ParameterToString(module)); // path parameter
            localVarRequestOptions.PathParameters.Add("method", Network.Unique.API.Client.ClientUtils.ParameterToString(method)); // path parameter

            localVarRequestOptions.Operation = "QueryApi.QueryControllerGet";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Get<Object>("/v1/query/{endpoint}/{module}/{method}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("QueryControllerGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Direct get to any Polkadot getter For read Polkadot &lt;a href&#x3D;\&quot;https://polkadot.js.org/docs/substrate/constants\&quot;&gt;constants&lt;/a&gt; select the appropriate value from the interface &lt;code&gt;api.&amp;lt;endpoint&amp;gt;.&amp;lt;module&amp;gt;.&amp;lt;method&amp;gt;&lt;/code&gt;.
        /// </summary>
        /// <exception cref="Network.Unique.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="endpoint"></param>
        /// <param name="module"></param>
        /// <param name="method"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> QueryControllerGetAsync(string endpoint, string module, string method, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Network.Unique.API.Client.ApiResponse<Object> localVarResponse = await QueryControllerGetWithHttpInfoAsync(endpoint, module, method, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Direct get to any Polkadot getter For read Polkadot &lt;a href&#x3D;\&quot;https://polkadot.js.org/docs/substrate/constants\&quot;&gt;constants&lt;/a&gt; select the appropriate value from the interface &lt;code&gt;api.&amp;lt;endpoint&amp;gt;.&amp;lt;module&amp;gt;.&amp;lt;method&amp;gt;&lt;/code&gt;.
        /// </summary>
        /// <exception cref="Network.Unique.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="endpoint"></param>
        /// <param name="module"></param>
        /// <param name="method"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<Network.Unique.API.Client.ApiResponse<Object>> QueryControllerGetWithHttpInfoAsync(string endpoint, string module, string method, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'endpoint' is set
            if (endpoint == null)
            {
                throw new Network.Unique.API.Client.ApiException(400, "Missing required parameter 'endpoint' when calling QueryApi->QueryControllerGet");
            }

            // verify the required parameter 'module' is set
            if (module == null)
            {
                throw new Network.Unique.API.Client.ApiException(400, "Missing required parameter 'module' when calling QueryApi->QueryControllerGet");
            }

            // verify the required parameter 'method' is set
            if (method == null)
            {
                throw new Network.Unique.API.Client.ApiException(400, "Missing required parameter 'method' when calling QueryApi->QueryControllerGet");
            }


            Network.Unique.API.Client.RequestOptions localVarRequestOptions = new Network.Unique.API.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Network.Unique.API.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Network.Unique.API.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("endpoint", Network.Unique.API.Client.ClientUtils.ParameterToString(endpoint)); // path parameter
            localVarRequestOptions.PathParameters.Add("module", Network.Unique.API.Client.ClientUtils.ParameterToString(module)); // path parameter
            localVarRequestOptions.PathParameters.Add("method", Network.Unique.API.Client.ClientUtils.ParameterToString(method)); // path parameter

            localVarRequestOptions.Operation = "QueryApi.QueryControllerGet";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<Object>("/v1/query/{endpoint}/{module}/{method}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("QueryControllerGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Direct call to any Polkadot method For call Polkadot method &lt;a href&#x3D;\&quot;https://polkadot.js.org/docs/substrate/storage/#number-u32\&quot;&gt;The current block number being processed&lt;/a&gt;  &lt;ul&gt;&lt;li&gt;&lt;code&gt;number(): u32&lt;FrameSystemPhase&gt;&lt;/code&gt;&lt;/li&gt;  &lt;li&gt;&lt;code&gt;interface: api.query.system.number&lt;/code&gt;&lt;/li&gt;&lt;/ul&gt; select the appropriate value from the interface &lt;code&gt;api.&amp;lt;endpoint&amp;gt;.&amp;lt;module&amp;gt;.&amp;lt;method&amp;gt;&lt;/code&gt; and pass the parameters to the method in the args list.
        /// </summary>
        /// <exception cref="Network.Unique.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="endpoint"></param>
        /// <param name="module"></param>
        /// <param name="method"></param>
        /// <param name="apiRequestBody"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Object</returns>
        public Object QueryControllerQuery(string endpoint, string module, string method, ApiRequestBody apiRequestBody, int operationIndex = 0)
        {
            Network.Unique.API.Client.ApiResponse<Object> localVarResponse = QueryControllerQueryWithHttpInfo(endpoint, module, method, apiRequestBody);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Direct call to any Polkadot method For call Polkadot method &lt;a href&#x3D;\&quot;https://polkadot.js.org/docs/substrate/storage/#number-u32\&quot;&gt;The current block number being processed&lt;/a&gt;  &lt;ul&gt;&lt;li&gt;&lt;code&gt;number(): u32&lt;FrameSystemPhase&gt;&lt;/code&gt;&lt;/li&gt;  &lt;li&gt;&lt;code&gt;interface: api.query.system.number&lt;/code&gt;&lt;/li&gt;&lt;/ul&gt; select the appropriate value from the interface &lt;code&gt;api.&amp;lt;endpoint&amp;gt;.&amp;lt;module&amp;gt;.&amp;lt;method&amp;gt;&lt;/code&gt; and pass the parameters to the method in the args list.
        /// </summary>
        /// <exception cref="Network.Unique.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="endpoint"></param>
        /// <param name="module"></param>
        /// <param name="method"></param>
        /// <param name="apiRequestBody"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object</returns>
        public Network.Unique.API.Client.ApiResponse<Object> QueryControllerQueryWithHttpInfo(string endpoint, string module, string method, ApiRequestBody apiRequestBody, int operationIndex = 0)
        {
            // verify the required parameter 'endpoint' is set
            if (endpoint == null)
            {
                throw new Network.Unique.API.Client.ApiException(400, "Missing required parameter 'endpoint' when calling QueryApi->QueryControllerQuery");
            }

            // verify the required parameter 'module' is set
            if (module == null)
            {
                throw new Network.Unique.API.Client.ApiException(400, "Missing required parameter 'module' when calling QueryApi->QueryControllerQuery");
            }

            // verify the required parameter 'method' is set
            if (method == null)
            {
                throw new Network.Unique.API.Client.ApiException(400, "Missing required parameter 'method' when calling QueryApi->QueryControllerQuery");
            }

            // verify the required parameter 'apiRequestBody' is set
            if (apiRequestBody == null)
            {
                throw new Network.Unique.API.Client.ApiException(400, "Missing required parameter 'apiRequestBody' when calling QueryApi->QueryControllerQuery");
            }

            Network.Unique.API.Client.RequestOptions localVarRequestOptions = new Network.Unique.API.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Network.Unique.API.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Network.Unique.API.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("endpoint", Network.Unique.API.Client.ClientUtils.ParameterToString(endpoint)); // path parameter
            localVarRequestOptions.PathParameters.Add("module", Network.Unique.API.Client.ClientUtils.ParameterToString(module)); // path parameter
            localVarRequestOptions.PathParameters.Add("method", Network.Unique.API.Client.ClientUtils.ParameterToString(method)); // path parameter
            localVarRequestOptions.Data = apiRequestBody;

            localVarRequestOptions.Operation = "QueryApi.QueryControllerQuery";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/v1/query/{endpoint}/{module}/{method}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("QueryControllerQuery", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Direct call to any Polkadot method For call Polkadot method &lt;a href&#x3D;\&quot;https://polkadot.js.org/docs/substrate/storage/#number-u32\&quot;&gt;The current block number being processed&lt;/a&gt;  &lt;ul&gt;&lt;li&gt;&lt;code&gt;number(): u32&lt;FrameSystemPhase&gt;&lt;/code&gt;&lt;/li&gt;  &lt;li&gt;&lt;code&gt;interface: api.query.system.number&lt;/code&gt;&lt;/li&gt;&lt;/ul&gt; select the appropriate value from the interface &lt;code&gt;api.&amp;lt;endpoint&amp;gt;.&amp;lt;module&amp;gt;.&amp;lt;method&amp;gt;&lt;/code&gt; and pass the parameters to the method in the args list.
        /// </summary>
        /// <exception cref="Network.Unique.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="endpoint"></param>
        /// <param name="module"></param>
        /// <param name="method"></param>
        /// <param name="apiRequestBody"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> QueryControllerQueryAsync(string endpoint, string module, string method, ApiRequestBody apiRequestBody, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Network.Unique.API.Client.ApiResponse<Object> localVarResponse = await QueryControllerQueryWithHttpInfoAsync(endpoint, module, method, apiRequestBody, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Direct call to any Polkadot method For call Polkadot method &lt;a href&#x3D;\&quot;https://polkadot.js.org/docs/substrate/storage/#number-u32\&quot;&gt;The current block number being processed&lt;/a&gt;  &lt;ul&gt;&lt;li&gt;&lt;code&gt;number(): u32&lt;FrameSystemPhase&gt;&lt;/code&gt;&lt;/li&gt;  &lt;li&gt;&lt;code&gt;interface: api.query.system.number&lt;/code&gt;&lt;/li&gt;&lt;/ul&gt; select the appropriate value from the interface &lt;code&gt;api.&amp;lt;endpoint&amp;gt;.&amp;lt;module&amp;gt;.&amp;lt;method&amp;gt;&lt;/code&gt; and pass the parameters to the method in the args list.
        /// </summary>
        /// <exception cref="Network.Unique.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="endpoint"></param>
        /// <param name="module"></param>
        /// <param name="method"></param>
        /// <param name="apiRequestBody"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<Network.Unique.API.Client.ApiResponse<Object>> QueryControllerQueryWithHttpInfoAsync(string endpoint, string module, string method, ApiRequestBody apiRequestBody, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'endpoint' is set
            if (endpoint == null)
            {
                throw new Network.Unique.API.Client.ApiException(400, "Missing required parameter 'endpoint' when calling QueryApi->QueryControllerQuery");
            }

            // verify the required parameter 'module' is set
            if (module == null)
            {
                throw new Network.Unique.API.Client.ApiException(400, "Missing required parameter 'module' when calling QueryApi->QueryControllerQuery");
            }

            // verify the required parameter 'method' is set
            if (method == null)
            {
                throw new Network.Unique.API.Client.ApiException(400, "Missing required parameter 'method' when calling QueryApi->QueryControllerQuery");
            }

            // verify the required parameter 'apiRequestBody' is set
            if (apiRequestBody == null)
            {
                throw new Network.Unique.API.Client.ApiException(400, "Missing required parameter 'apiRequestBody' when calling QueryApi->QueryControllerQuery");
            }


            Network.Unique.API.Client.RequestOptions localVarRequestOptions = new Network.Unique.API.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Network.Unique.API.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Network.Unique.API.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("endpoint", Network.Unique.API.Client.ClientUtils.ParameterToString(endpoint)); // path parameter
            localVarRequestOptions.PathParameters.Add("module", Network.Unique.API.Client.ClientUtils.ParameterToString(module)); // path parameter
            localVarRequestOptions.PathParameters.Add("method", Network.Unique.API.Client.ClientUtils.ParameterToString(method)); // path parameter
            localVarRequestOptions.Data = apiRequestBody;

            localVarRequestOptions.Operation = "QueryApi.QueryControllerQuery";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/v1/query/{endpoint}/{module}/{method}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("QueryControllerQuery", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

    }
}
