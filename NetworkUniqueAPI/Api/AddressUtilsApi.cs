/*
 * Unique SDK
 *
 * Unique SDK HTTP API  <b>Main connection to wss://ws-opal.unique.network (<a target=\"_blank\" href=\"https://polkadot.js.org/apps/?rpc=wss://ws-opal.unique.network\">apps ↗</a>)</b>  Secondary substrate connection to wss://ws-relay-bench.unique.network  (<a target=\"_blank\" href=\"https://polkadot.js.org/apps/?rpc=wss://ws-relay-bench.unique.network\">apps ↗</a>). Go to <a href=\"/relay/swagger\">/relay/swagger</a>  Consumable OpenAPI specification - (<a target=\"_blank\" href=\"/swagger-json\">JSON ↗</a>) (<a target=\"_blank\" href=\"/swagger-yaml\">YAML ↗</a>)
 *
 * The version of the OpenAPI document: 0.6.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using Network.Unique.API.Client;
using Network.Unique.API.Model;

namespace Network.Unique.API.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IAddressUtilsApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="Network.Unique.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="address">The ss-58 encoded address</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>AddressDto</returns>
        AddressDto AddressUtilsControllerEthereumToSubstrate(string address, int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Network.Unique.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="address">The ss-58 encoded address</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of AddressDto</returns>
        ApiResponse<AddressDto> AddressUtilsControllerEthereumToSubstrateWithHttpInfo(string address, int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="Network.Unique.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="address">collection and token id, encoded as ethereum address</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>TokenIdQuery</returns>
        TokenIdQuery AddressUtilsControllerNestingAddressToCollection(string address, int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Network.Unique.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="address">collection and token id, encoded as ethereum address</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of TokenIdQuery</returns>
        ApiResponse<TokenIdQuery> AddressUtilsControllerNestingAddressToCollectionWithHttpInfo(string address, int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="Network.Unique.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionId"></param>
        /// <param name="tokenId"></param>
        /// <param name="at">Hash of execution block (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>NestingAddressDto</returns>
        NestingAddressDto AddressUtilsControllerNestingTokenIdToAddress(decimal collectionId, decimal tokenId, string at = default(string), int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Network.Unique.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionId"></param>
        /// <param name="tokenId"></param>
        /// <param name="at">Hash of execution block (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of NestingAddressDto</returns>
        ApiResponse<NestingAddressDto> AddressUtilsControllerNestingTokenIdToAddressWithHttpInfo(decimal collectionId, decimal tokenId, string at = default(string), int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="Network.Unique.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="address">The ss-58 encoded address</param>
        /// <param name="ss58prefix"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>AddressDto</returns>
        AddressDto AddressUtilsControllerNormalize(string address, decimal? ss58prefix = default(decimal?), int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Network.Unique.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="address">The ss-58 encoded address</param>
        /// <param name="ss58prefix"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of AddressDto</returns>
        ApiResponse<AddressDto> AddressUtilsControllerNormalizeWithHttpInfo(string address, decimal? ss58prefix = default(decimal?), int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="Network.Unique.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="address">The ss-58 encoded address</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>EthereumAddressDto</returns>
        EthereumAddressDto AddressUtilsControllerSubstrateToEthereum(string address, int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Network.Unique.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="address">The ss-58 encoded address</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of EthereumAddressDto</returns>
        ApiResponse<EthereumAddressDto> AddressUtilsControllerSubstrateToEthereumWithHttpInfo(string address, int operationIndex = 0);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IAddressUtilsApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Network.Unique.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="address">The ss-58 encoded address</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of AddressDto</returns>
        System.Threading.Tasks.Task<AddressDto> AddressUtilsControllerEthereumToSubstrateAsync(string address, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Network.Unique.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="address">The ss-58 encoded address</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (AddressDto)</returns>
        System.Threading.Tasks.Task<ApiResponse<AddressDto>> AddressUtilsControllerEthereumToSubstrateWithHttpInfoAsync(string address, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Network.Unique.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="address">collection and token id, encoded as ethereum address</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of TokenIdQuery</returns>
        System.Threading.Tasks.Task<TokenIdQuery> AddressUtilsControllerNestingAddressToCollectionAsync(string address, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Network.Unique.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="address">collection and token id, encoded as ethereum address</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (TokenIdQuery)</returns>
        System.Threading.Tasks.Task<ApiResponse<TokenIdQuery>> AddressUtilsControllerNestingAddressToCollectionWithHttpInfoAsync(string address, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Network.Unique.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionId"></param>
        /// <param name="tokenId"></param>
        /// <param name="at">Hash of execution block (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of NestingAddressDto</returns>
        System.Threading.Tasks.Task<NestingAddressDto> AddressUtilsControllerNestingTokenIdToAddressAsync(decimal collectionId, decimal tokenId, string at = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Network.Unique.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionId"></param>
        /// <param name="tokenId"></param>
        /// <param name="at">Hash of execution block (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (NestingAddressDto)</returns>
        System.Threading.Tasks.Task<ApiResponse<NestingAddressDto>> AddressUtilsControllerNestingTokenIdToAddressWithHttpInfoAsync(decimal collectionId, decimal tokenId, string at = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Network.Unique.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="address">The ss-58 encoded address</param>
        /// <param name="ss58prefix"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of AddressDto</returns>
        System.Threading.Tasks.Task<AddressDto> AddressUtilsControllerNormalizeAsync(string address, decimal? ss58prefix = default(decimal?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Network.Unique.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="address">The ss-58 encoded address</param>
        /// <param name="ss58prefix"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (AddressDto)</returns>
        System.Threading.Tasks.Task<ApiResponse<AddressDto>> AddressUtilsControllerNormalizeWithHttpInfoAsync(string address, decimal? ss58prefix = default(decimal?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Network.Unique.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="address">The ss-58 encoded address</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of EthereumAddressDto</returns>
        System.Threading.Tasks.Task<EthereumAddressDto> AddressUtilsControllerSubstrateToEthereumAsync(string address, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Network.Unique.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="address">The ss-58 encoded address</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (EthereumAddressDto)</returns>
        System.Threading.Tasks.Task<ApiResponse<EthereumAddressDto>> AddressUtilsControllerSubstrateToEthereumWithHttpInfoAsync(string address, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IAddressUtilsApi : IAddressUtilsApiSync, IAddressUtilsApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class AddressUtilsApi : IAddressUtilsApi
    {
        private Network.Unique.API.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="AddressUtilsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public AddressUtilsApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="AddressUtilsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public AddressUtilsApi(string basePath)
        {
            this.Configuration = Network.Unique.API.Client.Configuration.MergeConfigurations(
                Network.Unique.API.Client.GlobalConfiguration.Instance,
                new Network.Unique.API.Client.Configuration { BasePath = basePath }
            );
            this.Client = new Network.Unique.API.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Network.Unique.API.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = Network.Unique.API.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="AddressUtilsApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public AddressUtilsApi(Network.Unique.API.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = Network.Unique.API.Client.Configuration.MergeConfigurations(
                Network.Unique.API.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new Network.Unique.API.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Network.Unique.API.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = Network.Unique.API.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="AddressUtilsApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public AddressUtilsApi(Network.Unique.API.Client.ISynchronousClient client, Network.Unique.API.Client.IAsynchronousClient asyncClient, Network.Unique.API.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = Network.Unique.API.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public Network.Unique.API.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public Network.Unique.API.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Network.Unique.API.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Network.Unique.API.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Network.Unique.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="address">The ss-58 encoded address</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>AddressDto</returns>
        public AddressDto AddressUtilsControllerEthereumToSubstrate(string address, int operationIndex = 0)
        {
            Network.Unique.API.Client.ApiResponse<AddressDto> localVarResponse = AddressUtilsControllerEthereumToSubstrateWithHttpInfo(address);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Network.Unique.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="address">The ss-58 encoded address</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of AddressDto</returns>
        public Network.Unique.API.Client.ApiResponse<AddressDto> AddressUtilsControllerEthereumToSubstrateWithHttpInfo(string address, int operationIndex = 0)
        {
            // verify the required parameter 'address' is set
            if (address == null)
            {
                throw new Network.Unique.API.Client.ApiException(400, "Missing required parameter 'address' when calling AddressUtilsApi->AddressUtilsControllerEthereumToSubstrate");
            }

            Network.Unique.API.Client.RequestOptions localVarRequestOptions = new Network.Unique.API.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Network.Unique.API.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Network.Unique.API.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(Network.Unique.API.Client.ClientUtils.ParameterToMultiMap("", "address", address));

            localVarRequestOptions.Operation = "AddressUtilsApi.AddressUtilsControllerEthereumToSubstrate";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Get<AddressDto>("/v1/address-utils/mirror/ethereum-to-substrate", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AddressUtilsControllerEthereumToSubstrate", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Network.Unique.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="address">The ss-58 encoded address</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of AddressDto</returns>
        public async System.Threading.Tasks.Task<AddressDto> AddressUtilsControllerEthereumToSubstrateAsync(string address, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Network.Unique.API.Client.ApiResponse<AddressDto> localVarResponse = await AddressUtilsControllerEthereumToSubstrateWithHttpInfoAsync(address, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Network.Unique.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="address">The ss-58 encoded address</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (AddressDto)</returns>
        public async System.Threading.Tasks.Task<Network.Unique.API.Client.ApiResponse<AddressDto>> AddressUtilsControllerEthereumToSubstrateWithHttpInfoAsync(string address, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'address' is set
            if (address == null)
            {
                throw new Network.Unique.API.Client.ApiException(400, "Missing required parameter 'address' when calling AddressUtilsApi->AddressUtilsControllerEthereumToSubstrate");
            }


            Network.Unique.API.Client.RequestOptions localVarRequestOptions = new Network.Unique.API.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Network.Unique.API.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Network.Unique.API.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(Network.Unique.API.Client.ClientUtils.ParameterToMultiMap("", "address", address));

            localVarRequestOptions.Operation = "AddressUtilsApi.AddressUtilsControllerEthereumToSubstrate";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<AddressDto>("/v1/address-utils/mirror/ethereum-to-substrate", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AddressUtilsControllerEthereumToSubstrate", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Network.Unique.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="address">collection and token id, encoded as ethereum address</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>TokenIdQuery</returns>
        public TokenIdQuery AddressUtilsControllerNestingAddressToCollection(string address, int operationIndex = 0)
        {
            Network.Unique.API.Client.ApiResponse<TokenIdQuery> localVarResponse = AddressUtilsControllerNestingAddressToCollectionWithHttpInfo(address);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Network.Unique.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="address">collection and token id, encoded as ethereum address</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of TokenIdQuery</returns>
        public Network.Unique.API.Client.ApiResponse<TokenIdQuery> AddressUtilsControllerNestingAddressToCollectionWithHttpInfo(string address, int operationIndex = 0)
        {
            // verify the required parameter 'address' is set
            if (address == null)
            {
                throw new Network.Unique.API.Client.ApiException(400, "Missing required parameter 'address' when calling AddressUtilsApi->AddressUtilsControllerNestingAddressToCollection");
            }

            Network.Unique.API.Client.RequestOptions localVarRequestOptions = new Network.Unique.API.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Network.Unique.API.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Network.Unique.API.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(Network.Unique.API.Client.ClientUtils.ParameterToMultiMap("", "address", address));

            localVarRequestOptions.Operation = "AddressUtilsApi.AddressUtilsControllerNestingAddressToCollection";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Get<TokenIdQuery>("/v1/address-utils/nesting/address-to-ids", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AddressUtilsControllerNestingAddressToCollection", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Network.Unique.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="address">collection and token id, encoded as ethereum address</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of TokenIdQuery</returns>
        public async System.Threading.Tasks.Task<TokenIdQuery> AddressUtilsControllerNestingAddressToCollectionAsync(string address, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Network.Unique.API.Client.ApiResponse<TokenIdQuery> localVarResponse = await AddressUtilsControllerNestingAddressToCollectionWithHttpInfoAsync(address, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Network.Unique.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="address">collection and token id, encoded as ethereum address</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (TokenIdQuery)</returns>
        public async System.Threading.Tasks.Task<Network.Unique.API.Client.ApiResponse<TokenIdQuery>> AddressUtilsControllerNestingAddressToCollectionWithHttpInfoAsync(string address, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'address' is set
            if (address == null)
            {
                throw new Network.Unique.API.Client.ApiException(400, "Missing required parameter 'address' when calling AddressUtilsApi->AddressUtilsControllerNestingAddressToCollection");
            }


            Network.Unique.API.Client.RequestOptions localVarRequestOptions = new Network.Unique.API.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Network.Unique.API.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Network.Unique.API.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(Network.Unique.API.Client.ClientUtils.ParameterToMultiMap("", "address", address));

            localVarRequestOptions.Operation = "AddressUtilsApi.AddressUtilsControllerNestingAddressToCollection";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<TokenIdQuery>("/v1/address-utils/nesting/address-to-ids", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AddressUtilsControllerNestingAddressToCollection", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Network.Unique.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionId"></param>
        /// <param name="tokenId"></param>
        /// <param name="at">Hash of execution block (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>NestingAddressDto</returns>
        public NestingAddressDto AddressUtilsControllerNestingTokenIdToAddress(decimal collectionId, decimal tokenId, string at = default(string), int operationIndex = 0)
        {
            Network.Unique.API.Client.ApiResponse<NestingAddressDto> localVarResponse = AddressUtilsControllerNestingTokenIdToAddressWithHttpInfo(collectionId, tokenId, at);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Network.Unique.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionId"></param>
        /// <param name="tokenId"></param>
        /// <param name="at">Hash of execution block (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of NestingAddressDto</returns>
        public Network.Unique.API.Client.ApiResponse<NestingAddressDto> AddressUtilsControllerNestingTokenIdToAddressWithHttpInfo(decimal collectionId, decimal tokenId, string at = default(string), int operationIndex = 0)
        {
            Network.Unique.API.Client.RequestOptions localVarRequestOptions = new Network.Unique.API.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Network.Unique.API.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Network.Unique.API.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (at != null)
            {
                localVarRequestOptions.QueryParameters.Add(Network.Unique.API.Client.ClientUtils.ParameterToMultiMap("", "at", at));
            }
            localVarRequestOptions.QueryParameters.Add(Network.Unique.API.Client.ClientUtils.ParameterToMultiMap("", "collectionId", collectionId));
            localVarRequestOptions.QueryParameters.Add(Network.Unique.API.Client.ClientUtils.ParameterToMultiMap("", "tokenId", tokenId));

            localVarRequestOptions.Operation = "AddressUtilsApi.AddressUtilsControllerNestingTokenIdToAddress";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Get<NestingAddressDto>("/v1/address-utils/nesting/ids-to-address", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AddressUtilsControllerNestingTokenIdToAddress", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Network.Unique.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionId"></param>
        /// <param name="tokenId"></param>
        /// <param name="at">Hash of execution block (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of NestingAddressDto</returns>
        public async System.Threading.Tasks.Task<NestingAddressDto> AddressUtilsControllerNestingTokenIdToAddressAsync(decimal collectionId, decimal tokenId, string at = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Network.Unique.API.Client.ApiResponse<NestingAddressDto> localVarResponse = await AddressUtilsControllerNestingTokenIdToAddressWithHttpInfoAsync(collectionId, tokenId, at, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Network.Unique.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionId"></param>
        /// <param name="tokenId"></param>
        /// <param name="at">Hash of execution block (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (NestingAddressDto)</returns>
        public async System.Threading.Tasks.Task<Network.Unique.API.Client.ApiResponse<NestingAddressDto>> AddressUtilsControllerNestingTokenIdToAddressWithHttpInfoAsync(decimal collectionId, decimal tokenId, string at = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Network.Unique.API.Client.RequestOptions localVarRequestOptions = new Network.Unique.API.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Network.Unique.API.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Network.Unique.API.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (at != null)
            {
                localVarRequestOptions.QueryParameters.Add(Network.Unique.API.Client.ClientUtils.ParameterToMultiMap("", "at", at));
            }
            localVarRequestOptions.QueryParameters.Add(Network.Unique.API.Client.ClientUtils.ParameterToMultiMap("", "collectionId", collectionId));
            localVarRequestOptions.QueryParameters.Add(Network.Unique.API.Client.ClientUtils.ParameterToMultiMap("", "tokenId", tokenId));

            localVarRequestOptions.Operation = "AddressUtilsApi.AddressUtilsControllerNestingTokenIdToAddress";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<NestingAddressDto>("/v1/address-utils/nesting/ids-to-address", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AddressUtilsControllerNestingTokenIdToAddress", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Network.Unique.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="address">The ss-58 encoded address</param>
        /// <param name="ss58prefix"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>AddressDto</returns>
        public AddressDto AddressUtilsControllerNormalize(string address, decimal? ss58prefix = default(decimal?), int operationIndex = 0)
        {
            Network.Unique.API.Client.ApiResponse<AddressDto> localVarResponse = AddressUtilsControllerNormalizeWithHttpInfo(address, ss58prefix);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Network.Unique.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="address">The ss-58 encoded address</param>
        /// <param name="ss58prefix"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of AddressDto</returns>
        public Network.Unique.API.Client.ApiResponse<AddressDto> AddressUtilsControllerNormalizeWithHttpInfo(string address, decimal? ss58prefix = default(decimal?), int operationIndex = 0)
        {
            // verify the required parameter 'address' is set
            if (address == null)
            {
                throw new Network.Unique.API.Client.ApiException(400, "Missing required parameter 'address' when calling AddressUtilsApi->AddressUtilsControllerNormalize");
            }

            Network.Unique.API.Client.RequestOptions localVarRequestOptions = new Network.Unique.API.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Network.Unique.API.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Network.Unique.API.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(Network.Unique.API.Client.ClientUtils.ParameterToMultiMap("", "address", address));
            if (ss58prefix != null)
            {
                localVarRequestOptions.QueryParameters.Add(Network.Unique.API.Client.ClientUtils.ParameterToMultiMap("", "ss58prefix", ss58prefix));
            }

            localVarRequestOptions.Operation = "AddressUtilsApi.AddressUtilsControllerNormalize";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Get<AddressDto>("/v1/address-utils/normalize", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AddressUtilsControllerNormalize", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Network.Unique.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="address">The ss-58 encoded address</param>
        /// <param name="ss58prefix"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of AddressDto</returns>
        public async System.Threading.Tasks.Task<AddressDto> AddressUtilsControllerNormalizeAsync(string address, decimal? ss58prefix = default(decimal?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Network.Unique.API.Client.ApiResponse<AddressDto> localVarResponse = await AddressUtilsControllerNormalizeWithHttpInfoAsync(address, ss58prefix, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Network.Unique.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="address">The ss-58 encoded address</param>
        /// <param name="ss58prefix"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (AddressDto)</returns>
        public async System.Threading.Tasks.Task<Network.Unique.API.Client.ApiResponse<AddressDto>> AddressUtilsControllerNormalizeWithHttpInfoAsync(string address, decimal? ss58prefix = default(decimal?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'address' is set
            if (address == null)
            {
                throw new Network.Unique.API.Client.ApiException(400, "Missing required parameter 'address' when calling AddressUtilsApi->AddressUtilsControllerNormalize");
            }


            Network.Unique.API.Client.RequestOptions localVarRequestOptions = new Network.Unique.API.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Network.Unique.API.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Network.Unique.API.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(Network.Unique.API.Client.ClientUtils.ParameterToMultiMap("", "address", address));
            if (ss58prefix != null)
            {
                localVarRequestOptions.QueryParameters.Add(Network.Unique.API.Client.ClientUtils.ParameterToMultiMap("", "ss58prefix", ss58prefix));
            }

            localVarRequestOptions.Operation = "AddressUtilsApi.AddressUtilsControllerNormalize";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<AddressDto>("/v1/address-utils/normalize", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AddressUtilsControllerNormalize", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Network.Unique.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="address">The ss-58 encoded address</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>EthereumAddressDto</returns>
        public EthereumAddressDto AddressUtilsControllerSubstrateToEthereum(string address, int operationIndex = 0)
        {
            Network.Unique.API.Client.ApiResponse<EthereumAddressDto> localVarResponse = AddressUtilsControllerSubstrateToEthereumWithHttpInfo(address);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Network.Unique.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="address">The ss-58 encoded address</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of EthereumAddressDto</returns>
        public Network.Unique.API.Client.ApiResponse<EthereumAddressDto> AddressUtilsControllerSubstrateToEthereumWithHttpInfo(string address, int operationIndex = 0)
        {
            // verify the required parameter 'address' is set
            if (address == null)
            {
                throw new Network.Unique.API.Client.ApiException(400, "Missing required parameter 'address' when calling AddressUtilsApi->AddressUtilsControllerSubstrateToEthereum");
            }

            Network.Unique.API.Client.RequestOptions localVarRequestOptions = new Network.Unique.API.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Network.Unique.API.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Network.Unique.API.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(Network.Unique.API.Client.ClientUtils.ParameterToMultiMap("", "address", address));

            localVarRequestOptions.Operation = "AddressUtilsApi.AddressUtilsControllerSubstrateToEthereum";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Get<EthereumAddressDto>("/v1/address-utils/mirror/substrate-to-ethereum", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AddressUtilsControllerSubstrateToEthereum", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Network.Unique.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="address">The ss-58 encoded address</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of EthereumAddressDto</returns>
        public async System.Threading.Tasks.Task<EthereumAddressDto> AddressUtilsControllerSubstrateToEthereumAsync(string address, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Network.Unique.API.Client.ApiResponse<EthereumAddressDto> localVarResponse = await AddressUtilsControllerSubstrateToEthereumWithHttpInfoAsync(address, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Network.Unique.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="address">The ss-58 encoded address</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (EthereumAddressDto)</returns>
        public async System.Threading.Tasks.Task<Network.Unique.API.Client.ApiResponse<EthereumAddressDto>> AddressUtilsControllerSubstrateToEthereumWithHttpInfoAsync(string address, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'address' is set
            if (address == null)
            {
                throw new Network.Unique.API.Client.ApiException(400, "Missing required parameter 'address' when calling AddressUtilsApi->AddressUtilsControllerSubstrateToEthereum");
            }


            Network.Unique.API.Client.RequestOptions localVarRequestOptions = new Network.Unique.API.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Network.Unique.API.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Network.Unique.API.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(Network.Unique.API.Client.ClientUtils.ParameterToMultiMap("", "address", address));

            localVarRequestOptions.Operation = "AddressUtilsApi.AddressUtilsControllerSubstrateToEthereum";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<EthereumAddressDto>("/v1/address-utils/mirror/substrate-to-ethereum", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AddressUtilsControllerSubstrateToEthereum", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

    }
}
