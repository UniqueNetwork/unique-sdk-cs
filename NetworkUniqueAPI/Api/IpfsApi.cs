/*
 * Unique SDK
 *
 * Unique SDK HTTP API  <b>Main connection to wss://ws-opal.unique.network (<a target=\"_blank\" href=\"https://polkadot.js.org/apps/?rpc=wss://ws-opal.unique.network\">apps ↗</a>)</b>  Secondary substrate connection to wss://ws-relay-bench.unique.network  (<a target=\"_blank\" href=\"https://polkadot.js.org/apps/?rpc=wss://ws-relay-bench.unique.network\">apps ↗</a>). Go to <a href=\"/relay/swagger\">/relay/swagger</a>  Consumable OpenAPI specification - (<a target=\"_blank\" href=\"/swagger-json\">JSON ↗</a>) (<a target=\"_blank\" href=\"/swagger-yaml\">YAML ↗</a>)
 *
 * The version of the OpenAPI document: 0.6.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using Network.Unique.API.Client;
using Network.Unique.API.Model;

namespace Network.Unique.API.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IIpfsApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="Network.Unique.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="files"> (optional)</param>
        /// <param name="cid"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>IpfsUploadResponse</returns>
        IpfsUploadResponse IpfsControllerAddFiles(List<System.IO.Stream> files = default(List<System.IO.Stream>), string cid = default(string), int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Network.Unique.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="files"> (optional)</param>
        /// <param name="cid"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of IpfsUploadResponse</returns>
        ApiResponse<IpfsUploadResponse> IpfsControllerAddFilesWithHttpInfo(List<System.IO.Stream> files = default(List<System.IO.Stream>), string cid = default(string), int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="Network.Unique.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="file"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>IpfsUploadResponse</returns>
        IpfsUploadResponse IpfsControllerUploadFile(System.IO.Stream file = default(System.IO.Stream), int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Network.Unique.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="file"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of IpfsUploadResponse</returns>
        ApiResponse<IpfsUploadResponse> IpfsControllerUploadFileWithHttpInfo(System.IO.Stream file = default(System.IO.Stream), int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="Network.Unique.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="files"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>IpfsUploadResponse</returns>
        IpfsUploadResponse IpfsControllerUploadFiles(List<System.IO.Stream> files = default(List<System.IO.Stream>), int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Network.Unique.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="files"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of IpfsUploadResponse</returns>
        ApiResponse<IpfsUploadResponse> IpfsControllerUploadFilesWithHttpInfo(List<System.IO.Stream> files = default(List<System.IO.Stream>), int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="Network.Unique.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="file"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>IpfsUploadResponse</returns>
        [Obsolete]
        IpfsUploadResponse IpfsControllerUploadZip(System.IO.Stream file = default(System.IO.Stream), int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Network.Unique.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="file"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of IpfsUploadResponse</returns>
        [Obsolete]
        ApiResponse<IpfsUploadResponse> IpfsControllerUploadZipWithHttpInfo(System.IO.Stream file = default(System.IO.Stream), int operationIndex = 0);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IIpfsApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Network.Unique.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="files"> (optional)</param>
        /// <param name="cid"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of IpfsUploadResponse</returns>
        System.Threading.Tasks.Task<IpfsUploadResponse> IpfsControllerAddFilesAsync(List<System.IO.Stream> files = default(List<System.IO.Stream>), string cid = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Network.Unique.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="files"> (optional)</param>
        /// <param name="cid"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (IpfsUploadResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<IpfsUploadResponse>> IpfsControllerAddFilesWithHttpInfoAsync(List<System.IO.Stream> files = default(List<System.IO.Stream>), string cid = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Network.Unique.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="file"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of IpfsUploadResponse</returns>
        System.Threading.Tasks.Task<IpfsUploadResponse> IpfsControllerUploadFileAsync(System.IO.Stream file = default(System.IO.Stream), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Network.Unique.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="file"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (IpfsUploadResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<IpfsUploadResponse>> IpfsControllerUploadFileWithHttpInfoAsync(System.IO.Stream file = default(System.IO.Stream), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Network.Unique.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="files"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of IpfsUploadResponse</returns>
        System.Threading.Tasks.Task<IpfsUploadResponse> IpfsControllerUploadFilesAsync(List<System.IO.Stream> files = default(List<System.IO.Stream>), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Network.Unique.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="files"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (IpfsUploadResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<IpfsUploadResponse>> IpfsControllerUploadFilesWithHttpInfoAsync(List<System.IO.Stream> files = default(List<System.IO.Stream>), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Network.Unique.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="file"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of IpfsUploadResponse</returns>
        [Obsolete]
        System.Threading.Tasks.Task<IpfsUploadResponse> IpfsControllerUploadZipAsync(System.IO.Stream file = default(System.IO.Stream), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Network.Unique.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="file"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (IpfsUploadResponse)</returns>
        [Obsolete]
        System.Threading.Tasks.Task<ApiResponse<IpfsUploadResponse>> IpfsControllerUploadZipWithHttpInfoAsync(System.IO.Stream file = default(System.IO.Stream), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IIpfsApi : IIpfsApiSync, IIpfsApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class IpfsApi : IIpfsApi
    {
        private Network.Unique.API.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="IpfsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public IpfsApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="IpfsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public IpfsApi(string basePath)
        {
            this.Configuration = Network.Unique.API.Client.Configuration.MergeConfigurations(
                Network.Unique.API.Client.GlobalConfiguration.Instance,
                new Network.Unique.API.Client.Configuration { BasePath = basePath }
            );
            this.Client = new Network.Unique.API.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Network.Unique.API.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = Network.Unique.API.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="IpfsApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public IpfsApi(Network.Unique.API.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = Network.Unique.API.Client.Configuration.MergeConfigurations(
                Network.Unique.API.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new Network.Unique.API.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Network.Unique.API.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = Network.Unique.API.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="IpfsApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public IpfsApi(Network.Unique.API.Client.ISynchronousClient client, Network.Unique.API.Client.IAsynchronousClient asyncClient, Network.Unique.API.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = Network.Unique.API.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public Network.Unique.API.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public Network.Unique.API.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Network.Unique.API.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Network.Unique.API.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Network.Unique.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="files"> (optional)</param>
        /// <param name="cid"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>IpfsUploadResponse</returns>
        public IpfsUploadResponse IpfsControllerAddFiles(List<System.IO.Stream> files = default(List<System.IO.Stream>), string cid = default(string), int operationIndex = 0)
        {
            Network.Unique.API.Client.ApiResponse<IpfsUploadResponse> localVarResponse = IpfsControllerAddFilesWithHttpInfo(files, cid);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Network.Unique.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="files"> (optional)</param>
        /// <param name="cid"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of IpfsUploadResponse</returns>
        public Network.Unique.API.Client.ApiResponse<IpfsUploadResponse> IpfsControllerAddFilesWithHttpInfo(List<System.IO.Stream> files = default(List<System.IO.Stream>), string cid = default(string), int operationIndex = 0)
        {
            Network.Unique.API.Client.RequestOptions localVarRequestOptions = new Network.Unique.API.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "multipart/form-data"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Network.Unique.API.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Network.Unique.API.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (files != null)
            {
                foreach (var file in files)
                {
                    localVarRequestOptions.FileParameters.Add("files", file);
                }
            }
            if (cid != null)
            {
                localVarRequestOptions.FormParameters.Add("cid", Network.Unique.API.Client.ClientUtils.ParameterToString(cid)); // form parameter
            }

            localVarRequestOptions.Operation = "IpfsApi.IpfsControllerAddFiles";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Patch<IpfsUploadResponse>("/v1/ipfs/add-files", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("IpfsControllerAddFiles", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Network.Unique.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="files"> (optional)</param>
        /// <param name="cid"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of IpfsUploadResponse</returns>
        public async System.Threading.Tasks.Task<IpfsUploadResponse> IpfsControllerAddFilesAsync(List<System.IO.Stream> files = default(List<System.IO.Stream>), string cid = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Network.Unique.API.Client.ApiResponse<IpfsUploadResponse> localVarResponse = await IpfsControllerAddFilesWithHttpInfoAsync(files, cid, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Network.Unique.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="files"> (optional)</param>
        /// <param name="cid"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (IpfsUploadResponse)</returns>
        public async System.Threading.Tasks.Task<Network.Unique.API.Client.ApiResponse<IpfsUploadResponse>> IpfsControllerAddFilesWithHttpInfoAsync(List<System.IO.Stream> files = default(List<System.IO.Stream>), string cid = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Network.Unique.API.Client.RequestOptions localVarRequestOptions = new Network.Unique.API.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "multipart/form-data"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Network.Unique.API.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Network.Unique.API.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (files != null)
            {
                foreach (var file in files)
                {
                    localVarRequestOptions.FileParameters.Add("files", file);
                }
            }
            if (cid != null)
            {
                localVarRequestOptions.FormParameters.Add("cid", Network.Unique.API.Client.ClientUtils.ParameterToString(cid)); // form parameter
            }

            localVarRequestOptions.Operation = "IpfsApi.IpfsControllerAddFiles";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PatchAsync<IpfsUploadResponse>("/v1/ipfs/add-files", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("IpfsControllerAddFiles", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Network.Unique.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="file"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>IpfsUploadResponse</returns>
        public IpfsUploadResponse IpfsControllerUploadFile(System.IO.Stream file = default(System.IO.Stream), int operationIndex = 0)
        {
            Network.Unique.API.Client.ApiResponse<IpfsUploadResponse> localVarResponse = IpfsControllerUploadFileWithHttpInfo(file);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Network.Unique.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="file"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of IpfsUploadResponse</returns>
        public Network.Unique.API.Client.ApiResponse<IpfsUploadResponse> IpfsControllerUploadFileWithHttpInfo(System.IO.Stream file = default(System.IO.Stream), int operationIndex = 0)
        {
            Network.Unique.API.Client.RequestOptions localVarRequestOptions = new Network.Unique.API.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "multipart/form-data"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Network.Unique.API.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Network.Unique.API.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (file != null)
            {
                localVarRequestOptions.FileParameters.Add("file", file);
            }

            localVarRequestOptions.Operation = "IpfsApi.IpfsControllerUploadFile";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Post<IpfsUploadResponse>("/v1/ipfs/upload-file", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("IpfsControllerUploadFile", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Network.Unique.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="file"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of IpfsUploadResponse</returns>
        public async System.Threading.Tasks.Task<IpfsUploadResponse> IpfsControllerUploadFileAsync(System.IO.Stream file = default(System.IO.Stream), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Network.Unique.API.Client.ApiResponse<IpfsUploadResponse> localVarResponse = await IpfsControllerUploadFileWithHttpInfoAsync(file, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Network.Unique.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="file"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (IpfsUploadResponse)</returns>
        public async System.Threading.Tasks.Task<Network.Unique.API.Client.ApiResponse<IpfsUploadResponse>> IpfsControllerUploadFileWithHttpInfoAsync(System.IO.Stream file = default(System.IO.Stream), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Network.Unique.API.Client.RequestOptions localVarRequestOptions = new Network.Unique.API.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "multipart/form-data"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Network.Unique.API.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Network.Unique.API.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (file != null)
            {
                localVarRequestOptions.FileParameters.Add("file", file);
            }

            localVarRequestOptions.Operation = "IpfsApi.IpfsControllerUploadFile";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<IpfsUploadResponse>("/v1/ipfs/upload-file", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("IpfsControllerUploadFile", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Network.Unique.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="files"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>IpfsUploadResponse</returns>
        public IpfsUploadResponse IpfsControllerUploadFiles(List<System.IO.Stream> files = default(List<System.IO.Stream>), int operationIndex = 0)
        {
            Network.Unique.API.Client.ApiResponse<IpfsUploadResponse> localVarResponse = IpfsControllerUploadFilesWithHttpInfo(files);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Network.Unique.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="files"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of IpfsUploadResponse</returns>
        public Network.Unique.API.Client.ApiResponse<IpfsUploadResponse> IpfsControllerUploadFilesWithHttpInfo(List<System.IO.Stream> files = default(List<System.IO.Stream>), int operationIndex = 0)
        {
            Network.Unique.API.Client.RequestOptions localVarRequestOptions = new Network.Unique.API.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "multipart/form-data"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Network.Unique.API.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Network.Unique.API.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (files != null)
            {
                foreach (var file in files)
                {
                    localVarRequestOptions.FileParameters.Add("files", file);
                }
            }

            localVarRequestOptions.Operation = "IpfsApi.IpfsControllerUploadFiles";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Post<IpfsUploadResponse>("/v1/ipfs/upload-files", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("IpfsControllerUploadFiles", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Network.Unique.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="files"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of IpfsUploadResponse</returns>
        public async System.Threading.Tasks.Task<IpfsUploadResponse> IpfsControllerUploadFilesAsync(List<System.IO.Stream> files = default(List<System.IO.Stream>), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Network.Unique.API.Client.ApiResponse<IpfsUploadResponse> localVarResponse = await IpfsControllerUploadFilesWithHttpInfoAsync(files, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Network.Unique.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="files"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (IpfsUploadResponse)</returns>
        public async System.Threading.Tasks.Task<Network.Unique.API.Client.ApiResponse<IpfsUploadResponse>> IpfsControllerUploadFilesWithHttpInfoAsync(List<System.IO.Stream> files = default(List<System.IO.Stream>), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Network.Unique.API.Client.RequestOptions localVarRequestOptions = new Network.Unique.API.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "multipart/form-data"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Network.Unique.API.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Network.Unique.API.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (files != null)
            {
                foreach (var file in files)
                {
                    localVarRequestOptions.FileParameters.Add("files", file);
                }
            }

            localVarRequestOptions.Operation = "IpfsApi.IpfsControllerUploadFiles";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<IpfsUploadResponse>("/v1/ipfs/upload-files", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("IpfsControllerUploadFiles", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Network.Unique.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="file"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>IpfsUploadResponse</returns>
        [Obsolete]
        public IpfsUploadResponse IpfsControllerUploadZip(System.IO.Stream file = default(System.IO.Stream), int operationIndex = 0)
        {
            Network.Unique.API.Client.ApiResponse<IpfsUploadResponse> localVarResponse = IpfsControllerUploadZipWithHttpInfo(file);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Network.Unique.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="file"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of IpfsUploadResponse</returns>
        [Obsolete]
        public Network.Unique.API.Client.ApiResponse<IpfsUploadResponse> IpfsControllerUploadZipWithHttpInfo(System.IO.Stream file = default(System.IO.Stream), int operationIndex = 0)
        {
            Network.Unique.API.Client.RequestOptions localVarRequestOptions = new Network.Unique.API.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "multipart/form-data"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Network.Unique.API.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Network.Unique.API.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (file != null)
            {
                localVarRequestOptions.FileParameters.Add("file", file);
            }

            localVarRequestOptions.Operation = "IpfsApi.IpfsControllerUploadZip";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Post<IpfsUploadResponse>("/v1/ipfs/upload-zip", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("IpfsControllerUploadZip", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Network.Unique.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="file"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of IpfsUploadResponse</returns>
        [Obsolete]
        public async System.Threading.Tasks.Task<IpfsUploadResponse> IpfsControllerUploadZipAsync(System.IO.Stream file = default(System.IO.Stream), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Network.Unique.API.Client.ApiResponse<IpfsUploadResponse> localVarResponse = await IpfsControllerUploadZipWithHttpInfoAsync(file, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Network.Unique.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="file"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (IpfsUploadResponse)</returns>
        [Obsolete]
        public async System.Threading.Tasks.Task<Network.Unique.API.Client.ApiResponse<IpfsUploadResponse>> IpfsControllerUploadZipWithHttpInfoAsync(System.IO.Stream file = default(System.IO.Stream), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Network.Unique.API.Client.RequestOptions localVarRequestOptions = new Network.Unique.API.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "multipart/form-data"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Network.Unique.API.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Network.Unique.API.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (file != null)
            {
                localVarRequestOptions.FileParameters.Add("file", file);
            }

            localVarRequestOptions.Operation = "IpfsApi.IpfsControllerUploadZip";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<IpfsUploadResponse>("/v1/ipfs/upload-zip", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("IpfsControllerUploadZip", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

    }
}
