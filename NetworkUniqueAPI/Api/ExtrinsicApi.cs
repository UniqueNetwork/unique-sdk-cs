/*
 * Unique SDK
 *
 * Unique SDK HTTP API  <b>Main connection to wss://ws-opal.unique.network (<a target=\"_blank\" href=\"https://polkadot.js.org/apps/?rpc=wss://ws-opal.unique.network\">apps ↗</a>)</b>  Secondary substrate connection to wss://ws-relay-bench.unique.network  (<a target=\"_blank\" href=\"https://polkadot.js.org/apps/?rpc=wss://ws-relay-bench.unique.network\">apps ↗</a>). Go to <a href=\"/relay/swagger\">/relay/swagger</a>  Consumable OpenAPI specification - (<a target=\"_blank\" href=\"/swagger-json\">JSON ↗</a>) (<a target=\"_blank\" href=\"/swagger-yaml\">YAML ↗</a>)
 *
 * The version of the OpenAPI document: 0.6.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using Network.Unique.API.Client;
using Network.Unique.API.Model;

namespace Network.Unique.API.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IExtrinsicApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="Network.Unique.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="txBuildBody"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>UnsignedTxPayloadResponse</returns>
        UnsignedTxPayloadResponse ExtrinsicsControllerBuildTx(TxBuildBody txBuildBody, int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Network.Unique.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="txBuildBody"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of UnsignedTxPayloadResponse</returns>
        ApiResponse<UnsignedTxPayloadResponse> ExtrinsicsControllerBuildTxWithHttpInfo(TxBuildBody txBuildBody, int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="Network.Unique.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="extrinsicsControllerCalculateFeeRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>FeeResponse</returns>
        FeeResponse ExtrinsicsControllerCalculateFee(ExtrinsicsControllerCalculateFeeRequest extrinsicsControllerCalculateFeeRequest, int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Network.Unique.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="extrinsicsControllerCalculateFeeRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of FeeResponse</returns>
        ApiResponse<FeeResponse> ExtrinsicsControllerCalculateFeeWithHttpInfo(ExtrinsicsControllerCalculateFeeRequest extrinsicsControllerCalculateFeeRequest, int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="Network.Unique.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="blockHashOrNumber"></param>
        /// <param name="extrinsicHash"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>GetExtrinsicResponse</returns>
        GetExtrinsicResponse ExtrinsicsControllerGet(string blockHashOrNumber, string extrinsicHash, int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Network.Unique.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="blockHashOrNumber"></param>
        /// <param name="extrinsicHash"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of GetExtrinsicResponse</returns>
        ApiResponse<GetExtrinsicResponse> ExtrinsicsControllerGetWithHttpInfo(string blockHashOrNumber, string extrinsicHash, int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="Network.Unique.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="hash"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ExtrinsicResultResponse</returns>
        ExtrinsicResultResponse ExtrinsicsControllerGetStatus(string hash, int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Network.Unique.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="hash"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ExtrinsicResultResponse</returns>
        ApiResponse<ExtrinsicResultResponse> ExtrinsicsControllerGetStatusWithHttpInfo(string hash, int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Use the Authorization request header to provide authentication information &lt;ul&gt; &lt;li&gt;&lt;code&gt;Authorization: Seed &amp;lt;your mnemonic phrase | uri name&amp;gt;&lt;/code&gt;&lt;/li&gt; &lt;/ul&gt;
        /// </remarks>
        /// <exception cref="Network.Unique.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="unsignedTxPayloadBody"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>SignTxResultResponse</returns>
        SignTxResultResponse ExtrinsicsControllerSign(UnsignedTxPayloadBody unsignedTxPayloadBody, int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Use the Authorization request header to provide authentication information &lt;ul&gt; &lt;li&gt;&lt;code&gt;Authorization: Seed &amp;lt;your mnemonic phrase | uri name&amp;gt;&lt;/code&gt;&lt;/li&gt; &lt;/ul&gt;
        /// </remarks>
        /// <exception cref="Network.Unique.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="unsignedTxPayloadBody"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of SignTxResultResponse</returns>
        ApiResponse<SignTxResultResponse> ExtrinsicsControllerSignWithHttpInfo(UnsignedTxPayloadBody unsignedTxPayloadBody, int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="Network.Unique.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="submitTxBody"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>SubmitResultResponse</returns>
        SubmitResultResponse ExtrinsicsControllerSubmitTx(SubmitTxBody submitTxBody, int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Network.Unique.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="submitTxBody"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of SubmitResultResponse</returns>
        ApiResponse<SubmitResultResponse> ExtrinsicsControllerSubmitTxWithHttpInfo(SubmitTxBody submitTxBody, int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="Network.Unique.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="submitTxBody"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>VerificationResultResponse</returns>
        VerificationResultResponse ExtrinsicsControllerVerifySign(SubmitTxBody submitTxBody, int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Network.Unique.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="submitTxBody"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of VerificationResultResponse</returns>
        ApiResponse<VerificationResultResponse> ExtrinsicsControllerVerifySignWithHttpInfo(SubmitTxBody submitTxBody, int operationIndex = 0);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IExtrinsicApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Network.Unique.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="txBuildBody"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of UnsignedTxPayloadResponse</returns>
        System.Threading.Tasks.Task<UnsignedTxPayloadResponse> ExtrinsicsControllerBuildTxAsync(TxBuildBody txBuildBody, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Network.Unique.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="txBuildBody"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (UnsignedTxPayloadResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<UnsignedTxPayloadResponse>> ExtrinsicsControllerBuildTxWithHttpInfoAsync(TxBuildBody txBuildBody, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Network.Unique.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="extrinsicsControllerCalculateFeeRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of FeeResponse</returns>
        System.Threading.Tasks.Task<FeeResponse> ExtrinsicsControllerCalculateFeeAsync(ExtrinsicsControllerCalculateFeeRequest extrinsicsControllerCalculateFeeRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Network.Unique.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="extrinsicsControllerCalculateFeeRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (FeeResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<FeeResponse>> ExtrinsicsControllerCalculateFeeWithHttpInfoAsync(ExtrinsicsControllerCalculateFeeRequest extrinsicsControllerCalculateFeeRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Network.Unique.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="blockHashOrNumber"></param>
        /// <param name="extrinsicHash"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GetExtrinsicResponse</returns>
        System.Threading.Tasks.Task<GetExtrinsicResponse> ExtrinsicsControllerGetAsync(string blockHashOrNumber, string extrinsicHash, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Network.Unique.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="blockHashOrNumber"></param>
        /// <param name="extrinsicHash"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GetExtrinsicResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetExtrinsicResponse>> ExtrinsicsControllerGetWithHttpInfoAsync(string blockHashOrNumber, string extrinsicHash, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Network.Unique.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="hash"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ExtrinsicResultResponse</returns>
        System.Threading.Tasks.Task<ExtrinsicResultResponse> ExtrinsicsControllerGetStatusAsync(string hash, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Network.Unique.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="hash"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ExtrinsicResultResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ExtrinsicResultResponse>> ExtrinsicsControllerGetStatusWithHttpInfoAsync(string hash, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Use the Authorization request header to provide authentication information &lt;ul&gt; &lt;li&gt;&lt;code&gt;Authorization: Seed &amp;lt;your mnemonic phrase | uri name&amp;gt;&lt;/code&gt;&lt;/li&gt; &lt;/ul&gt;
        /// </remarks>
        /// <exception cref="Network.Unique.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="unsignedTxPayloadBody"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SignTxResultResponse</returns>
        System.Threading.Tasks.Task<SignTxResultResponse> ExtrinsicsControllerSignAsync(UnsignedTxPayloadBody unsignedTxPayloadBody, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Use the Authorization request header to provide authentication information &lt;ul&gt; &lt;li&gt;&lt;code&gt;Authorization: Seed &amp;lt;your mnemonic phrase | uri name&amp;gt;&lt;/code&gt;&lt;/li&gt; &lt;/ul&gt;
        /// </remarks>
        /// <exception cref="Network.Unique.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="unsignedTxPayloadBody"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SignTxResultResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<SignTxResultResponse>> ExtrinsicsControllerSignWithHttpInfoAsync(UnsignedTxPayloadBody unsignedTxPayloadBody, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Network.Unique.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="submitTxBody"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SubmitResultResponse</returns>
        System.Threading.Tasks.Task<SubmitResultResponse> ExtrinsicsControllerSubmitTxAsync(SubmitTxBody submitTxBody, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Network.Unique.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="submitTxBody"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SubmitResultResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<SubmitResultResponse>> ExtrinsicsControllerSubmitTxWithHttpInfoAsync(SubmitTxBody submitTxBody, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Network.Unique.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="submitTxBody"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of VerificationResultResponse</returns>
        System.Threading.Tasks.Task<VerificationResultResponse> ExtrinsicsControllerVerifySignAsync(SubmitTxBody submitTxBody, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Network.Unique.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="submitTxBody"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (VerificationResultResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<VerificationResultResponse>> ExtrinsicsControllerVerifySignWithHttpInfoAsync(SubmitTxBody submitTxBody, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IExtrinsicApi : IExtrinsicApiSync, IExtrinsicApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class ExtrinsicApi : IExtrinsicApi
    {
        private Network.Unique.API.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="ExtrinsicApi"/> class.
        /// </summary>
        /// <returns></returns>
        public ExtrinsicApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ExtrinsicApi"/> class.
        /// </summary>
        /// <returns></returns>
        public ExtrinsicApi(string basePath)
        {
            this.Configuration = Network.Unique.API.Client.Configuration.MergeConfigurations(
                Network.Unique.API.Client.GlobalConfiguration.Instance,
                new Network.Unique.API.Client.Configuration { BasePath = basePath }
            );
            this.Client = new Network.Unique.API.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Network.Unique.API.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = Network.Unique.API.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ExtrinsicApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public ExtrinsicApi(Network.Unique.API.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = Network.Unique.API.Client.Configuration.MergeConfigurations(
                Network.Unique.API.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new Network.Unique.API.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Network.Unique.API.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = Network.Unique.API.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ExtrinsicApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public ExtrinsicApi(Network.Unique.API.Client.ISynchronousClient client, Network.Unique.API.Client.IAsynchronousClient asyncClient, Network.Unique.API.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = Network.Unique.API.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public Network.Unique.API.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public Network.Unique.API.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Network.Unique.API.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Network.Unique.API.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Network.Unique.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="txBuildBody"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>UnsignedTxPayloadResponse</returns>
        public UnsignedTxPayloadResponse ExtrinsicsControllerBuildTx(TxBuildBody txBuildBody, int operationIndex = 0)
        {
            Network.Unique.API.Client.ApiResponse<UnsignedTxPayloadResponse> localVarResponse = ExtrinsicsControllerBuildTxWithHttpInfo(txBuildBody);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Network.Unique.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="txBuildBody"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of UnsignedTxPayloadResponse</returns>
        public Network.Unique.API.Client.ApiResponse<UnsignedTxPayloadResponse> ExtrinsicsControllerBuildTxWithHttpInfo(TxBuildBody txBuildBody, int operationIndex = 0)
        {
            // verify the required parameter 'txBuildBody' is set
            if (txBuildBody == null)
            {
                throw new Network.Unique.API.Client.ApiException(400, "Missing required parameter 'txBuildBody' when calling ExtrinsicApi->ExtrinsicsControllerBuildTx");
            }

            Network.Unique.API.Client.RequestOptions localVarRequestOptions = new Network.Unique.API.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Network.Unique.API.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Network.Unique.API.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = txBuildBody;

            localVarRequestOptions.Operation = "ExtrinsicApi.ExtrinsicsControllerBuildTx";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Post<UnsignedTxPayloadResponse>("/v1/extrinsic/build", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ExtrinsicsControllerBuildTx", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Network.Unique.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="txBuildBody"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of UnsignedTxPayloadResponse</returns>
        public async System.Threading.Tasks.Task<UnsignedTxPayloadResponse> ExtrinsicsControllerBuildTxAsync(TxBuildBody txBuildBody, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Network.Unique.API.Client.ApiResponse<UnsignedTxPayloadResponse> localVarResponse = await ExtrinsicsControllerBuildTxWithHttpInfoAsync(txBuildBody, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Network.Unique.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="txBuildBody"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (UnsignedTxPayloadResponse)</returns>
        public async System.Threading.Tasks.Task<Network.Unique.API.Client.ApiResponse<UnsignedTxPayloadResponse>> ExtrinsicsControllerBuildTxWithHttpInfoAsync(TxBuildBody txBuildBody, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'txBuildBody' is set
            if (txBuildBody == null)
            {
                throw new Network.Unique.API.Client.ApiException(400, "Missing required parameter 'txBuildBody' when calling ExtrinsicApi->ExtrinsicsControllerBuildTx");
            }


            Network.Unique.API.Client.RequestOptions localVarRequestOptions = new Network.Unique.API.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Network.Unique.API.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Network.Unique.API.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = txBuildBody;

            localVarRequestOptions.Operation = "ExtrinsicApi.ExtrinsicsControllerBuildTx";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<UnsignedTxPayloadResponse>("/v1/extrinsic/build", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ExtrinsicsControllerBuildTx", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Network.Unique.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="extrinsicsControllerCalculateFeeRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>FeeResponse</returns>
        public FeeResponse ExtrinsicsControllerCalculateFee(ExtrinsicsControllerCalculateFeeRequest extrinsicsControllerCalculateFeeRequest, int operationIndex = 0)
        {
            Network.Unique.API.Client.ApiResponse<FeeResponse> localVarResponse = ExtrinsicsControllerCalculateFeeWithHttpInfo(extrinsicsControllerCalculateFeeRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Network.Unique.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="extrinsicsControllerCalculateFeeRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of FeeResponse</returns>
        public Network.Unique.API.Client.ApiResponse<FeeResponse> ExtrinsicsControllerCalculateFeeWithHttpInfo(ExtrinsicsControllerCalculateFeeRequest extrinsicsControllerCalculateFeeRequest, int operationIndex = 0)
        {
            // verify the required parameter 'extrinsicsControllerCalculateFeeRequest' is set
            if (extrinsicsControllerCalculateFeeRequest == null)
            {
                throw new Network.Unique.API.Client.ApiException(400, "Missing required parameter 'extrinsicsControllerCalculateFeeRequest' when calling ExtrinsicApi->ExtrinsicsControllerCalculateFee");
            }

            Network.Unique.API.Client.RequestOptions localVarRequestOptions = new Network.Unique.API.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Network.Unique.API.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Network.Unique.API.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = extrinsicsControllerCalculateFeeRequest;

            localVarRequestOptions.Operation = "ExtrinsicApi.ExtrinsicsControllerCalculateFee";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Post<FeeResponse>("/v1/extrinsic/calculate-fee", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ExtrinsicsControllerCalculateFee", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Network.Unique.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="extrinsicsControllerCalculateFeeRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of FeeResponse</returns>
        public async System.Threading.Tasks.Task<FeeResponse> ExtrinsicsControllerCalculateFeeAsync(ExtrinsicsControllerCalculateFeeRequest extrinsicsControllerCalculateFeeRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Network.Unique.API.Client.ApiResponse<FeeResponse> localVarResponse = await ExtrinsicsControllerCalculateFeeWithHttpInfoAsync(extrinsicsControllerCalculateFeeRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Network.Unique.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="extrinsicsControllerCalculateFeeRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (FeeResponse)</returns>
        public async System.Threading.Tasks.Task<Network.Unique.API.Client.ApiResponse<FeeResponse>> ExtrinsicsControllerCalculateFeeWithHttpInfoAsync(ExtrinsicsControllerCalculateFeeRequest extrinsicsControllerCalculateFeeRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'extrinsicsControllerCalculateFeeRequest' is set
            if (extrinsicsControllerCalculateFeeRequest == null)
            {
                throw new Network.Unique.API.Client.ApiException(400, "Missing required parameter 'extrinsicsControllerCalculateFeeRequest' when calling ExtrinsicApi->ExtrinsicsControllerCalculateFee");
            }


            Network.Unique.API.Client.RequestOptions localVarRequestOptions = new Network.Unique.API.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Network.Unique.API.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Network.Unique.API.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = extrinsicsControllerCalculateFeeRequest;

            localVarRequestOptions.Operation = "ExtrinsicApi.ExtrinsicsControllerCalculateFee";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<FeeResponse>("/v1/extrinsic/calculate-fee", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ExtrinsicsControllerCalculateFee", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Network.Unique.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="blockHashOrNumber"></param>
        /// <param name="extrinsicHash"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>GetExtrinsicResponse</returns>
        public GetExtrinsicResponse ExtrinsicsControllerGet(string blockHashOrNumber, string extrinsicHash, int operationIndex = 0)
        {
            Network.Unique.API.Client.ApiResponse<GetExtrinsicResponse> localVarResponse = ExtrinsicsControllerGetWithHttpInfo(blockHashOrNumber, extrinsicHash);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Network.Unique.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="blockHashOrNumber"></param>
        /// <param name="extrinsicHash"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of GetExtrinsicResponse</returns>
        public Network.Unique.API.Client.ApiResponse<GetExtrinsicResponse> ExtrinsicsControllerGetWithHttpInfo(string blockHashOrNumber, string extrinsicHash, int operationIndex = 0)
        {
            // verify the required parameter 'blockHashOrNumber' is set
            if (blockHashOrNumber == null)
            {
                throw new Network.Unique.API.Client.ApiException(400, "Missing required parameter 'blockHashOrNumber' when calling ExtrinsicApi->ExtrinsicsControllerGet");
            }

            // verify the required parameter 'extrinsicHash' is set
            if (extrinsicHash == null)
            {
                throw new Network.Unique.API.Client.ApiException(400, "Missing required parameter 'extrinsicHash' when calling ExtrinsicApi->ExtrinsicsControllerGet");
            }

            Network.Unique.API.Client.RequestOptions localVarRequestOptions = new Network.Unique.API.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Network.Unique.API.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Network.Unique.API.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(Network.Unique.API.Client.ClientUtils.ParameterToMultiMap("", "blockHashOrNumber", blockHashOrNumber));
            localVarRequestOptions.QueryParameters.Add(Network.Unique.API.Client.ClientUtils.ParameterToMultiMap("", "extrinsicHash", extrinsicHash));

            localVarRequestOptions.Operation = "ExtrinsicApi.ExtrinsicsControllerGet";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Get<GetExtrinsicResponse>("/v1/extrinsic", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ExtrinsicsControllerGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Network.Unique.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="blockHashOrNumber"></param>
        /// <param name="extrinsicHash"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GetExtrinsicResponse</returns>
        public async System.Threading.Tasks.Task<GetExtrinsicResponse> ExtrinsicsControllerGetAsync(string blockHashOrNumber, string extrinsicHash, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Network.Unique.API.Client.ApiResponse<GetExtrinsicResponse> localVarResponse = await ExtrinsicsControllerGetWithHttpInfoAsync(blockHashOrNumber, extrinsicHash, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Network.Unique.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="blockHashOrNumber"></param>
        /// <param name="extrinsicHash"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GetExtrinsicResponse)</returns>
        public async System.Threading.Tasks.Task<Network.Unique.API.Client.ApiResponse<GetExtrinsicResponse>> ExtrinsicsControllerGetWithHttpInfoAsync(string blockHashOrNumber, string extrinsicHash, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'blockHashOrNumber' is set
            if (blockHashOrNumber == null)
            {
                throw new Network.Unique.API.Client.ApiException(400, "Missing required parameter 'blockHashOrNumber' when calling ExtrinsicApi->ExtrinsicsControllerGet");
            }

            // verify the required parameter 'extrinsicHash' is set
            if (extrinsicHash == null)
            {
                throw new Network.Unique.API.Client.ApiException(400, "Missing required parameter 'extrinsicHash' when calling ExtrinsicApi->ExtrinsicsControllerGet");
            }


            Network.Unique.API.Client.RequestOptions localVarRequestOptions = new Network.Unique.API.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Network.Unique.API.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Network.Unique.API.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(Network.Unique.API.Client.ClientUtils.ParameterToMultiMap("", "blockHashOrNumber", blockHashOrNumber));
            localVarRequestOptions.QueryParameters.Add(Network.Unique.API.Client.ClientUtils.ParameterToMultiMap("", "extrinsicHash", extrinsicHash));

            localVarRequestOptions.Operation = "ExtrinsicApi.ExtrinsicsControllerGet";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<GetExtrinsicResponse>("/v1/extrinsic", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ExtrinsicsControllerGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Network.Unique.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="hash"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ExtrinsicResultResponse</returns>
        public ExtrinsicResultResponse ExtrinsicsControllerGetStatus(string hash, int operationIndex = 0)
        {
            Network.Unique.API.Client.ApiResponse<ExtrinsicResultResponse> localVarResponse = ExtrinsicsControllerGetStatusWithHttpInfo(hash);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Network.Unique.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="hash"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ExtrinsicResultResponse</returns>
        public Network.Unique.API.Client.ApiResponse<ExtrinsicResultResponse> ExtrinsicsControllerGetStatusWithHttpInfo(string hash, int operationIndex = 0)
        {
            // verify the required parameter 'hash' is set
            if (hash == null)
            {
                throw new Network.Unique.API.Client.ApiException(400, "Missing required parameter 'hash' when calling ExtrinsicApi->ExtrinsicsControllerGetStatus");
            }

            Network.Unique.API.Client.RequestOptions localVarRequestOptions = new Network.Unique.API.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Network.Unique.API.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Network.Unique.API.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(Network.Unique.API.Client.ClientUtils.ParameterToMultiMap("", "hash", hash));

            localVarRequestOptions.Operation = "ExtrinsicApi.ExtrinsicsControllerGetStatus";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Get<ExtrinsicResultResponse>("/v1/extrinsic/status", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ExtrinsicsControllerGetStatus", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Network.Unique.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="hash"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ExtrinsicResultResponse</returns>
        public async System.Threading.Tasks.Task<ExtrinsicResultResponse> ExtrinsicsControllerGetStatusAsync(string hash, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Network.Unique.API.Client.ApiResponse<ExtrinsicResultResponse> localVarResponse = await ExtrinsicsControllerGetStatusWithHttpInfoAsync(hash, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Network.Unique.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="hash"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ExtrinsicResultResponse)</returns>
        public async System.Threading.Tasks.Task<Network.Unique.API.Client.ApiResponse<ExtrinsicResultResponse>> ExtrinsicsControllerGetStatusWithHttpInfoAsync(string hash, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'hash' is set
            if (hash == null)
            {
                throw new Network.Unique.API.Client.ApiException(400, "Missing required parameter 'hash' when calling ExtrinsicApi->ExtrinsicsControllerGetStatus");
            }


            Network.Unique.API.Client.RequestOptions localVarRequestOptions = new Network.Unique.API.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Network.Unique.API.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Network.Unique.API.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(Network.Unique.API.Client.ClientUtils.ParameterToMultiMap("", "hash", hash));

            localVarRequestOptions.Operation = "ExtrinsicApi.ExtrinsicsControllerGetStatus";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<ExtrinsicResultResponse>("/v1/extrinsic/status", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ExtrinsicsControllerGetStatus", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Use the Authorization request header to provide authentication information &lt;ul&gt; &lt;li&gt;&lt;code&gt;Authorization: Seed &amp;lt;your mnemonic phrase | uri name&amp;gt;&lt;/code&gt;&lt;/li&gt; &lt;/ul&gt;
        /// </summary>
        /// <exception cref="Network.Unique.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="unsignedTxPayloadBody"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>SignTxResultResponse</returns>
        public SignTxResultResponse ExtrinsicsControllerSign(UnsignedTxPayloadBody unsignedTxPayloadBody, int operationIndex = 0)
        {
            Network.Unique.API.Client.ApiResponse<SignTxResultResponse> localVarResponse = ExtrinsicsControllerSignWithHttpInfo(unsignedTxPayloadBody);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Use the Authorization request header to provide authentication information &lt;ul&gt; &lt;li&gt;&lt;code&gt;Authorization: Seed &amp;lt;your mnemonic phrase | uri name&amp;gt;&lt;/code&gt;&lt;/li&gt; &lt;/ul&gt;
        /// </summary>
        /// <exception cref="Network.Unique.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="unsignedTxPayloadBody"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of SignTxResultResponse</returns>
        public Network.Unique.API.Client.ApiResponse<SignTxResultResponse> ExtrinsicsControllerSignWithHttpInfo(UnsignedTxPayloadBody unsignedTxPayloadBody, int operationIndex = 0)
        {
            // verify the required parameter 'unsignedTxPayloadBody' is set
            if (unsignedTxPayloadBody == null)
            {
                throw new Network.Unique.API.Client.ApiException(400, "Missing required parameter 'unsignedTxPayloadBody' when calling ExtrinsicApi->ExtrinsicsControllerSign");
            }

            Network.Unique.API.Client.RequestOptions localVarRequestOptions = new Network.Unique.API.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Network.Unique.API.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Network.Unique.API.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = unsignedTxPayloadBody;

            localVarRequestOptions.Operation = "ExtrinsicApi.ExtrinsicsControllerSign";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (SeedAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<SignTxResultResponse>("/v1/extrinsic/sign", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ExtrinsicsControllerSign", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Use the Authorization request header to provide authentication information &lt;ul&gt; &lt;li&gt;&lt;code&gt;Authorization: Seed &amp;lt;your mnemonic phrase | uri name&amp;gt;&lt;/code&gt;&lt;/li&gt; &lt;/ul&gt;
        /// </summary>
        /// <exception cref="Network.Unique.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="unsignedTxPayloadBody"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SignTxResultResponse</returns>
        public async System.Threading.Tasks.Task<SignTxResultResponse> ExtrinsicsControllerSignAsync(UnsignedTxPayloadBody unsignedTxPayloadBody, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Network.Unique.API.Client.ApiResponse<SignTxResultResponse> localVarResponse = await ExtrinsicsControllerSignWithHttpInfoAsync(unsignedTxPayloadBody, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Use the Authorization request header to provide authentication information &lt;ul&gt; &lt;li&gt;&lt;code&gt;Authorization: Seed &amp;lt;your mnemonic phrase | uri name&amp;gt;&lt;/code&gt;&lt;/li&gt; &lt;/ul&gt;
        /// </summary>
        /// <exception cref="Network.Unique.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="unsignedTxPayloadBody"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SignTxResultResponse)</returns>
        public async System.Threading.Tasks.Task<Network.Unique.API.Client.ApiResponse<SignTxResultResponse>> ExtrinsicsControllerSignWithHttpInfoAsync(UnsignedTxPayloadBody unsignedTxPayloadBody, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'unsignedTxPayloadBody' is set
            if (unsignedTxPayloadBody == null)
            {
                throw new Network.Unique.API.Client.ApiException(400, "Missing required parameter 'unsignedTxPayloadBody' when calling ExtrinsicApi->ExtrinsicsControllerSign");
            }


            Network.Unique.API.Client.RequestOptions localVarRequestOptions = new Network.Unique.API.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Network.Unique.API.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Network.Unique.API.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = unsignedTxPayloadBody;

            localVarRequestOptions.Operation = "ExtrinsicApi.ExtrinsicsControllerSign";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (SeedAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<SignTxResultResponse>("/v1/extrinsic/sign", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ExtrinsicsControllerSign", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Network.Unique.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="submitTxBody"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>SubmitResultResponse</returns>
        public SubmitResultResponse ExtrinsicsControllerSubmitTx(SubmitTxBody submitTxBody, int operationIndex = 0)
        {
            Network.Unique.API.Client.ApiResponse<SubmitResultResponse> localVarResponse = ExtrinsicsControllerSubmitTxWithHttpInfo(submitTxBody);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Network.Unique.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="submitTxBody"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of SubmitResultResponse</returns>
        public Network.Unique.API.Client.ApiResponse<SubmitResultResponse> ExtrinsicsControllerSubmitTxWithHttpInfo(SubmitTxBody submitTxBody, int operationIndex = 0)
        {
            // verify the required parameter 'submitTxBody' is set
            if (submitTxBody == null)
            {
                throw new Network.Unique.API.Client.ApiException(400, "Missing required parameter 'submitTxBody' when calling ExtrinsicApi->ExtrinsicsControllerSubmitTx");
            }

            Network.Unique.API.Client.RequestOptions localVarRequestOptions = new Network.Unique.API.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Network.Unique.API.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Network.Unique.API.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = submitTxBody;

            localVarRequestOptions.Operation = "ExtrinsicApi.ExtrinsicsControllerSubmitTx";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Post<SubmitResultResponse>("/v1/extrinsic/submit", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ExtrinsicsControllerSubmitTx", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Network.Unique.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="submitTxBody"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SubmitResultResponse</returns>
        public async System.Threading.Tasks.Task<SubmitResultResponse> ExtrinsicsControllerSubmitTxAsync(SubmitTxBody submitTxBody, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Network.Unique.API.Client.ApiResponse<SubmitResultResponse> localVarResponse = await ExtrinsicsControllerSubmitTxWithHttpInfoAsync(submitTxBody, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Network.Unique.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="submitTxBody"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SubmitResultResponse)</returns>
        public async System.Threading.Tasks.Task<Network.Unique.API.Client.ApiResponse<SubmitResultResponse>> ExtrinsicsControllerSubmitTxWithHttpInfoAsync(SubmitTxBody submitTxBody, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'submitTxBody' is set
            if (submitTxBody == null)
            {
                throw new Network.Unique.API.Client.ApiException(400, "Missing required parameter 'submitTxBody' when calling ExtrinsicApi->ExtrinsicsControllerSubmitTx");
            }


            Network.Unique.API.Client.RequestOptions localVarRequestOptions = new Network.Unique.API.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Network.Unique.API.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Network.Unique.API.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = submitTxBody;

            localVarRequestOptions.Operation = "ExtrinsicApi.ExtrinsicsControllerSubmitTx";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<SubmitResultResponse>("/v1/extrinsic/submit", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ExtrinsicsControllerSubmitTx", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Network.Unique.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="submitTxBody"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>VerificationResultResponse</returns>
        public VerificationResultResponse ExtrinsicsControllerVerifySign(SubmitTxBody submitTxBody, int operationIndex = 0)
        {
            Network.Unique.API.Client.ApiResponse<VerificationResultResponse> localVarResponse = ExtrinsicsControllerVerifySignWithHttpInfo(submitTxBody);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Network.Unique.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="submitTxBody"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of VerificationResultResponse</returns>
        public Network.Unique.API.Client.ApiResponse<VerificationResultResponse> ExtrinsicsControllerVerifySignWithHttpInfo(SubmitTxBody submitTxBody, int operationIndex = 0)
        {
            // verify the required parameter 'submitTxBody' is set
            if (submitTxBody == null)
            {
                throw new Network.Unique.API.Client.ApiException(400, "Missing required parameter 'submitTxBody' when calling ExtrinsicApi->ExtrinsicsControllerVerifySign");
            }

            Network.Unique.API.Client.RequestOptions localVarRequestOptions = new Network.Unique.API.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Network.Unique.API.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Network.Unique.API.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = submitTxBody;

            localVarRequestOptions.Operation = "ExtrinsicApi.ExtrinsicsControllerVerifySign";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Post<VerificationResultResponse>("/v1/extrinsic/verify-sign", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ExtrinsicsControllerVerifySign", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Network.Unique.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="submitTxBody"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of VerificationResultResponse</returns>
        public async System.Threading.Tasks.Task<VerificationResultResponse> ExtrinsicsControllerVerifySignAsync(SubmitTxBody submitTxBody, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Network.Unique.API.Client.ApiResponse<VerificationResultResponse> localVarResponse = await ExtrinsicsControllerVerifySignWithHttpInfoAsync(submitTxBody, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Network.Unique.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="submitTxBody"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (VerificationResultResponse)</returns>
        public async System.Threading.Tasks.Task<Network.Unique.API.Client.ApiResponse<VerificationResultResponse>> ExtrinsicsControllerVerifySignWithHttpInfoAsync(SubmitTxBody submitTxBody, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'submitTxBody' is set
            if (submitTxBody == null)
            {
                throw new Network.Unique.API.Client.ApiException(400, "Missing required parameter 'submitTxBody' when calling ExtrinsicApi->ExtrinsicsControllerVerifySign");
            }


            Network.Unique.API.Client.RequestOptions localVarRequestOptions = new Network.Unique.API.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Network.Unique.API.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Network.Unique.API.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = submitTxBody;

            localVarRequestOptions.Operation = "ExtrinsicApi.ExtrinsicsControllerVerifySign";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<VerificationResultResponse>("/v1/extrinsic/verify-sign", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ExtrinsicsControllerVerifySign", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

    }
}
