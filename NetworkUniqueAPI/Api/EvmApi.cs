/*
 * Unique SDK
 *
 * Unique SDK HTTP API  <b>Main connection to wss://ws-opal.unique.network (<a target=\"_blank\" href=\"https://polkadot.js.org/apps/?rpc=wss://ws-opal.unique.network\">apps ↗</a>)</b>  Secondary substrate connection to wss://ws-relay-bench.unique.network  (<a target=\"_blank\" href=\"https://polkadot.js.org/apps/?rpc=wss://ws-relay-bench.unique.network\">apps ↗</a>). Go to <a href=\"/relay/swagger\">/relay/swagger</a>  Consumable OpenAPI specification - (<a target=\"_blank\" href=\"/swagger-json\">JSON ↗</a>) (<a target=\"_blank\" href=\"/swagger-yaml\">YAML ↗</a>)
 *
 * The version of the OpenAPI document: 0.6.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using Network.Unique.API.Client;
using Network.Unique.API.Model;

namespace Network.Unique.API.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IEvmApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="Network.Unique.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="evmCallArgumentsDto"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Object</returns>
        Object EvmControllerEvmCall(EvmCallArgumentsDto evmCallArgumentsDto, int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Network.Unique.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="evmCallArgumentsDto"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> EvmControllerEvmCallWithHttpInfo(EvmCallArgumentsDto evmCallArgumentsDto, int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="Network.Unique.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contractAddress">Ethereum address of your smart contract</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>EvmContractExistsResponseDto</returns>
        EvmContractExistsResponseDto EvmControllerEvmExist(string contractAddress, int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Network.Unique.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contractAddress">Ethereum address of your smart contract</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of EvmContractExistsResponseDto</returns>
        ApiResponse<EvmContractExistsResponseDto> EvmControllerEvmExistWithHttpInfo(string contractAddress, int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="Network.Unique.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="evmSendMutationRequest"></param>
        /// <param name="use"> (optional)</param>
        /// <param name="withFee"> (optional, default to false) (deprecated)</param>
        /// <param name="verify"> (optional, default to false)</param>
        /// <param name="callbackUrl"> (optional)</param>
        /// <param name="nonce"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>EvmSendMutationDefaultResponse</returns>
        EvmSendMutationDefaultResponse EvmSendMutation(EvmSendMutationRequest evmSendMutationRequest, string use = default(string), bool? withFee = default(bool?), bool? verify = default(bool?), string callbackUrl = default(string), decimal? nonce = default(decimal?), int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Network.Unique.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="evmSendMutationRequest"></param>
        /// <param name="use"> (optional)</param>
        /// <param name="withFee"> (optional, default to false) (deprecated)</param>
        /// <param name="verify"> (optional, default to false)</param>
        /// <param name="callbackUrl"> (optional)</param>
        /// <param name="nonce"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of EvmSendMutationDefaultResponse</returns>
        ApiResponse<EvmSendMutationDefaultResponse> EvmSendMutationWithHttpInfo(EvmSendMutationRequest evmSendMutationRequest, string use = default(string), bool? withFee = default(bool?), bool? verify = default(bool?), string callbackUrl = default(string), decimal? nonce = default(decimal?), int operationIndex = 0);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IEvmApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Network.Unique.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="evmCallArgumentsDto"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> EvmControllerEvmCallAsync(EvmCallArgumentsDto evmCallArgumentsDto, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Network.Unique.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="evmCallArgumentsDto"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> EvmControllerEvmCallWithHttpInfoAsync(EvmCallArgumentsDto evmCallArgumentsDto, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Network.Unique.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contractAddress">Ethereum address of your smart contract</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of EvmContractExistsResponseDto</returns>
        System.Threading.Tasks.Task<EvmContractExistsResponseDto> EvmControllerEvmExistAsync(string contractAddress, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Network.Unique.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contractAddress">Ethereum address of your smart contract</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (EvmContractExistsResponseDto)</returns>
        System.Threading.Tasks.Task<ApiResponse<EvmContractExistsResponseDto>> EvmControllerEvmExistWithHttpInfoAsync(string contractAddress, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Network.Unique.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="evmSendMutationRequest"></param>
        /// <param name="use"> (optional)</param>
        /// <param name="withFee"> (optional, default to false) (deprecated)</param>
        /// <param name="verify"> (optional, default to false)</param>
        /// <param name="callbackUrl"> (optional)</param>
        /// <param name="nonce"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of EvmSendMutationDefaultResponse</returns>
        System.Threading.Tasks.Task<EvmSendMutationDefaultResponse> EvmSendMutationAsync(EvmSendMutationRequest evmSendMutationRequest, string use = default(string), bool? withFee = default(bool?), bool? verify = default(bool?), string callbackUrl = default(string), decimal? nonce = default(decimal?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Network.Unique.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="evmSendMutationRequest"></param>
        /// <param name="use"> (optional)</param>
        /// <param name="withFee"> (optional, default to false) (deprecated)</param>
        /// <param name="verify"> (optional, default to false)</param>
        /// <param name="callbackUrl"> (optional)</param>
        /// <param name="nonce"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (EvmSendMutationDefaultResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<EvmSendMutationDefaultResponse>> EvmSendMutationWithHttpInfoAsync(EvmSendMutationRequest evmSendMutationRequest, string use = default(string), bool? withFee = default(bool?), bool? verify = default(bool?), string callbackUrl = default(string), decimal? nonce = default(decimal?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IEvmApi : IEvmApiSync, IEvmApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class EvmApi : IEvmApi
    {
        private Network.Unique.API.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="EvmApi"/> class.
        /// </summary>
        /// <returns></returns>
        public EvmApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="EvmApi"/> class.
        /// </summary>
        /// <returns></returns>
        public EvmApi(string basePath)
        {
            this.Configuration = Network.Unique.API.Client.Configuration.MergeConfigurations(
                Network.Unique.API.Client.GlobalConfiguration.Instance,
                new Network.Unique.API.Client.Configuration { BasePath = basePath }
            );
            this.Client = new Network.Unique.API.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Network.Unique.API.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = Network.Unique.API.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="EvmApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public EvmApi(Network.Unique.API.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = Network.Unique.API.Client.Configuration.MergeConfigurations(
                Network.Unique.API.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new Network.Unique.API.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Network.Unique.API.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = Network.Unique.API.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="EvmApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public EvmApi(Network.Unique.API.Client.ISynchronousClient client, Network.Unique.API.Client.IAsynchronousClient asyncClient, Network.Unique.API.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = Network.Unique.API.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public Network.Unique.API.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public Network.Unique.API.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Network.Unique.API.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Network.Unique.API.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Network.Unique.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="evmCallArgumentsDto"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Object</returns>
        public Object EvmControllerEvmCall(EvmCallArgumentsDto evmCallArgumentsDto, int operationIndex = 0)
        {
            Network.Unique.API.Client.ApiResponse<Object> localVarResponse = EvmControllerEvmCallWithHttpInfo(evmCallArgumentsDto);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Network.Unique.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="evmCallArgumentsDto"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object</returns>
        public Network.Unique.API.Client.ApiResponse<Object> EvmControllerEvmCallWithHttpInfo(EvmCallArgumentsDto evmCallArgumentsDto, int operationIndex = 0)
        {
            // verify the required parameter 'evmCallArgumentsDto' is set
            if (evmCallArgumentsDto == null)
            {
                throw new Network.Unique.API.Client.ApiException(400, "Missing required parameter 'evmCallArgumentsDto' when calling EvmApi->EvmControllerEvmCall");
            }

            Network.Unique.API.Client.RequestOptions localVarRequestOptions = new Network.Unique.API.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Network.Unique.API.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Network.Unique.API.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = evmCallArgumentsDto;

            localVarRequestOptions.Operation = "EvmApi.EvmControllerEvmCall";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/v1/evm/call", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("EvmControllerEvmCall", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Network.Unique.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="evmCallArgumentsDto"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> EvmControllerEvmCallAsync(EvmCallArgumentsDto evmCallArgumentsDto, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Network.Unique.API.Client.ApiResponse<Object> localVarResponse = await EvmControllerEvmCallWithHttpInfoAsync(evmCallArgumentsDto, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Network.Unique.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="evmCallArgumentsDto"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<Network.Unique.API.Client.ApiResponse<Object>> EvmControllerEvmCallWithHttpInfoAsync(EvmCallArgumentsDto evmCallArgumentsDto, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'evmCallArgumentsDto' is set
            if (evmCallArgumentsDto == null)
            {
                throw new Network.Unique.API.Client.ApiException(400, "Missing required parameter 'evmCallArgumentsDto' when calling EvmApi->EvmControllerEvmCall");
            }


            Network.Unique.API.Client.RequestOptions localVarRequestOptions = new Network.Unique.API.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Network.Unique.API.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Network.Unique.API.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = evmCallArgumentsDto;

            localVarRequestOptions.Operation = "EvmApi.EvmControllerEvmCall";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/v1/evm/call", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("EvmControllerEvmCall", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Network.Unique.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contractAddress">Ethereum address of your smart contract</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>EvmContractExistsResponseDto</returns>
        public EvmContractExistsResponseDto EvmControllerEvmExist(string contractAddress, int operationIndex = 0)
        {
            Network.Unique.API.Client.ApiResponse<EvmContractExistsResponseDto> localVarResponse = EvmControllerEvmExistWithHttpInfo(contractAddress);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Network.Unique.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contractAddress">Ethereum address of your smart contract</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of EvmContractExistsResponseDto</returns>
        public Network.Unique.API.Client.ApiResponse<EvmContractExistsResponseDto> EvmControllerEvmExistWithHttpInfo(string contractAddress, int operationIndex = 0)
        {
            // verify the required parameter 'contractAddress' is set
            if (contractAddress == null)
            {
                throw new Network.Unique.API.Client.ApiException(400, "Missing required parameter 'contractAddress' when calling EvmApi->EvmControllerEvmExist");
            }

            Network.Unique.API.Client.RequestOptions localVarRequestOptions = new Network.Unique.API.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Network.Unique.API.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Network.Unique.API.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(Network.Unique.API.Client.ClientUtils.ParameterToMultiMap("", "contractAddress", contractAddress));

            localVarRequestOptions.Operation = "EvmApi.EvmControllerEvmExist";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Get<EvmContractExistsResponseDto>("/v1/evm/contract-exists", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("EvmControllerEvmExist", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Network.Unique.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contractAddress">Ethereum address of your smart contract</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of EvmContractExistsResponseDto</returns>
        public async System.Threading.Tasks.Task<EvmContractExistsResponseDto> EvmControllerEvmExistAsync(string contractAddress, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Network.Unique.API.Client.ApiResponse<EvmContractExistsResponseDto> localVarResponse = await EvmControllerEvmExistWithHttpInfoAsync(contractAddress, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Network.Unique.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contractAddress">Ethereum address of your smart contract</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (EvmContractExistsResponseDto)</returns>
        public async System.Threading.Tasks.Task<Network.Unique.API.Client.ApiResponse<EvmContractExistsResponseDto>> EvmControllerEvmExistWithHttpInfoAsync(string contractAddress, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'contractAddress' is set
            if (contractAddress == null)
            {
                throw new Network.Unique.API.Client.ApiException(400, "Missing required parameter 'contractAddress' when calling EvmApi->EvmControllerEvmExist");
            }


            Network.Unique.API.Client.RequestOptions localVarRequestOptions = new Network.Unique.API.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Network.Unique.API.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Network.Unique.API.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(Network.Unique.API.Client.ClientUtils.ParameterToMultiMap("", "contractAddress", contractAddress));

            localVarRequestOptions.Operation = "EvmApi.EvmControllerEvmExist";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<EvmContractExistsResponseDto>("/v1/evm/contract-exists", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("EvmControllerEvmExist", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Network.Unique.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="evmSendMutationRequest"></param>
        /// <param name="use"> (optional)</param>
        /// <param name="withFee"> (optional, default to false) (deprecated)</param>
        /// <param name="verify"> (optional, default to false)</param>
        /// <param name="callbackUrl"> (optional)</param>
        /// <param name="nonce"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>EvmSendMutationDefaultResponse</returns>
        public EvmSendMutationDefaultResponse EvmSendMutation(EvmSendMutationRequest evmSendMutationRequest, string use = default(string), bool? withFee = default(bool?), bool? verify = default(bool?), string callbackUrl = default(string), decimal? nonce = default(decimal?), int operationIndex = 0)
        {
            Network.Unique.API.Client.ApiResponse<EvmSendMutationDefaultResponse> localVarResponse = EvmSendMutationWithHttpInfo(evmSendMutationRequest, use, withFee, verify, callbackUrl, nonce);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Network.Unique.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="evmSendMutationRequest"></param>
        /// <param name="use"> (optional)</param>
        /// <param name="withFee"> (optional, default to false) (deprecated)</param>
        /// <param name="verify"> (optional, default to false)</param>
        /// <param name="callbackUrl"> (optional)</param>
        /// <param name="nonce"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of EvmSendMutationDefaultResponse</returns>
        public Network.Unique.API.Client.ApiResponse<EvmSendMutationDefaultResponse> EvmSendMutationWithHttpInfo(EvmSendMutationRequest evmSendMutationRequest, string use = default(string), bool? withFee = default(bool?), bool? verify = default(bool?), string callbackUrl = default(string), decimal? nonce = default(decimal?), int operationIndex = 0)
        {
            // verify the required parameter 'evmSendMutationRequest' is set
            if (evmSendMutationRequest == null)
            {
                throw new Network.Unique.API.Client.ApiException(400, "Missing required parameter 'evmSendMutationRequest' when calling EvmApi->EvmSendMutation");
            }

            Network.Unique.API.Client.RequestOptions localVarRequestOptions = new Network.Unique.API.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Network.Unique.API.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Network.Unique.API.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (use != null)
            {
                localVarRequestOptions.QueryParameters.Add(Network.Unique.API.Client.ClientUtils.ParameterToMultiMap("", "use", use));
            }
            if (withFee != null)
            {
                localVarRequestOptions.QueryParameters.Add(Network.Unique.API.Client.ClientUtils.ParameterToMultiMap("", "withFee", withFee));
            }
            if (verify != null)
            {
                localVarRequestOptions.QueryParameters.Add(Network.Unique.API.Client.ClientUtils.ParameterToMultiMap("", "verify", verify));
            }
            if (callbackUrl != null)
            {
                localVarRequestOptions.QueryParameters.Add(Network.Unique.API.Client.ClientUtils.ParameterToMultiMap("", "callbackUrl", callbackUrl));
            }
            if (nonce != null)
            {
                localVarRequestOptions.QueryParameters.Add(Network.Unique.API.Client.ClientUtils.ParameterToMultiMap("", "nonce", nonce));
            }
            localVarRequestOptions.Data = evmSendMutationRequest;

            localVarRequestOptions.Operation = "EvmApi.EvmSendMutation";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (SeedAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<EvmSendMutationDefaultResponse>("/v1/evm/send", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("EvmSendMutation", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Network.Unique.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="evmSendMutationRequest"></param>
        /// <param name="use"> (optional)</param>
        /// <param name="withFee"> (optional, default to false) (deprecated)</param>
        /// <param name="verify"> (optional, default to false)</param>
        /// <param name="callbackUrl"> (optional)</param>
        /// <param name="nonce"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of EvmSendMutationDefaultResponse</returns>
        public async System.Threading.Tasks.Task<EvmSendMutationDefaultResponse> EvmSendMutationAsync(EvmSendMutationRequest evmSendMutationRequest, string use = default(string), bool? withFee = default(bool?), bool? verify = default(bool?), string callbackUrl = default(string), decimal? nonce = default(decimal?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Network.Unique.API.Client.ApiResponse<EvmSendMutationDefaultResponse> localVarResponse = await EvmSendMutationWithHttpInfoAsync(evmSendMutationRequest, use, withFee, verify, callbackUrl, nonce, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Network.Unique.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="evmSendMutationRequest"></param>
        /// <param name="use"> (optional)</param>
        /// <param name="withFee"> (optional, default to false) (deprecated)</param>
        /// <param name="verify"> (optional, default to false)</param>
        /// <param name="callbackUrl"> (optional)</param>
        /// <param name="nonce"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (EvmSendMutationDefaultResponse)</returns>
        public async System.Threading.Tasks.Task<Network.Unique.API.Client.ApiResponse<EvmSendMutationDefaultResponse>> EvmSendMutationWithHttpInfoAsync(EvmSendMutationRequest evmSendMutationRequest, string use = default(string), bool? withFee = default(bool?), bool? verify = default(bool?), string callbackUrl = default(string), decimal? nonce = default(decimal?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'evmSendMutationRequest' is set
            if (evmSendMutationRequest == null)
            {
                throw new Network.Unique.API.Client.ApiException(400, "Missing required parameter 'evmSendMutationRequest' when calling EvmApi->EvmSendMutation");
            }


            Network.Unique.API.Client.RequestOptions localVarRequestOptions = new Network.Unique.API.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Network.Unique.API.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Network.Unique.API.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (use != null)
            {
                localVarRequestOptions.QueryParameters.Add(Network.Unique.API.Client.ClientUtils.ParameterToMultiMap("", "use", use));
            }
            if (withFee != null)
            {
                localVarRequestOptions.QueryParameters.Add(Network.Unique.API.Client.ClientUtils.ParameterToMultiMap("", "withFee", withFee));
            }
            if (verify != null)
            {
                localVarRequestOptions.QueryParameters.Add(Network.Unique.API.Client.ClientUtils.ParameterToMultiMap("", "verify", verify));
            }
            if (callbackUrl != null)
            {
                localVarRequestOptions.QueryParameters.Add(Network.Unique.API.Client.ClientUtils.ParameterToMultiMap("", "callbackUrl", callbackUrl));
            }
            if (nonce != null)
            {
                localVarRequestOptions.QueryParameters.Add(Network.Unique.API.Client.ClientUtils.ParameterToMultiMap("", "nonce", nonce));
            }
            localVarRequestOptions.Data = evmSendMutationRequest;

            localVarRequestOptions.Operation = "EvmApi.EvmSendMutation";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (SeedAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<EvmSendMutationDefaultResponse>("/v1/evm/send", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("EvmSendMutation", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

    }
}
