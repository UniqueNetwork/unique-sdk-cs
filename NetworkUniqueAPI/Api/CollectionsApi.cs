/*
 * Unique SDK
 *
 * Unique SDK HTTP API  <b>Main connection to wss://ws-opal.unique.network (<a target=\"_blank\" href=\"https://polkadot.js.org/apps/?rpc=wss://ws-opal.unique.network\">apps ↗</a>)</b>  Secondary substrate connection to wss://ws-relay-bench.unique.network  (<a target=\"_blank\" href=\"https://polkadot.js.org/apps/?rpc=wss://ws-relay-bench.unique.network\">apps ↗</a>). Go to <a href=\"/relay/swagger\">/relay/swagger</a>  Consumable OpenAPI specification - (<a target=\"_blank\" href=\"/swagger-json\">JSON ↗</a>) (<a target=\"_blank\" href=\"/swagger-yaml\">YAML ↗</a>)
 *
 * The version of the OpenAPI document: 0.6.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using Network.Unique.API.Client;
using Network.Unique.API.Model;

namespace Network.Unique.API.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ICollectionsApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="Network.Unique.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="addAdminRequest"></param>
        /// <param name="use"> (optional)</param>
        /// <param name="withFee"> (optional, default to false) (deprecated)</param>
        /// <param name="verify"> (optional, default to false)</param>
        /// <param name="callbackUrl"> (optional)</param>
        /// <param name="nonce"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>AddAdminDefaultResponse</returns>
        AddAdminDefaultResponse AddAdmin(AddAdminRequest addAdminRequest, string use = default(string), bool? withFee = default(bool?), bool? verify = default(bool?), string callbackUrl = default(string), decimal? nonce = default(decimal?), int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Network.Unique.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="addAdminRequest"></param>
        /// <param name="use"> (optional)</param>
        /// <param name="withFee"> (optional, default to false) (deprecated)</param>
        /// <param name="verify"> (optional, default to false)</param>
        /// <param name="callbackUrl"> (optional)</param>
        /// <param name="nonce"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of AddAdminDefaultResponse</returns>
        ApiResponse<AddAdminDefaultResponse> AddAdminWithHttpInfo(AddAdminRequest addAdminRequest, string use = default(string), bool? withFee = default(bool?), bool? verify = default(bool?), string callbackUrl = default(string), decimal? nonce = default(decimal?), int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="Network.Unique.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="addToAllowListRequest"></param>
        /// <param name="use"> (optional)</param>
        /// <param name="withFee"> (optional, default to false) (deprecated)</param>
        /// <param name="verify"> (optional, default to false)</param>
        /// <param name="callbackUrl"> (optional)</param>
        /// <param name="nonce"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>AddToAllowListDefaultResponse</returns>
        AddToAllowListDefaultResponse AddToAllowList(AddToAllowListRequest addToAllowListRequest, string use = default(string), bool? withFee = default(bool?), bool? verify = default(bool?), string callbackUrl = default(string), decimal? nonce = default(decimal?), int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Network.Unique.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="addToAllowListRequest"></param>
        /// <param name="use"> (optional)</param>
        /// <param name="withFee"> (optional, default to false) (deprecated)</param>
        /// <param name="verify"> (optional, default to false)</param>
        /// <param name="callbackUrl"> (optional)</param>
        /// <param name="nonce"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of AddToAllowListDefaultResponse</returns>
        ApiResponse<AddToAllowListDefaultResponse> AddToAllowListWithHttpInfo(AddToAllowListRequest addToAllowListRequest, string use = default(string), bool? withFee = default(bool?), bool? verify = default(bool?), string callbackUrl = default(string), decimal? nonce = default(decimal?), int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="Network.Unique.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionId"></param>
        /// <param name="at">Hash of execution block (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>AdminlistResponse</returns>
        AdminlistResponse CollectionControllerAdmins(decimal collectionId, string at = default(string), int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Network.Unique.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionId"></param>
        /// <param name="at">Hash of execution block (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of AdminlistResponse</returns>
        ApiResponse<AdminlistResponse> CollectionControllerAdminsWithHttpInfo(decimal collectionId, string at = default(string), int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="Network.Unique.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionId"></param>
        /// <param name="at">Hash of execution block (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>AllowListBodyResult</returns>
        AllowListBodyResult CollectionControllerAllowList(decimal collectionId, string at = default(string), int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Network.Unique.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionId"></param>
        /// <param name="at">Hash of execution block (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of AllowListBodyResult</returns>
        ApiResponse<AllowListBodyResult> CollectionControllerAllowListWithHttpInfo(decimal collectionId, string at = default(string), int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="Network.Unique.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionId"></param>
        /// <param name="account">The ss-58 encoded address</param>
        /// <param name="at">Hash of execution block (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>AllowedResponse</returns>
        AllowedResponse CollectionControllerAllowed(decimal collectionId, string account, string at = default(string), int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Network.Unique.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionId"></param>
        /// <param name="account">The ss-58 encoded address</param>
        /// <param name="at">Hash of execution block (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of AllowedResponse</returns>
        ApiResponse<AllowedResponse> CollectionControllerAllowedWithHttpInfo(decimal collectionId, string account, string at = default(string), int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="Network.Unique.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionId"></param>
        /// <param name="at">Hash of execution block (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>CollectionPropertiesResponse</returns>
        CollectionPropertiesResponse CollectionControllerCollectionProperties(decimal collectionId, string at = default(string), int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Network.Unique.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionId"></param>
        /// <param name="at">Hash of execution block (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of CollectionPropertiesResponse</returns>
        ApiResponse<CollectionPropertiesResponse> CollectionControllerCollectionPropertiesWithHttpInfo(decimal collectionId, string at = default(string), int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="Network.Unique.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionId"></param>
        /// <param name="at">Hash of execution block (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>GetCollectionTokensResponse</returns>
        GetCollectionTokensResponse CollectionControllerCollectionTokens(decimal collectionId, string at = default(string), int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Network.Unique.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionId"></param>
        /// <param name="at">Hash of execution block (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of GetCollectionTokensResponse</returns>
        ApiResponse<GetCollectionTokensResponse> CollectionControllerCollectionTokensWithHttpInfo(decimal collectionId, string at = default(string), int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="Network.Unique.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionId"></param>
        /// <param name="at">Hash of execution block (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>EffectiveCollectionLimitsResponse</returns>
        EffectiveCollectionLimitsResponse CollectionControllerEffectiveCollectionLimits(decimal collectionId, string at = default(string), int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Network.Unique.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionId"></param>
        /// <param name="at">Hash of execution block (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of EffectiveCollectionLimitsResponse</returns>
        ApiResponse<EffectiveCollectionLimitsResponse> CollectionControllerEffectiveCollectionLimitsWithHttpInfo(decimal collectionId, string at = default(string), int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="Network.Unique.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionId"></param>
        /// <param name="at">Hash of execution block (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>CollectionInfoWithSchemaResponse</returns>
        CollectionInfoWithSchemaResponse CollectionControllerGetCollection(decimal collectionId, string at = default(string), int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Network.Unique.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionId"></param>
        /// <param name="at">Hash of execution block (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of CollectionInfoWithSchemaResponse</returns>
        ApiResponse<CollectionInfoWithSchemaResponse> CollectionControllerGetCollectionWithHttpInfo(decimal collectionId, string at = default(string), int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="Network.Unique.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionId"></param>
        /// <param name="at">Hash of execution block (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>LastTokenIdResultDto</returns>
        LastTokenIdResultDto CollectionControllerLastTokenId(decimal collectionId, string at = default(string), int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Network.Unique.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionId"></param>
        /// <param name="at">Hash of execution block (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of LastTokenIdResultDto</returns>
        ApiResponse<LastTokenIdResultDto> CollectionControllerLastTokenIdWithHttpInfo(decimal collectionId, string at = default(string), int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="Network.Unique.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionId"></param>
        /// <param name="address">The ss-58 encoded address</param>
        /// <param name="tokenId"></param>
        /// <param name="at">Hash of execution block (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>NextSponsoredResponse</returns>
        NextSponsoredResponse CollectionControllerNextSponsored(decimal collectionId, string address, decimal tokenId, string at = default(string), int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Network.Unique.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionId"></param>
        /// <param name="address">The ss-58 encoded address</param>
        /// <param name="tokenId"></param>
        /// <param name="at">Hash of execution block (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of NextSponsoredResponse</returns>
        ApiResponse<NextSponsoredResponse> CollectionControllerNextSponsoredWithHttpInfo(decimal collectionId, string address, decimal tokenId, string at = default(string), int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="Network.Unique.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionId"></param>
        /// <param name="propertyKeys"> (optional)</param>
        /// <param name="at">Hash of execution block (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>PropertyPermissionsResponse</returns>
        PropertyPermissionsResponse CollectionControllerPropertyPermissions(decimal collectionId, List<string> propertyKeys = default(List<string>), string at = default(string), int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Network.Unique.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionId"></param>
        /// <param name="propertyKeys"> (optional)</param>
        /// <param name="at">Hash of execution block (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of PropertyPermissionsResponse</returns>
        ApiResponse<PropertyPermissionsResponse> CollectionControllerPropertyPermissionsWithHttpInfo(decimal collectionId, List<string> propertyKeys = default(List<string>), string at = default(string), int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="Network.Unique.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="at">Hash of execution block (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>GetStatsResponse</returns>
        GetStatsResponse CollectionControllerStats(string at = default(string), int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Network.Unique.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="at">Hash of execution block (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of GetStatsResponse</returns>
        ApiResponse<GetStatsResponse> CollectionControllerStatsWithHttpInfo(string at = default(string), int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="Network.Unique.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionId"></param>
        /// <param name="at">Hash of execution block (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>TotalSupplyResponse</returns>
        TotalSupplyResponse CollectionControllerTotalSupply(decimal collectionId, string at = default(string), int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Network.Unique.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionId"></param>
        /// <param name="at">Hash of execution block (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of TotalSupplyResponse</returns>
        ApiResponse<TotalSupplyResponse> CollectionControllerTotalSupplyWithHttpInfo(decimal collectionId, string at = default(string), int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="Network.Unique.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="confirmSponsorshipRequest"></param>
        /// <param name="use"> (optional)</param>
        /// <param name="withFee"> (optional, default to false) (deprecated)</param>
        /// <param name="verify"> (optional, default to false)</param>
        /// <param name="callbackUrl"> (optional)</param>
        /// <param name="nonce"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ConfirmSponsorshipDefaultResponse</returns>
        ConfirmSponsorshipDefaultResponse ConfirmSponsorship(ConfirmSponsorshipRequest confirmSponsorshipRequest, string use = default(string), bool? withFee = default(bool?), bool? verify = default(bool?), string callbackUrl = default(string), decimal? nonce = default(decimal?), int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Network.Unique.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="confirmSponsorshipRequest"></param>
        /// <param name="use"> (optional)</param>
        /// <param name="withFee"> (optional, default to false) (deprecated)</param>
        /// <param name="verify"> (optional, default to false)</param>
        /// <param name="callbackUrl"> (optional)</param>
        /// <param name="nonce"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ConfirmSponsorshipDefaultResponse</returns>
        ApiResponse<ConfirmSponsorshipDefaultResponse> ConfirmSponsorshipWithHttpInfo(ConfirmSponsorshipRequest confirmSponsorshipRequest, string use = default(string), bool? withFee = default(bool?), bool? verify = default(bool?), string callbackUrl = default(string), decimal? nonce = default(decimal?), int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="Network.Unique.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createCollectionMutationRequest"></param>
        /// <param name="use"> (optional)</param>
        /// <param name="withFee"> (optional, default to false) (deprecated)</param>
        /// <param name="verify"> (optional, default to false)</param>
        /// <param name="callbackUrl"> (optional)</param>
        /// <param name="nonce"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>CreateCollectionMutationDefaultResponse</returns>
        CreateCollectionMutationDefaultResponse CreateCollectionMutation(CreateCollectionMutationRequest createCollectionMutationRequest, string use = default(string), bool? withFee = default(bool?), bool? verify = default(bool?), string callbackUrl = default(string), decimal? nonce = default(decimal?), int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Network.Unique.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createCollectionMutationRequest"></param>
        /// <param name="use"> (optional)</param>
        /// <param name="withFee"> (optional, default to false) (deprecated)</param>
        /// <param name="verify"> (optional, default to false)</param>
        /// <param name="callbackUrl"> (optional)</param>
        /// <param name="nonce"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of CreateCollectionMutationDefaultResponse</returns>
        ApiResponse<CreateCollectionMutationDefaultResponse> CreateCollectionMutationWithHttpInfo(CreateCollectionMutationRequest createCollectionMutationRequest, string use = default(string), bool? withFee = default(bool?), bool? verify = default(bool?), string callbackUrl = default(string), decimal? nonce = default(decimal?), int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="Network.Unique.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deleteCollectionPropertiesRequest"></param>
        /// <param name="use"> (optional)</param>
        /// <param name="withFee"> (optional, default to false) (deprecated)</param>
        /// <param name="verify"> (optional, default to false)</param>
        /// <param name="callbackUrl"> (optional)</param>
        /// <param name="nonce"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>DeleteCollectionPropertiesDefaultResponse</returns>
        DeleteCollectionPropertiesDefaultResponse DeleteCollectionProperties(DeleteCollectionPropertiesRequest deleteCollectionPropertiesRequest, string use = default(string), bool? withFee = default(bool?), bool? verify = default(bool?), string callbackUrl = default(string), decimal? nonce = default(decimal?), int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Network.Unique.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deleteCollectionPropertiesRequest"></param>
        /// <param name="use"> (optional)</param>
        /// <param name="withFee"> (optional, default to false) (deprecated)</param>
        /// <param name="verify"> (optional, default to false)</param>
        /// <param name="callbackUrl"> (optional)</param>
        /// <param name="nonce"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of DeleteCollectionPropertiesDefaultResponse</returns>
        ApiResponse<DeleteCollectionPropertiesDefaultResponse> DeleteCollectionPropertiesWithHttpInfo(DeleteCollectionPropertiesRequest deleteCollectionPropertiesRequest, string use = default(string), bool? withFee = default(bool?), bool? verify = default(bool?), string callbackUrl = default(string), decimal? nonce = default(decimal?), int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="Network.Unique.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="destroyRequest"></param>
        /// <param name="use"> (optional)</param>
        /// <param name="withFee"> (optional, default to false) (deprecated)</param>
        /// <param name="verify"> (optional, default to false)</param>
        /// <param name="callbackUrl"> (optional)</param>
        /// <param name="nonce"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>DestroyDefaultResponse</returns>
        DestroyDefaultResponse Destroy(DestroyRequest destroyRequest, string use = default(string), bool? withFee = default(bool?), bool? verify = default(bool?), string callbackUrl = default(string), decimal? nonce = default(decimal?), int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Network.Unique.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="destroyRequest"></param>
        /// <param name="use"> (optional)</param>
        /// <param name="withFee"> (optional, default to false) (deprecated)</param>
        /// <param name="verify"> (optional, default to false)</param>
        /// <param name="callbackUrl"> (optional)</param>
        /// <param name="nonce"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of DestroyDefaultResponse</returns>
        ApiResponse<DestroyDefaultResponse> DestroyWithHttpInfo(DestroyRequest destroyRequest, string use = default(string), bool? withFee = default(bool?), bool? verify = default(bool?), string callbackUrl = default(string), decimal? nonce = default(decimal?), int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="Network.Unique.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="removeAdminRequest"></param>
        /// <param name="use"> (optional)</param>
        /// <param name="withFee"> (optional, default to false) (deprecated)</param>
        /// <param name="verify"> (optional, default to false)</param>
        /// <param name="callbackUrl"> (optional)</param>
        /// <param name="nonce"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>RemoveAdminDefaultResponse</returns>
        RemoveAdminDefaultResponse RemoveAdmin(RemoveAdminRequest removeAdminRequest, string use = default(string), bool? withFee = default(bool?), bool? verify = default(bool?), string callbackUrl = default(string), decimal? nonce = default(decimal?), int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Network.Unique.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="removeAdminRequest"></param>
        /// <param name="use"> (optional)</param>
        /// <param name="withFee"> (optional, default to false) (deprecated)</param>
        /// <param name="verify"> (optional, default to false)</param>
        /// <param name="callbackUrl"> (optional)</param>
        /// <param name="nonce"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of RemoveAdminDefaultResponse</returns>
        ApiResponse<RemoveAdminDefaultResponse> RemoveAdminWithHttpInfo(RemoveAdminRequest removeAdminRequest, string use = default(string), bool? withFee = default(bool?), bool? verify = default(bool?), string callbackUrl = default(string), decimal? nonce = default(decimal?), int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="Network.Unique.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="removeFromAllowListRequest"></param>
        /// <param name="use"> (optional)</param>
        /// <param name="withFee"> (optional, default to false) (deprecated)</param>
        /// <param name="verify"> (optional, default to false)</param>
        /// <param name="callbackUrl"> (optional)</param>
        /// <param name="nonce"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>RemoveFromAllowListDefaultResponse</returns>
        RemoveFromAllowListDefaultResponse RemoveFromAllowList(RemoveFromAllowListRequest removeFromAllowListRequest, string use = default(string), bool? withFee = default(bool?), bool? verify = default(bool?), string callbackUrl = default(string), decimal? nonce = default(decimal?), int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Network.Unique.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="removeFromAllowListRequest"></param>
        /// <param name="use"> (optional)</param>
        /// <param name="withFee"> (optional, default to false) (deprecated)</param>
        /// <param name="verify"> (optional, default to false)</param>
        /// <param name="callbackUrl"> (optional)</param>
        /// <param name="nonce"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of RemoveFromAllowListDefaultResponse</returns>
        ApiResponse<RemoveFromAllowListDefaultResponse> RemoveFromAllowListWithHttpInfo(RemoveFromAllowListRequest removeFromAllowListRequest, string use = default(string), bool? withFee = default(bool?), bool? verify = default(bool?), string callbackUrl = default(string), decimal? nonce = default(decimal?), int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="Network.Unique.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="removeSponsorshipRequest"></param>
        /// <param name="use"> (optional)</param>
        /// <param name="withFee"> (optional, default to false) (deprecated)</param>
        /// <param name="verify"> (optional, default to false)</param>
        /// <param name="callbackUrl"> (optional)</param>
        /// <param name="nonce"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>RemoveSponsorshipDefaultResponse</returns>
        RemoveSponsorshipDefaultResponse RemoveSponsorship(RemoveSponsorshipRequest removeSponsorshipRequest, string use = default(string), bool? withFee = default(bool?), bool? verify = default(bool?), string callbackUrl = default(string), decimal? nonce = default(decimal?), int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Network.Unique.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="removeSponsorshipRequest"></param>
        /// <param name="use"> (optional)</param>
        /// <param name="withFee"> (optional, default to false) (deprecated)</param>
        /// <param name="verify"> (optional, default to false)</param>
        /// <param name="callbackUrl"> (optional)</param>
        /// <param name="nonce"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of RemoveSponsorshipDefaultResponse</returns>
        ApiResponse<RemoveSponsorshipDefaultResponse> RemoveSponsorshipWithHttpInfo(RemoveSponsorshipRequest removeSponsorshipRequest, string use = default(string), bool? withFee = default(bool?), bool? verify = default(bool?), string callbackUrl = default(string), decimal? nonce = default(decimal?), int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="Network.Unique.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="setCollectionLimitsRequest"></param>
        /// <param name="use"> (optional)</param>
        /// <param name="withFee"> (optional, default to false) (deprecated)</param>
        /// <param name="verify"> (optional, default to false)</param>
        /// <param name="callbackUrl"> (optional)</param>
        /// <param name="nonce"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>SetCollectionLimitsDefaultResponse</returns>
        SetCollectionLimitsDefaultResponse SetCollectionLimits(SetCollectionLimitsRequest setCollectionLimitsRequest, string use = default(string), bool? withFee = default(bool?), bool? verify = default(bool?), string callbackUrl = default(string), decimal? nonce = default(decimal?), int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Network.Unique.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="setCollectionLimitsRequest"></param>
        /// <param name="use"> (optional)</param>
        /// <param name="withFee"> (optional, default to false) (deprecated)</param>
        /// <param name="verify"> (optional, default to false)</param>
        /// <param name="callbackUrl"> (optional)</param>
        /// <param name="nonce"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of SetCollectionLimitsDefaultResponse</returns>
        ApiResponse<SetCollectionLimitsDefaultResponse> SetCollectionLimitsWithHttpInfo(SetCollectionLimitsRequest setCollectionLimitsRequest, string use = default(string), bool? withFee = default(bool?), bool? verify = default(bool?), string callbackUrl = default(string), decimal? nonce = default(decimal?), int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="Network.Unique.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="setCollectionPropertiesRequest"></param>
        /// <param name="use"> (optional)</param>
        /// <param name="withFee"> (optional, default to false) (deprecated)</param>
        /// <param name="verify"> (optional, default to false)</param>
        /// <param name="callbackUrl"> (optional)</param>
        /// <param name="nonce"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>SetCollectionPropertiesDefaultResponse</returns>
        SetCollectionPropertiesDefaultResponse SetCollectionProperties(SetCollectionPropertiesRequest setCollectionPropertiesRequest, string use = default(string), bool? withFee = default(bool?), bool? verify = default(bool?), string callbackUrl = default(string), decimal? nonce = default(decimal?), int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Network.Unique.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="setCollectionPropertiesRequest"></param>
        /// <param name="use"> (optional)</param>
        /// <param name="withFee"> (optional, default to false) (deprecated)</param>
        /// <param name="verify"> (optional, default to false)</param>
        /// <param name="callbackUrl"> (optional)</param>
        /// <param name="nonce"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of SetCollectionPropertiesDefaultResponse</returns>
        ApiResponse<SetCollectionPropertiesDefaultResponse> SetCollectionPropertiesWithHttpInfo(SetCollectionPropertiesRequest setCollectionPropertiesRequest, string use = default(string), bool? withFee = default(bool?), bool? verify = default(bool?), string callbackUrl = default(string), decimal? nonce = default(decimal?), int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="Network.Unique.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="setPermissionsRequest"></param>
        /// <param name="use"> (optional)</param>
        /// <param name="withFee"> (optional, default to false) (deprecated)</param>
        /// <param name="verify"> (optional, default to false)</param>
        /// <param name="callbackUrl"> (optional)</param>
        /// <param name="nonce"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>SetPermissionsDefaultResponse</returns>
        SetPermissionsDefaultResponse SetPermissions(SetPermissionsRequest setPermissionsRequest, string use = default(string), bool? withFee = default(bool?), bool? verify = default(bool?), string callbackUrl = default(string), decimal? nonce = default(decimal?), int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Network.Unique.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="setPermissionsRequest"></param>
        /// <param name="use"> (optional)</param>
        /// <param name="withFee"> (optional, default to false) (deprecated)</param>
        /// <param name="verify"> (optional, default to false)</param>
        /// <param name="callbackUrl"> (optional)</param>
        /// <param name="nonce"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of SetPermissionsDefaultResponse</returns>
        ApiResponse<SetPermissionsDefaultResponse> SetPermissionsWithHttpInfo(SetPermissionsRequest setPermissionsRequest, string use = default(string), bool? withFee = default(bool?), bool? verify = default(bool?), string callbackUrl = default(string), decimal? nonce = default(decimal?), int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="Network.Unique.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="setPropertyPermissionsRequest"></param>
        /// <param name="use"> (optional)</param>
        /// <param name="withFee"> (optional, default to false) (deprecated)</param>
        /// <param name="verify"> (optional, default to false)</param>
        /// <param name="callbackUrl"> (optional)</param>
        /// <param name="nonce"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>SetPropertyPermissionsDefaultResponse</returns>
        SetPropertyPermissionsDefaultResponse SetPropertyPermissions(SetPropertyPermissionsRequest setPropertyPermissionsRequest, string use = default(string), bool? withFee = default(bool?), bool? verify = default(bool?), string callbackUrl = default(string), decimal? nonce = default(decimal?), int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Network.Unique.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="setPropertyPermissionsRequest"></param>
        /// <param name="use"> (optional)</param>
        /// <param name="withFee"> (optional, default to false) (deprecated)</param>
        /// <param name="verify"> (optional, default to false)</param>
        /// <param name="callbackUrl"> (optional)</param>
        /// <param name="nonce"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of SetPropertyPermissionsDefaultResponse</returns>
        ApiResponse<SetPropertyPermissionsDefaultResponse> SetPropertyPermissionsWithHttpInfo(SetPropertyPermissionsRequest setPropertyPermissionsRequest, string use = default(string), bool? withFee = default(bool?), bool? verify = default(bool?), string callbackUrl = default(string), decimal? nonce = default(decimal?), int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="Network.Unique.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="setSponsorshipRequest"></param>
        /// <param name="use"> (optional)</param>
        /// <param name="withFee"> (optional, default to false) (deprecated)</param>
        /// <param name="verify"> (optional, default to false)</param>
        /// <param name="callbackUrl"> (optional)</param>
        /// <param name="nonce"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>SetSponsorshipDefaultResponse</returns>
        SetSponsorshipDefaultResponse SetSponsorship(SetSponsorshipRequest setSponsorshipRequest, string use = default(string), bool? withFee = default(bool?), bool? verify = default(bool?), string callbackUrl = default(string), decimal? nonce = default(decimal?), int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Network.Unique.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="setSponsorshipRequest"></param>
        /// <param name="use"> (optional)</param>
        /// <param name="withFee"> (optional, default to false) (deprecated)</param>
        /// <param name="verify"> (optional, default to false)</param>
        /// <param name="callbackUrl"> (optional)</param>
        /// <param name="nonce"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of SetSponsorshipDefaultResponse</returns>
        ApiResponse<SetSponsorshipDefaultResponse> SetSponsorshipWithHttpInfo(SetSponsorshipRequest setSponsorshipRequest, string use = default(string), bool? withFee = default(bool?), bool? verify = default(bool?), string callbackUrl = default(string), decimal? nonce = default(decimal?), int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="Network.Unique.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="setTransfersEnabledRequest"></param>
        /// <param name="use"> (optional)</param>
        /// <param name="withFee"> (optional, default to false) (deprecated)</param>
        /// <param name="verify"> (optional, default to false)</param>
        /// <param name="callbackUrl"> (optional)</param>
        /// <param name="nonce"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>SetTransfersEnabledDefaultResponse</returns>
        SetTransfersEnabledDefaultResponse SetTransfersEnabled(SetTransfersEnabledRequest setTransfersEnabledRequest, string use = default(string), bool? withFee = default(bool?), bool? verify = default(bool?), string callbackUrl = default(string), decimal? nonce = default(decimal?), int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Network.Unique.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="setTransfersEnabledRequest"></param>
        /// <param name="use"> (optional)</param>
        /// <param name="withFee"> (optional, default to false) (deprecated)</param>
        /// <param name="verify"> (optional, default to false)</param>
        /// <param name="callbackUrl"> (optional)</param>
        /// <param name="nonce"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of SetTransfersEnabledDefaultResponse</returns>
        ApiResponse<SetTransfersEnabledDefaultResponse> SetTransfersEnabledWithHttpInfo(SetTransfersEnabledRequest setTransfersEnabledRequest, string use = default(string), bool? withFee = default(bool?), bool? verify = default(bool?), string callbackUrl = default(string), decimal? nonce = default(decimal?), int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="Network.Unique.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="transferRequest"></param>
        /// <param name="use"> (optional)</param>
        /// <param name="withFee"> (optional, default to false) (deprecated)</param>
        /// <param name="verify"> (optional, default to false)</param>
        /// <param name="callbackUrl"> (optional)</param>
        /// <param name="nonce"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>TransferDefaultResponse</returns>
        TransferDefaultResponse Transfer(TransferRequest transferRequest, string use = default(string), bool? withFee = default(bool?), bool? verify = default(bool?), string callbackUrl = default(string), decimal? nonce = default(decimal?), int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Network.Unique.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="transferRequest"></param>
        /// <param name="use"> (optional)</param>
        /// <param name="withFee"> (optional, default to false) (deprecated)</param>
        /// <param name="verify"> (optional, default to false)</param>
        /// <param name="callbackUrl"> (optional)</param>
        /// <param name="nonce"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of TransferDefaultResponse</returns>
        ApiResponse<TransferDefaultResponse> TransferWithHttpInfo(TransferRequest transferRequest, string use = default(string), bool? withFee = default(bool?), bool? verify = default(bool?), string callbackUrl = default(string), decimal? nonce = default(decimal?), int operationIndex = 0);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ICollectionsApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Network.Unique.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="addAdminRequest"></param>
        /// <param name="use"> (optional)</param>
        /// <param name="withFee"> (optional, default to false) (deprecated)</param>
        /// <param name="verify"> (optional, default to false)</param>
        /// <param name="callbackUrl"> (optional)</param>
        /// <param name="nonce"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of AddAdminDefaultResponse</returns>
        System.Threading.Tasks.Task<AddAdminDefaultResponse> AddAdminAsync(AddAdminRequest addAdminRequest, string use = default(string), bool? withFee = default(bool?), bool? verify = default(bool?), string callbackUrl = default(string), decimal? nonce = default(decimal?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Network.Unique.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="addAdminRequest"></param>
        /// <param name="use"> (optional)</param>
        /// <param name="withFee"> (optional, default to false) (deprecated)</param>
        /// <param name="verify"> (optional, default to false)</param>
        /// <param name="callbackUrl"> (optional)</param>
        /// <param name="nonce"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (AddAdminDefaultResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<AddAdminDefaultResponse>> AddAdminWithHttpInfoAsync(AddAdminRequest addAdminRequest, string use = default(string), bool? withFee = default(bool?), bool? verify = default(bool?), string callbackUrl = default(string), decimal? nonce = default(decimal?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Network.Unique.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="addToAllowListRequest"></param>
        /// <param name="use"> (optional)</param>
        /// <param name="withFee"> (optional, default to false) (deprecated)</param>
        /// <param name="verify"> (optional, default to false)</param>
        /// <param name="callbackUrl"> (optional)</param>
        /// <param name="nonce"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of AddToAllowListDefaultResponse</returns>
        System.Threading.Tasks.Task<AddToAllowListDefaultResponse> AddToAllowListAsync(AddToAllowListRequest addToAllowListRequest, string use = default(string), bool? withFee = default(bool?), bool? verify = default(bool?), string callbackUrl = default(string), decimal? nonce = default(decimal?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Network.Unique.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="addToAllowListRequest"></param>
        /// <param name="use"> (optional)</param>
        /// <param name="withFee"> (optional, default to false) (deprecated)</param>
        /// <param name="verify"> (optional, default to false)</param>
        /// <param name="callbackUrl"> (optional)</param>
        /// <param name="nonce"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (AddToAllowListDefaultResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<AddToAllowListDefaultResponse>> AddToAllowListWithHttpInfoAsync(AddToAllowListRequest addToAllowListRequest, string use = default(string), bool? withFee = default(bool?), bool? verify = default(bool?), string callbackUrl = default(string), decimal? nonce = default(decimal?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Network.Unique.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionId"></param>
        /// <param name="at">Hash of execution block (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of AdminlistResponse</returns>
        System.Threading.Tasks.Task<AdminlistResponse> CollectionControllerAdminsAsync(decimal collectionId, string at = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Network.Unique.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionId"></param>
        /// <param name="at">Hash of execution block (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (AdminlistResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<AdminlistResponse>> CollectionControllerAdminsWithHttpInfoAsync(decimal collectionId, string at = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Network.Unique.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionId"></param>
        /// <param name="at">Hash of execution block (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of AllowListBodyResult</returns>
        System.Threading.Tasks.Task<AllowListBodyResult> CollectionControllerAllowListAsync(decimal collectionId, string at = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Network.Unique.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionId"></param>
        /// <param name="at">Hash of execution block (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (AllowListBodyResult)</returns>
        System.Threading.Tasks.Task<ApiResponse<AllowListBodyResult>> CollectionControllerAllowListWithHttpInfoAsync(decimal collectionId, string at = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Network.Unique.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionId"></param>
        /// <param name="account">The ss-58 encoded address</param>
        /// <param name="at">Hash of execution block (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of AllowedResponse</returns>
        System.Threading.Tasks.Task<AllowedResponse> CollectionControllerAllowedAsync(decimal collectionId, string account, string at = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Network.Unique.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionId"></param>
        /// <param name="account">The ss-58 encoded address</param>
        /// <param name="at">Hash of execution block (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (AllowedResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<AllowedResponse>> CollectionControllerAllowedWithHttpInfoAsync(decimal collectionId, string account, string at = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Network.Unique.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionId"></param>
        /// <param name="at">Hash of execution block (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CollectionPropertiesResponse</returns>
        System.Threading.Tasks.Task<CollectionPropertiesResponse> CollectionControllerCollectionPropertiesAsync(decimal collectionId, string at = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Network.Unique.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionId"></param>
        /// <param name="at">Hash of execution block (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CollectionPropertiesResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<CollectionPropertiesResponse>> CollectionControllerCollectionPropertiesWithHttpInfoAsync(decimal collectionId, string at = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Network.Unique.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionId"></param>
        /// <param name="at">Hash of execution block (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GetCollectionTokensResponse</returns>
        System.Threading.Tasks.Task<GetCollectionTokensResponse> CollectionControllerCollectionTokensAsync(decimal collectionId, string at = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Network.Unique.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionId"></param>
        /// <param name="at">Hash of execution block (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GetCollectionTokensResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetCollectionTokensResponse>> CollectionControllerCollectionTokensWithHttpInfoAsync(decimal collectionId, string at = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Network.Unique.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionId"></param>
        /// <param name="at">Hash of execution block (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of EffectiveCollectionLimitsResponse</returns>
        System.Threading.Tasks.Task<EffectiveCollectionLimitsResponse> CollectionControllerEffectiveCollectionLimitsAsync(decimal collectionId, string at = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Network.Unique.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionId"></param>
        /// <param name="at">Hash of execution block (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (EffectiveCollectionLimitsResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<EffectiveCollectionLimitsResponse>> CollectionControllerEffectiveCollectionLimitsWithHttpInfoAsync(decimal collectionId, string at = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Network.Unique.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionId"></param>
        /// <param name="at">Hash of execution block (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CollectionInfoWithSchemaResponse</returns>
        System.Threading.Tasks.Task<CollectionInfoWithSchemaResponse> CollectionControllerGetCollectionAsync(decimal collectionId, string at = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Network.Unique.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionId"></param>
        /// <param name="at">Hash of execution block (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CollectionInfoWithSchemaResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<CollectionInfoWithSchemaResponse>> CollectionControllerGetCollectionWithHttpInfoAsync(decimal collectionId, string at = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Network.Unique.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionId"></param>
        /// <param name="at">Hash of execution block (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of LastTokenIdResultDto</returns>
        System.Threading.Tasks.Task<LastTokenIdResultDto> CollectionControllerLastTokenIdAsync(decimal collectionId, string at = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Network.Unique.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionId"></param>
        /// <param name="at">Hash of execution block (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (LastTokenIdResultDto)</returns>
        System.Threading.Tasks.Task<ApiResponse<LastTokenIdResultDto>> CollectionControllerLastTokenIdWithHttpInfoAsync(decimal collectionId, string at = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Network.Unique.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionId"></param>
        /// <param name="address">The ss-58 encoded address</param>
        /// <param name="tokenId"></param>
        /// <param name="at">Hash of execution block (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of NextSponsoredResponse</returns>
        System.Threading.Tasks.Task<NextSponsoredResponse> CollectionControllerNextSponsoredAsync(decimal collectionId, string address, decimal tokenId, string at = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Network.Unique.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionId"></param>
        /// <param name="address">The ss-58 encoded address</param>
        /// <param name="tokenId"></param>
        /// <param name="at">Hash of execution block (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (NextSponsoredResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<NextSponsoredResponse>> CollectionControllerNextSponsoredWithHttpInfoAsync(decimal collectionId, string address, decimal tokenId, string at = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Network.Unique.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionId"></param>
        /// <param name="propertyKeys"> (optional)</param>
        /// <param name="at">Hash of execution block (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of PropertyPermissionsResponse</returns>
        System.Threading.Tasks.Task<PropertyPermissionsResponse> CollectionControllerPropertyPermissionsAsync(decimal collectionId, List<string> propertyKeys = default(List<string>), string at = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Network.Unique.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionId"></param>
        /// <param name="propertyKeys"> (optional)</param>
        /// <param name="at">Hash of execution block (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (PropertyPermissionsResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<PropertyPermissionsResponse>> CollectionControllerPropertyPermissionsWithHttpInfoAsync(decimal collectionId, List<string> propertyKeys = default(List<string>), string at = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Network.Unique.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="at">Hash of execution block (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GetStatsResponse</returns>
        System.Threading.Tasks.Task<GetStatsResponse> CollectionControllerStatsAsync(string at = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Network.Unique.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="at">Hash of execution block (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GetStatsResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetStatsResponse>> CollectionControllerStatsWithHttpInfoAsync(string at = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Network.Unique.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionId"></param>
        /// <param name="at">Hash of execution block (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of TotalSupplyResponse</returns>
        System.Threading.Tasks.Task<TotalSupplyResponse> CollectionControllerTotalSupplyAsync(decimal collectionId, string at = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Network.Unique.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionId"></param>
        /// <param name="at">Hash of execution block (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (TotalSupplyResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<TotalSupplyResponse>> CollectionControllerTotalSupplyWithHttpInfoAsync(decimal collectionId, string at = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Network.Unique.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="confirmSponsorshipRequest"></param>
        /// <param name="use"> (optional)</param>
        /// <param name="withFee"> (optional, default to false) (deprecated)</param>
        /// <param name="verify"> (optional, default to false)</param>
        /// <param name="callbackUrl"> (optional)</param>
        /// <param name="nonce"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ConfirmSponsorshipDefaultResponse</returns>
        System.Threading.Tasks.Task<ConfirmSponsorshipDefaultResponse> ConfirmSponsorshipAsync(ConfirmSponsorshipRequest confirmSponsorshipRequest, string use = default(string), bool? withFee = default(bool?), bool? verify = default(bool?), string callbackUrl = default(string), decimal? nonce = default(decimal?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Network.Unique.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="confirmSponsorshipRequest"></param>
        /// <param name="use"> (optional)</param>
        /// <param name="withFee"> (optional, default to false) (deprecated)</param>
        /// <param name="verify"> (optional, default to false)</param>
        /// <param name="callbackUrl"> (optional)</param>
        /// <param name="nonce"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ConfirmSponsorshipDefaultResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ConfirmSponsorshipDefaultResponse>> ConfirmSponsorshipWithHttpInfoAsync(ConfirmSponsorshipRequest confirmSponsorshipRequest, string use = default(string), bool? withFee = default(bool?), bool? verify = default(bool?), string callbackUrl = default(string), decimal? nonce = default(decimal?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Network.Unique.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createCollectionMutationRequest"></param>
        /// <param name="use"> (optional)</param>
        /// <param name="withFee"> (optional, default to false) (deprecated)</param>
        /// <param name="verify"> (optional, default to false)</param>
        /// <param name="callbackUrl"> (optional)</param>
        /// <param name="nonce"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CreateCollectionMutationDefaultResponse</returns>
        System.Threading.Tasks.Task<CreateCollectionMutationDefaultResponse> CreateCollectionMutationAsync(CreateCollectionMutationRequest createCollectionMutationRequest, string use = default(string), bool? withFee = default(bool?), bool? verify = default(bool?), string callbackUrl = default(string), decimal? nonce = default(decimal?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Network.Unique.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createCollectionMutationRequest"></param>
        /// <param name="use"> (optional)</param>
        /// <param name="withFee"> (optional, default to false) (deprecated)</param>
        /// <param name="verify"> (optional, default to false)</param>
        /// <param name="callbackUrl"> (optional)</param>
        /// <param name="nonce"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CreateCollectionMutationDefaultResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<CreateCollectionMutationDefaultResponse>> CreateCollectionMutationWithHttpInfoAsync(CreateCollectionMutationRequest createCollectionMutationRequest, string use = default(string), bool? withFee = default(bool?), bool? verify = default(bool?), string callbackUrl = default(string), decimal? nonce = default(decimal?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Network.Unique.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deleteCollectionPropertiesRequest"></param>
        /// <param name="use"> (optional)</param>
        /// <param name="withFee"> (optional, default to false) (deprecated)</param>
        /// <param name="verify"> (optional, default to false)</param>
        /// <param name="callbackUrl"> (optional)</param>
        /// <param name="nonce"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of DeleteCollectionPropertiesDefaultResponse</returns>
        System.Threading.Tasks.Task<DeleteCollectionPropertiesDefaultResponse> DeleteCollectionPropertiesAsync(DeleteCollectionPropertiesRequest deleteCollectionPropertiesRequest, string use = default(string), bool? withFee = default(bool?), bool? verify = default(bool?), string callbackUrl = default(string), decimal? nonce = default(decimal?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Network.Unique.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deleteCollectionPropertiesRequest"></param>
        /// <param name="use"> (optional)</param>
        /// <param name="withFee"> (optional, default to false) (deprecated)</param>
        /// <param name="verify"> (optional, default to false)</param>
        /// <param name="callbackUrl"> (optional)</param>
        /// <param name="nonce"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (DeleteCollectionPropertiesDefaultResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<DeleteCollectionPropertiesDefaultResponse>> DeleteCollectionPropertiesWithHttpInfoAsync(DeleteCollectionPropertiesRequest deleteCollectionPropertiesRequest, string use = default(string), bool? withFee = default(bool?), bool? verify = default(bool?), string callbackUrl = default(string), decimal? nonce = default(decimal?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Network.Unique.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="destroyRequest"></param>
        /// <param name="use"> (optional)</param>
        /// <param name="withFee"> (optional, default to false) (deprecated)</param>
        /// <param name="verify"> (optional, default to false)</param>
        /// <param name="callbackUrl"> (optional)</param>
        /// <param name="nonce"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of DestroyDefaultResponse</returns>
        System.Threading.Tasks.Task<DestroyDefaultResponse> DestroyAsync(DestroyRequest destroyRequest, string use = default(string), bool? withFee = default(bool?), bool? verify = default(bool?), string callbackUrl = default(string), decimal? nonce = default(decimal?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Network.Unique.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="destroyRequest"></param>
        /// <param name="use"> (optional)</param>
        /// <param name="withFee"> (optional, default to false) (deprecated)</param>
        /// <param name="verify"> (optional, default to false)</param>
        /// <param name="callbackUrl"> (optional)</param>
        /// <param name="nonce"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (DestroyDefaultResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<DestroyDefaultResponse>> DestroyWithHttpInfoAsync(DestroyRequest destroyRequest, string use = default(string), bool? withFee = default(bool?), bool? verify = default(bool?), string callbackUrl = default(string), decimal? nonce = default(decimal?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Network.Unique.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="removeAdminRequest"></param>
        /// <param name="use"> (optional)</param>
        /// <param name="withFee"> (optional, default to false) (deprecated)</param>
        /// <param name="verify"> (optional, default to false)</param>
        /// <param name="callbackUrl"> (optional)</param>
        /// <param name="nonce"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of RemoveAdminDefaultResponse</returns>
        System.Threading.Tasks.Task<RemoveAdminDefaultResponse> RemoveAdminAsync(RemoveAdminRequest removeAdminRequest, string use = default(string), bool? withFee = default(bool?), bool? verify = default(bool?), string callbackUrl = default(string), decimal? nonce = default(decimal?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Network.Unique.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="removeAdminRequest"></param>
        /// <param name="use"> (optional)</param>
        /// <param name="withFee"> (optional, default to false) (deprecated)</param>
        /// <param name="verify"> (optional, default to false)</param>
        /// <param name="callbackUrl"> (optional)</param>
        /// <param name="nonce"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (RemoveAdminDefaultResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<RemoveAdminDefaultResponse>> RemoveAdminWithHttpInfoAsync(RemoveAdminRequest removeAdminRequest, string use = default(string), bool? withFee = default(bool?), bool? verify = default(bool?), string callbackUrl = default(string), decimal? nonce = default(decimal?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Network.Unique.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="removeFromAllowListRequest"></param>
        /// <param name="use"> (optional)</param>
        /// <param name="withFee"> (optional, default to false) (deprecated)</param>
        /// <param name="verify"> (optional, default to false)</param>
        /// <param name="callbackUrl"> (optional)</param>
        /// <param name="nonce"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of RemoveFromAllowListDefaultResponse</returns>
        System.Threading.Tasks.Task<RemoveFromAllowListDefaultResponse> RemoveFromAllowListAsync(RemoveFromAllowListRequest removeFromAllowListRequest, string use = default(string), bool? withFee = default(bool?), bool? verify = default(bool?), string callbackUrl = default(string), decimal? nonce = default(decimal?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Network.Unique.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="removeFromAllowListRequest"></param>
        /// <param name="use"> (optional)</param>
        /// <param name="withFee"> (optional, default to false) (deprecated)</param>
        /// <param name="verify"> (optional, default to false)</param>
        /// <param name="callbackUrl"> (optional)</param>
        /// <param name="nonce"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (RemoveFromAllowListDefaultResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<RemoveFromAllowListDefaultResponse>> RemoveFromAllowListWithHttpInfoAsync(RemoveFromAllowListRequest removeFromAllowListRequest, string use = default(string), bool? withFee = default(bool?), bool? verify = default(bool?), string callbackUrl = default(string), decimal? nonce = default(decimal?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Network.Unique.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="removeSponsorshipRequest"></param>
        /// <param name="use"> (optional)</param>
        /// <param name="withFee"> (optional, default to false) (deprecated)</param>
        /// <param name="verify"> (optional, default to false)</param>
        /// <param name="callbackUrl"> (optional)</param>
        /// <param name="nonce"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of RemoveSponsorshipDefaultResponse</returns>
        System.Threading.Tasks.Task<RemoveSponsorshipDefaultResponse> RemoveSponsorshipAsync(RemoveSponsorshipRequest removeSponsorshipRequest, string use = default(string), bool? withFee = default(bool?), bool? verify = default(bool?), string callbackUrl = default(string), decimal? nonce = default(decimal?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Network.Unique.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="removeSponsorshipRequest"></param>
        /// <param name="use"> (optional)</param>
        /// <param name="withFee"> (optional, default to false) (deprecated)</param>
        /// <param name="verify"> (optional, default to false)</param>
        /// <param name="callbackUrl"> (optional)</param>
        /// <param name="nonce"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (RemoveSponsorshipDefaultResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<RemoveSponsorshipDefaultResponse>> RemoveSponsorshipWithHttpInfoAsync(RemoveSponsorshipRequest removeSponsorshipRequest, string use = default(string), bool? withFee = default(bool?), bool? verify = default(bool?), string callbackUrl = default(string), decimal? nonce = default(decimal?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Network.Unique.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="setCollectionLimitsRequest"></param>
        /// <param name="use"> (optional)</param>
        /// <param name="withFee"> (optional, default to false) (deprecated)</param>
        /// <param name="verify"> (optional, default to false)</param>
        /// <param name="callbackUrl"> (optional)</param>
        /// <param name="nonce"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SetCollectionLimitsDefaultResponse</returns>
        System.Threading.Tasks.Task<SetCollectionLimitsDefaultResponse> SetCollectionLimitsAsync(SetCollectionLimitsRequest setCollectionLimitsRequest, string use = default(string), bool? withFee = default(bool?), bool? verify = default(bool?), string callbackUrl = default(string), decimal? nonce = default(decimal?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Network.Unique.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="setCollectionLimitsRequest"></param>
        /// <param name="use"> (optional)</param>
        /// <param name="withFee"> (optional, default to false) (deprecated)</param>
        /// <param name="verify"> (optional, default to false)</param>
        /// <param name="callbackUrl"> (optional)</param>
        /// <param name="nonce"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SetCollectionLimitsDefaultResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<SetCollectionLimitsDefaultResponse>> SetCollectionLimitsWithHttpInfoAsync(SetCollectionLimitsRequest setCollectionLimitsRequest, string use = default(string), bool? withFee = default(bool?), bool? verify = default(bool?), string callbackUrl = default(string), decimal? nonce = default(decimal?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Network.Unique.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="setCollectionPropertiesRequest"></param>
        /// <param name="use"> (optional)</param>
        /// <param name="withFee"> (optional, default to false) (deprecated)</param>
        /// <param name="verify"> (optional, default to false)</param>
        /// <param name="callbackUrl"> (optional)</param>
        /// <param name="nonce"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SetCollectionPropertiesDefaultResponse</returns>
        System.Threading.Tasks.Task<SetCollectionPropertiesDefaultResponse> SetCollectionPropertiesAsync(SetCollectionPropertiesRequest setCollectionPropertiesRequest, string use = default(string), bool? withFee = default(bool?), bool? verify = default(bool?), string callbackUrl = default(string), decimal? nonce = default(decimal?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Network.Unique.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="setCollectionPropertiesRequest"></param>
        /// <param name="use"> (optional)</param>
        /// <param name="withFee"> (optional, default to false) (deprecated)</param>
        /// <param name="verify"> (optional, default to false)</param>
        /// <param name="callbackUrl"> (optional)</param>
        /// <param name="nonce"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SetCollectionPropertiesDefaultResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<SetCollectionPropertiesDefaultResponse>> SetCollectionPropertiesWithHttpInfoAsync(SetCollectionPropertiesRequest setCollectionPropertiesRequest, string use = default(string), bool? withFee = default(bool?), bool? verify = default(bool?), string callbackUrl = default(string), decimal? nonce = default(decimal?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Network.Unique.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="setPermissionsRequest"></param>
        /// <param name="use"> (optional)</param>
        /// <param name="withFee"> (optional, default to false) (deprecated)</param>
        /// <param name="verify"> (optional, default to false)</param>
        /// <param name="callbackUrl"> (optional)</param>
        /// <param name="nonce"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SetPermissionsDefaultResponse</returns>
        System.Threading.Tasks.Task<SetPermissionsDefaultResponse> SetPermissionsAsync(SetPermissionsRequest setPermissionsRequest, string use = default(string), bool? withFee = default(bool?), bool? verify = default(bool?), string callbackUrl = default(string), decimal? nonce = default(decimal?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Network.Unique.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="setPermissionsRequest"></param>
        /// <param name="use"> (optional)</param>
        /// <param name="withFee"> (optional, default to false) (deprecated)</param>
        /// <param name="verify"> (optional, default to false)</param>
        /// <param name="callbackUrl"> (optional)</param>
        /// <param name="nonce"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SetPermissionsDefaultResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<SetPermissionsDefaultResponse>> SetPermissionsWithHttpInfoAsync(SetPermissionsRequest setPermissionsRequest, string use = default(string), bool? withFee = default(bool?), bool? verify = default(bool?), string callbackUrl = default(string), decimal? nonce = default(decimal?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Network.Unique.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="setPropertyPermissionsRequest"></param>
        /// <param name="use"> (optional)</param>
        /// <param name="withFee"> (optional, default to false) (deprecated)</param>
        /// <param name="verify"> (optional, default to false)</param>
        /// <param name="callbackUrl"> (optional)</param>
        /// <param name="nonce"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SetPropertyPermissionsDefaultResponse</returns>
        System.Threading.Tasks.Task<SetPropertyPermissionsDefaultResponse> SetPropertyPermissionsAsync(SetPropertyPermissionsRequest setPropertyPermissionsRequest, string use = default(string), bool? withFee = default(bool?), bool? verify = default(bool?), string callbackUrl = default(string), decimal? nonce = default(decimal?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Network.Unique.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="setPropertyPermissionsRequest"></param>
        /// <param name="use"> (optional)</param>
        /// <param name="withFee"> (optional, default to false) (deprecated)</param>
        /// <param name="verify"> (optional, default to false)</param>
        /// <param name="callbackUrl"> (optional)</param>
        /// <param name="nonce"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SetPropertyPermissionsDefaultResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<SetPropertyPermissionsDefaultResponse>> SetPropertyPermissionsWithHttpInfoAsync(SetPropertyPermissionsRequest setPropertyPermissionsRequest, string use = default(string), bool? withFee = default(bool?), bool? verify = default(bool?), string callbackUrl = default(string), decimal? nonce = default(decimal?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Network.Unique.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="setSponsorshipRequest"></param>
        /// <param name="use"> (optional)</param>
        /// <param name="withFee"> (optional, default to false) (deprecated)</param>
        /// <param name="verify"> (optional, default to false)</param>
        /// <param name="callbackUrl"> (optional)</param>
        /// <param name="nonce"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SetSponsorshipDefaultResponse</returns>
        System.Threading.Tasks.Task<SetSponsorshipDefaultResponse> SetSponsorshipAsync(SetSponsorshipRequest setSponsorshipRequest, string use = default(string), bool? withFee = default(bool?), bool? verify = default(bool?), string callbackUrl = default(string), decimal? nonce = default(decimal?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Network.Unique.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="setSponsorshipRequest"></param>
        /// <param name="use"> (optional)</param>
        /// <param name="withFee"> (optional, default to false) (deprecated)</param>
        /// <param name="verify"> (optional, default to false)</param>
        /// <param name="callbackUrl"> (optional)</param>
        /// <param name="nonce"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SetSponsorshipDefaultResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<SetSponsorshipDefaultResponse>> SetSponsorshipWithHttpInfoAsync(SetSponsorshipRequest setSponsorshipRequest, string use = default(string), bool? withFee = default(bool?), bool? verify = default(bool?), string callbackUrl = default(string), decimal? nonce = default(decimal?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Network.Unique.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="setTransfersEnabledRequest"></param>
        /// <param name="use"> (optional)</param>
        /// <param name="withFee"> (optional, default to false) (deprecated)</param>
        /// <param name="verify"> (optional, default to false)</param>
        /// <param name="callbackUrl"> (optional)</param>
        /// <param name="nonce"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SetTransfersEnabledDefaultResponse</returns>
        System.Threading.Tasks.Task<SetTransfersEnabledDefaultResponse> SetTransfersEnabledAsync(SetTransfersEnabledRequest setTransfersEnabledRequest, string use = default(string), bool? withFee = default(bool?), bool? verify = default(bool?), string callbackUrl = default(string), decimal? nonce = default(decimal?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Network.Unique.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="setTransfersEnabledRequest"></param>
        /// <param name="use"> (optional)</param>
        /// <param name="withFee"> (optional, default to false) (deprecated)</param>
        /// <param name="verify"> (optional, default to false)</param>
        /// <param name="callbackUrl"> (optional)</param>
        /// <param name="nonce"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SetTransfersEnabledDefaultResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<SetTransfersEnabledDefaultResponse>> SetTransfersEnabledWithHttpInfoAsync(SetTransfersEnabledRequest setTransfersEnabledRequest, string use = default(string), bool? withFee = default(bool?), bool? verify = default(bool?), string callbackUrl = default(string), decimal? nonce = default(decimal?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Network.Unique.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="transferRequest"></param>
        /// <param name="use"> (optional)</param>
        /// <param name="withFee"> (optional, default to false) (deprecated)</param>
        /// <param name="verify"> (optional, default to false)</param>
        /// <param name="callbackUrl"> (optional)</param>
        /// <param name="nonce"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of TransferDefaultResponse</returns>
        System.Threading.Tasks.Task<TransferDefaultResponse> TransferAsync(TransferRequest transferRequest, string use = default(string), bool? withFee = default(bool?), bool? verify = default(bool?), string callbackUrl = default(string), decimal? nonce = default(decimal?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Network.Unique.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="transferRequest"></param>
        /// <param name="use"> (optional)</param>
        /// <param name="withFee"> (optional, default to false) (deprecated)</param>
        /// <param name="verify"> (optional, default to false)</param>
        /// <param name="callbackUrl"> (optional)</param>
        /// <param name="nonce"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (TransferDefaultResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<TransferDefaultResponse>> TransferWithHttpInfoAsync(TransferRequest transferRequest, string use = default(string), bool? withFee = default(bool?), bool? verify = default(bool?), string callbackUrl = default(string), decimal? nonce = default(decimal?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ICollectionsApi : ICollectionsApiSync, ICollectionsApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class CollectionsApi : ICollectionsApi
    {
        private Network.Unique.API.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="CollectionsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public CollectionsApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="CollectionsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public CollectionsApi(string basePath)
        {
            this.Configuration = Network.Unique.API.Client.Configuration.MergeConfigurations(
                Network.Unique.API.Client.GlobalConfiguration.Instance,
                new Network.Unique.API.Client.Configuration { BasePath = basePath }
            );
            this.Client = new Network.Unique.API.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Network.Unique.API.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = Network.Unique.API.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="CollectionsApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public CollectionsApi(Network.Unique.API.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = Network.Unique.API.Client.Configuration.MergeConfigurations(
                Network.Unique.API.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new Network.Unique.API.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Network.Unique.API.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = Network.Unique.API.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="CollectionsApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public CollectionsApi(Network.Unique.API.Client.ISynchronousClient client, Network.Unique.API.Client.IAsynchronousClient asyncClient, Network.Unique.API.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = Network.Unique.API.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public Network.Unique.API.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public Network.Unique.API.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Network.Unique.API.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Network.Unique.API.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Network.Unique.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="addAdminRequest"></param>
        /// <param name="use"> (optional)</param>
        /// <param name="withFee"> (optional, default to false) (deprecated)</param>
        /// <param name="verify"> (optional, default to false)</param>
        /// <param name="callbackUrl"> (optional)</param>
        /// <param name="nonce"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>AddAdminDefaultResponse</returns>
        public AddAdminDefaultResponse AddAdmin(AddAdminRequest addAdminRequest, string use = default(string), bool? withFee = default(bool?), bool? verify = default(bool?), string callbackUrl = default(string), decimal? nonce = default(decimal?), int operationIndex = 0)
        {
            Network.Unique.API.Client.ApiResponse<AddAdminDefaultResponse> localVarResponse = AddAdminWithHttpInfo(addAdminRequest, use, withFee, verify, callbackUrl, nonce);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Network.Unique.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="addAdminRequest"></param>
        /// <param name="use"> (optional)</param>
        /// <param name="withFee"> (optional, default to false) (deprecated)</param>
        /// <param name="verify"> (optional, default to false)</param>
        /// <param name="callbackUrl"> (optional)</param>
        /// <param name="nonce"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of AddAdminDefaultResponse</returns>
        public Network.Unique.API.Client.ApiResponse<AddAdminDefaultResponse> AddAdminWithHttpInfo(AddAdminRequest addAdminRequest, string use = default(string), bool? withFee = default(bool?), bool? verify = default(bool?), string callbackUrl = default(string), decimal? nonce = default(decimal?), int operationIndex = 0)
        {
            // verify the required parameter 'addAdminRequest' is set
            if (addAdminRequest == null)
            {
                throw new Network.Unique.API.Client.ApiException(400, "Missing required parameter 'addAdminRequest' when calling CollectionsApi->AddAdmin");
            }

            Network.Unique.API.Client.RequestOptions localVarRequestOptions = new Network.Unique.API.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Network.Unique.API.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Network.Unique.API.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (use != null)
            {
                localVarRequestOptions.QueryParameters.Add(Network.Unique.API.Client.ClientUtils.ParameterToMultiMap("", "use", use));
            }
            if (withFee != null)
            {
                localVarRequestOptions.QueryParameters.Add(Network.Unique.API.Client.ClientUtils.ParameterToMultiMap("", "withFee", withFee));
            }
            if (verify != null)
            {
                localVarRequestOptions.QueryParameters.Add(Network.Unique.API.Client.ClientUtils.ParameterToMultiMap("", "verify", verify));
            }
            if (callbackUrl != null)
            {
                localVarRequestOptions.QueryParameters.Add(Network.Unique.API.Client.ClientUtils.ParameterToMultiMap("", "callbackUrl", callbackUrl));
            }
            if (nonce != null)
            {
                localVarRequestOptions.QueryParameters.Add(Network.Unique.API.Client.ClientUtils.ParameterToMultiMap("", "nonce", nonce));
            }
            localVarRequestOptions.Data = addAdminRequest;

            localVarRequestOptions.Operation = "CollectionsApi.AddAdmin";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (SeedAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<AddAdminDefaultResponse>("/v1/collections/admins", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AddAdmin", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Network.Unique.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="addAdminRequest"></param>
        /// <param name="use"> (optional)</param>
        /// <param name="withFee"> (optional, default to false) (deprecated)</param>
        /// <param name="verify"> (optional, default to false)</param>
        /// <param name="callbackUrl"> (optional)</param>
        /// <param name="nonce"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of AddAdminDefaultResponse</returns>
        public async System.Threading.Tasks.Task<AddAdminDefaultResponse> AddAdminAsync(AddAdminRequest addAdminRequest, string use = default(string), bool? withFee = default(bool?), bool? verify = default(bool?), string callbackUrl = default(string), decimal? nonce = default(decimal?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Network.Unique.API.Client.ApiResponse<AddAdminDefaultResponse> localVarResponse = await AddAdminWithHttpInfoAsync(addAdminRequest, use, withFee, verify, callbackUrl, nonce, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Network.Unique.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="addAdminRequest"></param>
        /// <param name="use"> (optional)</param>
        /// <param name="withFee"> (optional, default to false) (deprecated)</param>
        /// <param name="verify"> (optional, default to false)</param>
        /// <param name="callbackUrl"> (optional)</param>
        /// <param name="nonce"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (AddAdminDefaultResponse)</returns>
        public async System.Threading.Tasks.Task<Network.Unique.API.Client.ApiResponse<AddAdminDefaultResponse>> AddAdminWithHttpInfoAsync(AddAdminRequest addAdminRequest, string use = default(string), bool? withFee = default(bool?), bool? verify = default(bool?), string callbackUrl = default(string), decimal? nonce = default(decimal?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'addAdminRequest' is set
            if (addAdminRequest == null)
            {
                throw new Network.Unique.API.Client.ApiException(400, "Missing required parameter 'addAdminRequest' when calling CollectionsApi->AddAdmin");
            }


            Network.Unique.API.Client.RequestOptions localVarRequestOptions = new Network.Unique.API.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Network.Unique.API.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Network.Unique.API.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (use != null)
            {
                localVarRequestOptions.QueryParameters.Add(Network.Unique.API.Client.ClientUtils.ParameterToMultiMap("", "use", use));
            }
            if (withFee != null)
            {
                localVarRequestOptions.QueryParameters.Add(Network.Unique.API.Client.ClientUtils.ParameterToMultiMap("", "withFee", withFee));
            }
            if (verify != null)
            {
                localVarRequestOptions.QueryParameters.Add(Network.Unique.API.Client.ClientUtils.ParameterToMultiMap("", "verify", verify));
            }
            if (callbackUrl != null)
            {
                localVarRequestOptions.QueryParameters.Add(Network.Unique.API.Client.ClientUtils.ParameterToMultiMap("", "callbackUrl", callbackUrl));
            }
            if (nonce != null)
            {
                localVarRequestOptions.QueryParameters.Add(Network.Unique.API.Client.ClientUtils.ParameterToMultiMap("", "nonce", nonce));
            }
            localVarRequestOptions.Data = addAdminRequest;

            localVarRequestOptions.Operation = "CollectionsApi.AddAdmin";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (SeedAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<AddAdminDefaultResponse>("/v1/collections/admins", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AddAdmin", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Network.Unique.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="addToAllowListRequest"></param>
        /// <param name="use"> (optional)</param>
        /// <param name="withFee"> (optional, default to false) (deprecated)</param>
        /// <param name="verify"> (optional, default to false)</param>
        /// <param name="callbackUrl"> (optional)</param>
        /// <param name="nonce"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>AddToAllowListDefaultResponse</returns>
        public AddToAllowListDefaultResponse AddToAllowList(AddToAllowListRequest addToAllowListRequest, string use = default(string), bool? withFee = default(bool?), bool? verify = default(bool?), string callbackUrl = default(string), decimal? nonce = default(decimal?), int operationIndex = 0)
        {
            Network.Unique.API.Client.ApiResponse<AddToAllowListDefaultResponse> localVarResponse = AddToAllowListWithHttpInfo(addToAllowListRequest, use, withFee, verify, callbackUrl, nonce);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Network.Unique.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="addToAllowListRequest"></param>
        /// <param name="use"> (optional)</param>
        /// <param name="withFee"> (optional, default to false) (deprecated)</param>
        /// <param name="verify"> (optional, default to false)</param>
        /// <param name="callbackUrl"> (optional)</param>
        /// <param name="nonce"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of AddToAllowListDefaultResponse</returns>
        public Network.Unique.API.Client.ApiResponse<AddToAllowListDefaultResponse> AddToAllowListWithHttpInfo(AddToAllowListRequest addToAllowListRequest, string use = default(string), bool? withFee = default(bool?), bool? verify = default(bool?), string callbackUrl = default(string), decimal? nonce = default(decimal?), int operationIndex = 0)
        {
            // verify the required parameter 'addToAllowListRequest' is set
            if (addToAllowListRequest == null)
            {
                throw new Network.Unique.API.Client.ApiException(400, "Missing required parameter 'addToAllowListRequest' when calling CollectionsApi->AddToAllowList");
            }

            Network.Unique.API.Client.RequestOptions localVarRequestOptions = new Network.Unique.API.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Network.Unique.API.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Network.Unique.API.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (use != null)
            {
                localVarRequestOptions.QueryParameters.Add(Network.Unique.API.Client.ClientUtils.ParameterToMultiMap("", "use", use));
            }
            if (withFee != null)
            {
                localVarRequestOptions.QueryParameters.Add(Network.Unique.API.Client.ClientUtils.ParameterToMultiMap("", "withFee", withFee));
            }
            if (verify != null)
            {
                localVarRequestOptions.QueryParameters.Add(Network.Unique.API.Client.ClientUtils.ParameterToMultiMap("", "verify", verify));
            }
            if (callbackUrl != null)
            {
                localVarRequestOptions.QueryParameters.Add(Network.Unique.API.Client.ClientUtils.ParameterToMultiMap("", "callbackUrl", callbackUrl));
            }
            if (nonce != null)
            {
                localVarRequestOptions.QueryParameters.Add(Network.Unique.API.Client.ClientUtils.ParameterToMultiMap("", "nonce", nonce));
            }
            localVarRequestOptions.Data = addToAllowListRequest;

            localVarRequestOptions.Operation = "CollectionsApi.AddToAllowList";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (SeedAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<AddToAllowListDefaultResponse>("/v1/collections/add-to-allow-list", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AddToAllowList", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Network.Unique.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="addToAllowListRequest"></param>
        /// <param name="use"> (optional)</param>
        /// <param name="withFee"> (optional, default to false) (deprecated)</param>
        /// <param name="verify"> (optional, default to false)</param>
        /// <param name="callbackUrl"> (optional)</param>
        /// <param name="nonce"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of AddToAllowListDefaultResponse</returns>
        public async System.Threading.Tasks.Task<AddToAllowListDefaultResponse> AddToAllowListAsync(AddToAllowListRequest addToAllowListRequest, string use = default(string), bool? withFee = default(bool?), bool? verify = default(bool?), string callbackUrl = default(string), decimal? nonce = default(decimal?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Network.Unique.API.Client.ApiResponse<AddToAllowListDefaultResponse> localVarResponse = await AddToAllowListWithHttpInfoAsync(addToAllowListRequest, use, withFee, verify, callbackUrl, nonce, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Network.Unique.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="addToAllowListRequest"></param>
        /// <param name="use"> (optional)</param>
        /// <param name="withFee"> (optional, default to false) (deprecated)</param>
        /// <param name="verify"> (optional, default to false)</param>
        /// <param name="callbackUrl"> (optional)</param>
        /// <param name="nonce"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (AddToAllowListDefaultResponse)</returns>
        public async System.Threading.Tasks.Task<Network.Unique.API.Client.ApiResponse<AddToAllowListDefaultResponse>> AddToAllowListWithHttpInfoAsync(AddToAllowListRequest addToAllowListRequest, string use = default(string), bool? withFee = default(bool?), bool? verify = default(bool?), string callbackUrl = default(string), decimal? nonce = default(decimal?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'addToAllowListRequest' is set
            if (addToAllowListRequest == null)
            {
                throw new Network.Unique.API.Client.ApiException(400, "Missing required parameter 'addToAllowListRequest' when calling CollectionsApi->AddToAllowList");
            }


            Network.Unique.API.Client.RequestOptions localVarRequestOptions = new Network.Unique.API.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Network.Unique.API.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Network.Unique.API.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (use != null)
            {
                localVarRequestOptions.QueryParameters.Add(Network.Unique.API.Client.ClientUtils.ParameterToMultiMap("", "use", use));
            }
            if (withFee != null)
            {
                localVarRequestOptions.QueryParameters.Add(Network.Unique.API.Client.ClientUtils.ParameterToMultiMap("", "withFee", withFee));
            }
            if (verify != null)
            {
                localVarRequestOptions.QueryParameters.Add(Network.Unique.API.Client.ClientUtils.ParameterToMultiMap("", "verify", verify));
            }
            if (callbackUrl != null)
            {
                localVarRequestOptions.QueryParameters.Add(Network.Unique.API.Client.ClientUtils.ParameterToMultiMap("", "callbackUrl", callbackUrl));
            }
            if (nonce != null)
            {
                localVarRequestOptions.QueryParameters.Add(Network.Unique.API.Client.ClientUtils.ParameterToMultiMap("", "nonce", nonce));
            }
            localVarRequestOptions.Data = addToAllowListRequest;

            localVarRequestOptions.Operation = "CollectionsApi.AddToAllowList";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (SeedAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<AddToAllowListDefaultResponse>("/v1/collections/add-to-allow-list", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AddToAllowList", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Network.Unique.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionId"></param>
        /// <param name="at">Hash of execution block (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>AdminlistResponse</returns>
        public AdminlistResponse CollectionControllerAdmins(decimal collectionId, string at = default(string), int operationIndex = 0)
        {
            Network.Unique.API.Client.ApiResponse<AdminlistResponse> localVarResponse = CollectionControllerAdminsWithHttpInfo(collectionId, at);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Network.Unique.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionId"></param>
        /// <param name="at">Hash of execution block (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of AdminlistResponse</returns>
        public Network.Unique.API.Client.ApiResponse<AdminlistResponse> CollectionControllerAdminsWithHttpInfo(decimal collectionId, string at = default(string), int operationIndex = 0)
        {
            Network.Unique.API.Client.RequestOptions localVarRequestOptions = new Network.Unique.API.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Network.Unique.API.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Network.Unique.API.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (at != null)
            {
                localVarRequestOptions.QueryParameters.Add(Network.Unique.API.Client.ClientUtils.ParameterToMultiMap("", "at", at));
            }
            localVarRequestOptions.QueryParameters.Add(Network.Unique.API.Client.ClientUtils.ParameterToMultiMap("", "collectionId", collectionId));

            localVarRequestOptions.Operation = "CollectionsApi.CollectionControllerAdmins";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Get<AdminlistResponse>("/v1/collections/admins", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CollectionControllerAdmins", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Network.Unique.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionId"></param>
        /// <param name="at">Hash of execution block (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of AdminlistResponse</returns>
        public async System.Threading.Tasks.Task<AdminlistResponse> CollectionControllerAdminsAsync(decimal collectionId, string at = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Network.Unique.API.Client.ApiResponse<AdminlistResponse> localVarResponse = await CollectionControllerAdminsWithHttpInfoAsync(collectionId, at, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Network.Unique.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionId"></param>
        /// <param name="at">Hash of execution block (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (AdminlistResponse)</returns>
        public async System.Threading.Tasks.Task<Network.Unique.API.Client.ApiResponse<AdminlistResponse>> CollectionControllerAdminsWithHttpInfoAsync(decimal collectionId, string at = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Network.Unique.API.Client.RequestOptions localVarRequestOptions = new Network.Unique.API.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Network.Unique.API.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Network.Unique.API.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (at != null)
            {
                localVarRequestOptions.QueryParameters.Add(Network.Unique.API.Client.ClientUtils.ParameterToMultiMap("", "at", at));
            }
            localVarRequestOptions.QueryParameters.Add(Network.Unique.API.Client.ClientUtils.ParameterToMultiMap("", "collectionId", collectionId));

            localVarRequestOptions.Operation = "CollectionsApi.CollectionControllerAdmins";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<AdminlistResponse>("/v1/collections/admins", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CollectionControllerAdmins", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Network.Unique.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionId"></param>
        /// <param name="at">Hash of execution block (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>AllowListBodyResult</returns>
        public AllowListBodyResult CollectionControllerAllowList(decimal collectionId, string at = default(string), int operationIndex = 0)
        {
            Network.Unique.API.Client.ApiResponse<AllowListBodyResult> localVarResponse = CollectionControllerAllowListWithHttpInfo(collectionId, at);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Network.Unique.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionId"></param>
        /// <param name="at">Hash of execution block (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of AllowListBodyResult</returns>
        public Network.Unique.API.Client.ApiResponse<AllowListBodyResult> CollectionControllerAllowListWithHttpInfo(decimal collectionId, string at = default(string), int operationIndex = 0)
        {
            Network.Unique.API.Client.RequestOptions localVarRequestOptions = new Network.Unique.API.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Network.Unique.API.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Network.Unique.API.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (at != null)
            {
                localVarRequestOptions.QueryParameters.Add(Network.Unique.API.Client.ClientUtils.ParameterToMultiMap("", "at", at));
            }
            localVarRequestOptions.QueryParameters.Add(Network.Unique.API.Client.ClientUtils.ParameterToMultiMap("", "collectionId", collectionId));

            localVarRequestOptions.Operation = "CollectionsApi.CollectionControllerAllowList";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Get<AllowListBodyResult>("/v1/collections/allow-list", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CollectionControllerAllowList", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Network.Unique.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionId"></param>
        /// <param name="at">Hash of execution block (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of AllowListBodyResult</returns>
        public async System.Threading.Tasks.Task<AllowListBodyResult> CollectionControllerAllowListAsync(decimal collectionId, string at = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Network.Unique.API.Client.ApiResponse<AllowListBodyResult> localVarResponse = await CollectionControllerAllowListWithHttpInfoAsync(collectionId, at, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Network.Unique.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionId"></param>
        /// <param name="at">Hash of execution block (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (AllowListBodyResult)</returns>
        public async System.Threading.Tasks.Task<Network.Unique.API.Client.ApiResponse<AllowListBodyResult>> CollectionControllerAllowListWithHttpInfoAsync(decimal collectionId, string at = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Network.Unique.API.Client.RequestOptions localVarRequestOptions = new Network.Unique.API.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Network.Unique.API.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Network.Unique.API.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (at != null)
            {
                localVarRequestOptions.QueryParameters.Add(Network.Unique.API.Client.ClientUtils.ParameterToMultiMap("", "at", at));
            }
            localVarRequestOptions.QueryParameters.Add(Network.Unique.API.Client.ClientUtils.ParameterToMultiMap("", "collectionId", collectionId));

            localVarRequestOptions.Operation = "CollectionsApi.CollectionControllerAllowList";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<AllowListBodyResult>("/v1/collections/allow-list", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CollectionControllerAllowList", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Network.Unique.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionId"></param>
        /// <param name="account">The ss-58 encoded address</param>
        /// <param name="at">Hash of execution block (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>AllowedResponse</returns>
        public AllowedResponse CollectionControllerAllowed(decimal collectionId, string account, string at = default(string), int operationIndex = 0)
        {
            Network.Unique.API.Client.ApiResponse<AllowedResponse> localVarResponse = CollectionControllerAllowedWithHttpInfo(collectionId, account, at);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Network.Unique.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionId"></param>
        /// <param name="account">The ss-58 encoded address</param>
        /// <param name="at">Hash of execution block (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of AllowedResponse</returns>
        public Network.Unique.API.Client.ApiResponse<AllowedResponse> CollectionControllerAllowedWithHttpInfo(decimal collectionId, string account, string at = default(string), int operationIndex = 0)
        {
            // verify the required parameter 'account' is set
            if (account == null)
            {
                throw new Network.Unique.API.Client.ApiException(400, "Missing required parameter 'account' when calling CollectionsApi->CollectionControllerAllowed");
            }

            Network.Unique.API.Client.RequestOptions localVarRequestOptions = new Network.Unique.API.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Network.Unique.API.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Network.Unique.API.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (at != null)
            {
                localVarRequestOptions.QueryParameters.Add(Network.Unique.API.Client.ClientUtils.ParameterToMultiMap("", "at", at));
            }
            localVarRequestOptions.QueryParameters.Add(Network.Unique.API.Client.ClientUtils.ParameterToMultiMap("", "collectionId", collectionId));
            localVarRequestOptions.QueryParameters.Add(Network.Unique.API.Client.ClientUtils.ParameterToMultiMap("", "account", account));

            localVarRequestOptions.Operation = "CollectionsApi.CollectionControllerAllowed";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Get<AllowedResponse>("/v1/collections/allowed", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CollectionControllerAllowed", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Network.Unique.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionId"></param>
        /// <param name="account">The ss-58 encoded address</param>
        /// <param name="at">Hash of execution block (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of AllowedResponse</returns>
        public async System.Threading.Tasks.Task<AllowedResponse> CollectionControllerAllowedAsync(decimal collectionId, string account, string at = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Network.Unique.API.Client.ApiResponse<AllowedResponse> localVarResponse = await CollectionControllerAllowedWithHttpInfoAsync(collectionId, account, at, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Network.Unique.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionId"></param>
        /// <param name="account">The ss-58 encoded address</param>
        /// <param name="at">Hash of execution block (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (AllowedResponse)</returns>
        public async System.Threading.Tasks.Task<Network.Unique.API.Client.ApiResponse<AllowedResponse>> CollectionControllerAllowedWithHttpInfoAsync(decimal collectionId, string account, string at = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'account' is set
            if (account == null)
            {
                throw new Network.Unique.API.Client.ApiException(400, "Missing required parameter 'account' when calling CollectionsApi->CollectionControllerAllowed");
            }


            Network.Unique.API.Client.RequestOptions localVarRequestOptions = new Network.Unique.API.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Network.Unique.API.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Network.Unique.API.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (at != null)
            {
                localVarRequestOptions.QueryParameters.Add(Network.Unique.API.Client.ClientUtils.ParameterToMultiMap("", "at", at));
            }
            localVarRequestOptions.QueryParameters.Add(Network.Unique.API.Client.ClientUtils.ParameterToMultiMap("", "collectionId", collectionId));
            localVarRequestOptions.QueryParameters.Add(Network.Unique.API.Client.ClientUtils.ParameterToMultiMap("", "account", account));

            localVarRequestOptions.Operation = "CollectionsApi.CollectionControllerAllowed";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<AllowedResponse>("/v1/collections/allowed", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CollectionControllerAllowed", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Network.Unique.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionId"></param>
        /// <param name="at">Hash of execution block (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>CollectionPropertiesResponse</returns>
        public CollectionPropertiesResponse CollectionControllerCollectionProperties(decimal collectionId, string at = default(string), int operationIndex = 0)
        {
            Network.Unique.API.Client.ApiResponse<CollectionPropertiesResponse> localVarResponse = CollectionControllerCollectionPropertiesWithHttpInfo(collectionId, at);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Network.Unique.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionId"></param>
        /// <param name="at">Hash of execution block (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of CollectionPropertiesResponse</returns>
        public Network.Unique.API.Client.ApiResponse<CollectionPropertiesResponse> CollectionControllerCollectionPropertiesWithHttpInfo(decimal collectionId, string at = default(string), int operationIndex = 0)
        {
            Network.Unique.API.Client.RequestOptions localVarRequestOptions = new Network.Unique.API.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Network.Unique.API.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Network.Unique.API.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (at != null)
            {
                localVarRequestOptions.QueryParameters.Add(Network.Unique.API.Client.ClientUtils.ParameterToMultiMap("", "at", at));
            }
            localVarRequestOptions.QueryParameters.Add(Network.Unique.API.Client.ClientUtils.ParameterToMultiMap("", "collectionId", collectionId));

            localVarRequestOptions.Operation = "CollectionsApi.CollectionControllerCollectionProperties";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Get<CollectionPropertiesResponse>("/v1/collections/properties", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CollectionControllerCollectionProperties", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Network.Unique.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionId"></param>
        /// <param name="at">Hash of execution block (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CollectionPropertiesResponse</returns>
        public async System.Threading.Tasks.Task<CollectionPropertiesResponse> CollectionControllerCollectionPropertiesAsync(decimal collectionId, string at = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Network.Unique.API.Client.ApiResponse<CollectionPropertiesResponse> localVarResponse = await CollectionControllerCollectionPropertiesWithHttpInfoAsync(collectionId, at, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Network.Unique.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionId"></param>
        /// <param name="at">Hash of execution block (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CollectionPropertiesResponse)</returns>
        public async System.Threading.Tasks.Task<Network.Unique.API.Client.ApiResponse<CollectionPropertiesResponse>> CollectionControllerCollectionPropertiesWithHttpInfoAsync(decimal collectionId, string at = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Network.Unique.API.Client.RequestOptions localVarRequestOptions = new Network.Unique.API.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Network.Unique.API.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Network.Unique.API.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (at != null)
            {
                localVarRequestOptions.QueryParameters.Add(Network.Unique.API.Client.ClientUtils.ParameterToMultiMap("", "at", at));
            }
            localVarRequestOptions.QueryParameters.Add(Network.Unique.API.Client.ClientUtils.ParameterToMultiMap("", "collectionId", collectionId));

            localVarRequestOptions.Operation = "CollectionsApi.CollectionControllerCollectionProperties";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<CollectionPropertiesResponse>("/v1/collections/properties", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CollectionControllerCollectionProperties", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Network.Unique.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionId"></param>
        /// <param name="at">Hash of execution block (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>GetCollectionTokensResponse</returns>
        public GetCollectionTokensResponse CollectionControllerCollectionTokens(decimal collectionId, string at = default(string), int operationIndex = 0)
        {
            Network.Unique.API.Client.ApiResponse<GetCollectionTokensResponse> localVarResponse = CollectionControllerCollectionTokensWithHttpInfo(collectionId, at);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Network.Unique.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionId"></param>
        /// <param name="at">Hash of execution block (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of GetCollectionTokensResponse</returns>
        public Network.Unique.API.Client.ApiResponse<GetCollectionTokensResponse> CollectionControllerCollectionTokensWithHttpInfo(decimal collectionId, string at = default(string), int operationIndex = 0)
        {
            Network.Unique.API.Client.RequestOptions localVarRequestOptions = new Network.Unique.API.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Network.Unique.API.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Network.Unique.API.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (at != null)
            {
                localVarRequestOptions.QueryParameters.Add(Network.Unique.API.Client.ClientUtils.ParameterToMultiMap("", "at", at));
            }
            localVarRequestOptions.QueryParameters.Add(Network.Unique.API.Client.ClientUtils.ParameterToMultiMap("", "collectionId", collectionId));

            localVarRequestOptions.Operation = "CollectionsApi.CollectionControllerCollectionTokens";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Get<GetCollectionTokensResponse>("/v1/collections/tokens", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CollectionControllerCollectionTokens", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Network.Unique.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionId"></param>
        /// <param name="at">Hash of execution block (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GetCollectionTokensResponse</returns>
        public async System.Threading.Tasks.Task<GetCollectionTokensResponse> CollectionControllerCollectionTokensAsync(decimal collectionId, string at = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Network.Unique.API.Client.ApiResponse<GetCollectionTokensResponse> localVarResponse = await CollectionControllerCollectionTokensWithHttpInfoAsync(collectionId, at, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Network.Unique.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionId"></param>
        /// <param name="at">Hash of execution block (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GetCollectionTokensResponse)</returns>
        public async System.Threading.Tasks.Task<Network.Unique.API.Client.ApiResponse<GetCollectionTokensResponse>> CollectionControllerCollectionTokensWithHttpInfoAsync(decimal collectionId, string at = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Network.Unique.API.Client.RequestOptions localVarRequestOptions = new Network.Unique.API.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Network.Unique.API.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Network.Unique.API.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (at != null)
            {
                localVarRequestOptions.QueryParameters.Add(Network.Unique.API.Client.ClientUtils.ParameterToMultiMap("", "at", at));
            }
            localVarRequestOptions.QueryParameters.Add(Network.Unique.API.Client.ClientUtils.ParameterToMultiMap("", "collectionId", collectionId));

            localVarRequestOptions.Operation = "CollectionsApi.CollectionControllerCollectionTokens";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<GetCollectionTokensResponse>("/v1/collections/tokens", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CollectionControllerCollectionTokens", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Network.Unique.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionId"></param>
        /// <param name="at">Hash of execution block (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>EffectiveCollectionLimitsResponse</returns>
        public EffectiveCollectionLimitsResponse CollectionControllerEffectiveCollectionLimits(decimal collectionId, string at = default(string), int operationIndex = 0)
        {
            Network.Unique.API.Client.ApiResponse<EffectiveCollectionLimitsResponse> localVarResponse = CollectionControllerEffectiveCollectionLimitsWithHttpInfo(collectionId, at);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Network.Unique.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionId"></param>
        /// <param name="at">Hash of execution block (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of EffectiveCollectionLimitsResponse</returns>
        public Network.Unique.API.Client.ApiResponse<EffectiveCollectionLimitsResponse> CollectionControllerEffectiveCollectionLimitsWithHttpInfo(decimal collectionId, string at = default(string), int operationIndex = 0)
        {
            Network.Unique.API.Client.RequestOptions localVarRequestOptions = new Network.Unique.API.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Network.Unique.API.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Network.Unique.API.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (at != null)
            {
                localVarRequestOptions.QueryParameters.Add(Network.Unique.API.Client.ClientUtils.ParameterToMultiMap("", "at", at));
            }
            localVarRequestOptions.QueryParameters.Add(Network.Unique.API.Client.ClientUtils.ParameterToMultiMap("", "collectionId", collectionId));

            localVarRequestOptions.Operation = "CollectionsApi.CollectionControllerEffectiveCollectionLimits";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Get<EffectiveCollectionLimitsResponse>("/v1/collections/limits", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CollectionControllerEffectiveCollectionLimits", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Network.Unique.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionId"></param>
        /// <param name="at">Hash of execution block (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of EffectiveCollectionLimitsResponse</returns>
        public async System.Threading.Tasks.Task<EffectiveCollectionLimitsResponse> CollectionControllerEffectiveCollectionLimitsAsync(decimal collectionId, string at = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Network.Unique.API.Client.ApiResponse<EffectiveCollectionLimitsResponse> localVarResponse = await CollectionControllerEffectiveCollectionLimitsWithHttpInfoAsync(collectionId, at, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Network.Unique.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionId"></param>
        /// <param name="at">Hash of execution block (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (EffectiveCollectionLimitsResponse)</returns>
        public async System.Threading.Tasks.Task<Network.Unique.API.Client.ApiResponse<EffectiveCollectionLimitsResponse>> CollectionControllerEffectiveCollectionLimitsWithHttpInfoAsync(decimal collectionId, string at = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Network.Unique.API.Client.RequestOptions localVarRequestOptions = new Network.Unique.API.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Network.Unique.API.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Network.Unique.API.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (at != null)
            {
                localVarRequestOptions.QueryParameters.Add(Network.Unique.API.Client.ClientUtils.ParameterToMultiMap("", "at", at));
            }
            localVarRequestOptions.QueryParameters.Add(Network.Unique.API.Client.ClientUtils.ParameterToMultiMap("", "collectionId", collectionId));

            localVarRequestOptions.Operation = "CollectionsApi.CollectionControllerEffectiveCollectionLimits";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<EffectiveCollectionLimitsResponse>("/v1/collections/limits", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CollectionControllerEffectiveCollectionLimits", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Network.Unique.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionId"></param>
        /// <param name="at">Hash of execution block (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>CollectionInfoWithSchemaResponse</returns>
        public CollectionInfoWithSchemaResponse CollectionControllerGetCollection(decimal collectionId, string at = default(string), int operationIndex = 0)
        {
            Network.Unique.API.Client.ApiResponse<CollectionInfoWithSchemaResponse> localVarResponse = CollectionControllerGetCollectionWithHttpInfo(collectionId, at);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Network.Unique.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionId"></param>
        /// <param name="at">Hash of execution block (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of CollectionInfoWithSchemaResponse</returns>
        public Network.Unique.API.Client.ApiResponse<CollectionInfoWithSchemaResponse> CollectionControllerGetCollectionWithHttpInfo(decimal collectionId, string at = default(string), int operationIndex = 0)
        {
            Network.Unique.API.Client.RequestOptions localVarRequestOptions = new Network.Unique.API.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Network.Unique.API.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Network.Unique.API.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (at != null)
            {
                localVarRequestOptions.QueryParameters.Add(Network.Unique.API.Client.ClientUtils.ParameterToMultiMap("", "at", at));
            }
            localVarRequestOptions.QueryParameters.Add(Network.Unique.API.Client.ClientUtils.ParameterToMultiMap("", "collectionId", collectionId));

            localVarRequestOptions.Operation = "CollectionsApi.CollectionControllerGetCollection";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Get<CollectionInfoWithSchemaResponse>("/v1/collections", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CollectionControllerGetCollection", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Network.Unique.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionId"></param>
        /// <param name="at">Hash of execution block (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CollectionInfoWithSchemaResponse</returns>
        public async System.Threading.Tasks.Task<CollectionInfoWithSchemaResponse> CollectionControllerGetCollectionAsync(decimal collectionId, string at = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Network.Unique.API.Client.ApiResponse<CollectionInfoWithSchemaResponse> localVarResponse = await CollectionControllerGetCollectionWithHttpInfoAsync(collectionId, at, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Network.Unique.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionId"></param>
        /// <param name="at">Hash of execution block (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CollectionInfoWithSchemaResponse)</returns>
        public async System.Threading.Tasks.Task<Network.Unique.API.Client.ApiResponse<CollectionInfoWithSchemaResponse>> CollectionControllerGetCollectionWithHttpInfoAsync(decimal collectionId, string at = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Network.Unique.API.Client.RequestOptions localVarRequestOptions = new Network.Unique.API.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Network.Unique.API.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Network.Unique.API.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (at != null)
            {
                localVarRequestOptions.QueryParameters.Add(Network.Unique.API.Client.ClientUtils.ParameterToMultiMap("", "at", at));
            }
            localVarRequestOptions.QueryParameters.Add(Network.Unique.API.Client.ClientUtils.ParameterToMultiMap("", "collectionId", collectionId));

            localVarRequestOptions.Operation = "CollectionsApi.CollectionControllerGetCollection";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<CollectionInfoWithSchemaResponse>("/v1/collections", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CollectionControllerGetCollection", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Network.Unique.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionId"></param>
        /// <param name="at">Hash of execution block (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>LastTokenIdResultDto</returns>
        public LastTokenIdResultDto CollectionControllerLastTokenId(decimal collectionId, string at = default(string), int operationIndex = 0)
        {
            Network.Unique.API.Client.ApiResponse<LastTokenIdResultDto> localVarResponse = CollectionControllerLastTokenIdWithHttpInfo(collectionId, at);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Network.Unique.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionId"></param>
        /// <param name="at">Hash of execution block (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of LastTokenIdResultDto</returns>
        public Network.Unique.API.Client.ApiResponse<LastTokenIdResultDto> CollectionControllerLastTokenIdWithHttpInfo(decimal collectionId, string at = default(string), int operationIndex = 0)
        {
            Network.Unique.API.Client.RequestOptions localVarRequestOptions = new Network.Unique.API.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Network.Unique.API.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Network.Unique.API.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (at != null)
            {
                localVarRequestOptions.QueryParameters.Add(Network.Unique.API.Client.ClientUtils.ParameterToMultiMap("", "at", at));
            }
            localVarRequestOptions.QueryParameters.Add(Network.Unique.API.Client.ClientUtils.ParameterToMultiMap("", "collectionId", collectionId));

            localVarRequestOptions.Operation = "CollectionsApi.CollectionControllerLastTokenId";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Get<LastTokenIdResultDto>("/v1/collections/last-token-id", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CollectionControllerLastTokenId", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Network.Unique.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionId"></param>
        /// <param name="at">Hash of execution block (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of LastTokenIdResultDto</returns>
        public async System.Threading.Tasks.Task<LastTokenIdResultDto> CollectionControllerLastTokenIdAsync(decimal collectionId, string at = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Network.Unique.API.Client.ApiResponse<LastTokenIdResultDto> localVarResponse = await CollectionControllerLastTokenIdWithHttpInfoAsync(collectionId, at, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Network.Unique.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionId"></param>
        /// <param name="at">Hash of execution block (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (LastTokenIdResultDto)</returns>
        public async System.Threading.Tasks.Task<Network.Unique.API.Client.ApiResponse<LastTokenIdResultDto>> CollectionControllerLastTokenIdWithHttpInfoAsync(decimal collectionId, string at = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Network.Unique.API.Client.RequestOptions localVarRequestOptions = new Network.Unique.API.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Network.Unique.API.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Network.Unique.API.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (at != null)
            {
                localVarRequestOptions.QueryParameters.Add(Network.Unique.API.Client.ClientUtils.ParameterToMultiMap("", "at", at));
            }
            localVarRequestOptions.QueryParameters.Add(Network.Unique.API.Client.ClientUtils.ParameterToMultiMap("", "collectionId", collectionId));

            localVarRequestOptions.Operation = "CollectionsApi.CollectionControllerLastTokenId";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<LastTokenIdResultDto>("/v1/collections/last-token-id", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CollectionControllerLastTokenId", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Network.Unique.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionId"></param>
        /// <param name="address">The ss-58 encoded address</param>
        /// <param name="tokenId"></param>
        /// <param name="at">Hash of execution block (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>NextSponsoredResponse</returns>
        public NextSponsoredResponse CollectionControllerNextSponsored(decimal collectionId, string address, decimal tokenId, string at = default(string), int operationIndex = 0)
        {
            Network.Unique.API.Client.ApiResponse<NextSponsoredResponse> localVarResponse = CollectionControllerNextSponsoredWithHttpInfo(collectionId, address, tokenId, at);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Network.Unique.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionId"></param>
        /// <param name="address">The ss-58 encoded address</param>
        /// <param name="tokenId"></param>
        /// <param name="at">Hash of execution block (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of NextSponsoredResponse</returns>
        public Network.Unique.API.Client.ApiResponse<NextSponsoredResponse> CollectionControllerNextSponsoredWithHttpInfo(decimal collectionId, string address, decimal tokenId, string at = default(string), int operationIndex = 0)
        {
            // verify the required parameter 'address' is set
            if (address == null)
            {
                throw new Network.Unique.API.Client.ApiException(400, "Missing required parameter 'address' when calling CollectionsApi->CollectionControllerNextSponsored");
            }

            Network.Unique.API.Client.RequestOptions localVarRequestOptions = new Network.Unique.API.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Network.Unique.API.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Network.Unique.API.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (at != null)
            {
                localVarRequestOptions.QueryParameters.Add(Network.Unique.API.Client.ClientUtils.ParameterToMultiMap("", "at", at));
            }
            localVarRequestOptions.QueryParameters.Add(Network.Unique.API.Client.ClientUtils.ParameterToMultiMap("", "collectionId", collectionId));
            localVarRequestOptions.QueryParameters.Add(Network.Unique.API.Client.ClientUtils.ParameterToMultiMap("", "address", address));
            localVarRequestOptions.QueryParameters.Add(Network.Unique.API.Client.ClientUtils.ParameterToMultiMap("", "tokenId", tokenId));

            localVarRequestOptions.Operation = "CollectionsApi.CollectionControllerNextSponsored";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Get<NextSponsoredResponse>("/v1/collections/next-sponsored", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CollectionControllerNextSponsored", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Network.Unique.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionId"></param>
        /// <param name="address">The ss-58 encoded address</param>
        /// <param name="tokenId"></param>
        /// <param name="at">Hash of execution block (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of NextSponsoredResponse</returns>
        public async System.Threading.Tasks.Task<NextSponsoredResponse> CollectionControllerNextSponsoredAsync(decimal collectionId, string address, decimal tokenId, string at = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Network.Unique.API.Client.ApiResponse<NextSponsoredResponse> localVarResponse = await CollectionControllerNextSponsoredWithHttpInfoAsync(collectionId, address, tokenId, at, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Network.Unique.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionId"></param>
        /// <param name="address">The ss-58 encoded address</param>
        /// <param name="tokenId"></param>
        /// <param name="at">Hash of execution block (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (NextSponsoredResponse)</returns>
        public async System.Threading.Tasks.Task<Network.Unique.API.Client.ApiResponse<NextSponsoredResponse>> CollectionControllerNextSponsoredWithHttpInfoAsync(decimal collectionId, string address, decimal tokenId, string at = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'address' is set
            if (address == null)
            {
                throw new Network.Unique.API.Client.ApiException(400, "Missing required parameter 'address' when calling CollectionsApi->CollectionControllerNextSponsored");
            }


            Network.Unique.API.Client.RequestOptions localVarRequestOptions = new Network.Unique.API.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Network.Unique.API.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Network.Unique.API.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (at != null)
            {
                localVarRequestOptions.QueryParameters.Add(Network.Unique.API.Client.ClientUtils.ParameterToMultiMap("", "at", at));
            }
            localVarRequestOptions.QueryParameters.Add(Network.Unique.API.Client.ClientUtils.ParameterToMultiMap("", "collectionId", collectionId));
            localVarRequestOptions.QueryParameters.Add(Network.Unique.API.Client.ClientUtils.ParameterToMultiMap("", "address", address));
            localVarRequestOptions.QueryParameters.Add(Network.Unique.API.Client.ClientUtils.ParameterToMultiMap("", "tokenId", tokenId));

            localVarRequestOptions.Operation = "CollectionsApi.CollectionControllerNextSponsored";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<NextSponsoredResponse>("/v1/collections/next-sponsored", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CollectionControllerNextSponsored", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Network.Unique.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionId"></param>
        /// <param name="propertyKeys"> (optional)</param>
        /// <param name="at">Hash of execution block (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>PropertyPermissionsResponse</returns>
        public PropertyPermissionsResponse CollectionControllerPropertyPermissions(decimal collectionId, List<string> propertyKeys = default(List<string>), string at = default(string), int operationIndex = 0)
        {
            Network.Unique.API.Client.ApiResponse<PropertyPermissionsResponse> localVarResponse = CollectionControllerPropertyPermissionsWithHttpInfo(collectionId, propertyKeys, at);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Network.Unique.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionId"></param>
        /// <param name="propertyKeys"> (optional)</param>
        /// <param name="at">Hash of execution block (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of PropertyPermissionsResponse</returns>
        public Network.Unique.API.Client.ApiResponse<PropertyPermissionsResponse> CollectionControllerPropertyPermissionsWithHttpInfo(decimal collectionId, List<string> propertyKeys = default(List<string>), string at = default(string), int operationIndex = 0)
        {
            Network.Unique.API.Client.RequestOptions localVarRequestOptions = new Network.Unique.API.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Network.Unique.API.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Network.Unique.API.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(Network.Unique.API.Client.ClientUtils.ParameterToMultiMap("", "collectionId", collectionId));
            if (propertyKeys != null)
            {
                localVarRequestOptions.QueryParameters.Add(Network.Unique.API.Client.ClientUtils.ParameterToMultiMap("multi", "propertyKeys", propertyKeys));
            }
            if (at != null)
            {
                localVarRequestOptions.QueryParameters.Add(Network.Unique.API.Client.ClientUtils.ParameterToMultiMap("", "at", at));
            }

            localVarRequestOptions.Operation = "CollectionsApi.CollectionControllerPropertyPermissions";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Get<PropertyPermissionsResponse>("/v1/collections/property-permissions", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CollectionControllerPropertyPermissions", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Network.Unique.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionId"></param>
        /// <param name="propertyKeys"> (optional)</param>
        /// <param name="at">Hash of execution block (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of PropertyPermissionsResponse</returns>
        public async System.Threading.Tasks.Task<PropertyPermissionsResponse> CollectionControllerPropertyPermissionsAsync(decimal collectionId, List<string> propertyKeys = default(List<string>), string at = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Network.Unique.API.Client.ApiResponse<PropertyPermissionsResponse> localVarResponse = await CollectionControllerPropertyPermissionsWithHttpInfoAsync(collectionId, propertyKeys, at, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Network.Unique.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionId"></param>
        /// <param name="propertyKeys"> (optional)</param>
        /// <param name="at">Hash of execution block (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (PropertyPermissionsResponse)</returns>
        public async System.Threading.Tasks.Task<Network.Unique.API.Client.ApiResponse<PropertyPermissionsResponse>> CollectionControllerPropertyPermissionsWithHttpInfoAsync(decimal collectionId, List<string> propertyKeys = default(List<string>), string at = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Network.Unique.API.Client.RequestOptions localVarRequestOptions = new Network.Unique.API.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Network.Unique.API.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Network.Unique.API.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(Network.Unique.API.Client.ClientUtils.ParameterToMultiMap("", "collectionId", collectionId));
            if (propertyKeys != null)
            {
                localVarRequestOptions.QueryParameters.Add(Network.Unique.API.Client.ClientUtils.ParameterToMultiMap("multi", "propertyKeys", propertyKeys));
            }
            if (at != null)
            {
                localVarRequestOptions.QueryParameters.Add(Network.Unique.API.Client.ClientUtils.ParameterToMultiMap("", "at", at));
            }

            localVarRequestOptions.Operation = "CollectionsApi.CollectionControllerPropertyPermissions";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<PropertyPermissionsResponse>("/v1/collections/property-permissions", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CollectionControllerPropertyPermissions", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Network.Unique.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="at">Hash of execution block (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>GetStatsResponse</returns>
        public GetStatsResponse CollectionControllerStats(string at = default(string), int operationIndex = 0)
        {
            Network.Unique.API.Client.ApiResponse<GetStatsResponse> localVarResponse = CollectionControllerStatsWithHttpInfo(at);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Network.Unique.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="at">Hash of execution block (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of GetStatsResponse</returns>
        public Network.Unique.API.Client.ApiResponse<GetStatsResponse> CollectionControllerStatsWithHttpInfo(string at = default(string), int operationIndex = 0)
        {
            Network.Unique.API.Client.RequestOptions localVarRequestOptions = new Network.Unique.API.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Network.Unique.API.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Network.Unique.API.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (at != null)
            {
                localVarRequestOptions.QueryParameters.Add(Network.Unique.API.Client.ClientUtils.ParameterToMultiMap("", "at", at));
            }

            localVarRequestOptions.Operation = "CollectionsApi.CollectionControllerStats";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Get<GetStatsResponse>("/v1/collections/stats", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CollectionControllerStats", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Network.Unique.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="at">Hash of execution block (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GetStatsResponse</returns>
        public async System.Threading.Tasks.Task<GetStatsResponse> CollectionControllerStatsAsync(string at = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Network.Unique.API.Client.ApiResponse<GetStatsResponse> localVarResponse = await CollectionControllerStatsWithHttpInfoAsync(at, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Network.Unique.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="at">Hash of execution block (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GetStatsResponse)</returns>
        public async System.Threading.Tasks.Task<Network.Unique.API.Client.ApiResponse<GetStatsResponse>> CollectionControllerStatsWithHttpInfoAsync(string at = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Network.Unique.API.Client.RequestOptions localVarRequestOptions = new Network.Unique.API.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Network.Unique.API.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Network.Unique.API.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (at != null)
            {
                localVarRequestOptions.QueryParameters.Add(Network.Unique.API.Client.ClientUtils.ParameterToMultiMap("", "at", at));
            }

            localVarRequestOptions.Operation = "CollectionsApi.CollectionControllerStats";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<GetStatsResponse>("/v1/collections/stats", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CollectionControllerStats", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Network.Unique.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionId"></param>
        /// <param name="at">Hash of execution block (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>TotalSupplyResponse</returns>
        public TotalSupplyResponse CollectionControllerTotalSupply(decimal collectionId, string at = default(string), int operationIndex = 0)
        {
            Network.Unique.API.Client.ApiResponse<TotalSupplyResponse> localVarResponse = CollectionControllerTotalSupplyWithHttpInfo(collectionId, at);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Network.Unique.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionId"></param>
        /// <param name="at">Hash of execution block (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of TotalSupplyResponse</returns>
        public Network.Unique.API.Client.ApiResponse<TotalSupplyResponse> CollectionControllerTotalSupplyWithHttpInfo(decimal collectionId, string at = default(string), int operationIndex = 0)
        {
            Network.Unique.API.Client.RequestOptions localVarRequestOptions = new Network.Unique.API.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Network.Unique.API.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Network.Unique.API.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (at != null)
            {
                localVarRequestOptions.QueryParameters.Add(Network.Unique.API.Client.ClientUtils.ParameterToMultiMap("", "at", at));
            }
            localVarRequestOptions.QueryParameters.Add(Network.Unique.API.Client.ClientUtils.ParameterToMultiMap("", "collectionId", collectionId));

            localVarRequestOptions.Operation = "CollectionsApi.CollectionControllerTotalSupply";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Get<TotalSupplyResponse>("/v1/collections/total-supply", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CollectionControllerTotalSupply", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Network.Unique.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionId"></param>
        /// <param name="at">Hash of execution block (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of TotalSupplyResponse</returns>
        public async System.Threading.Tasks.Task<TotalSupplyResponse> CollectionControllerTotalSupplyAsync(decimal collectionId, string at = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Network.Unique.API.Client.ApiResponse<TotalSupplyResponse> localVarResponse = await CollectionControllerTotalSupplyWithHttpInfoAsync(collectionId, at, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Network.Unique.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionId"></param>
        /// <param name="at">Hash of execution block (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (TotalSupplyResponse)</returns>
        public async System.Threading.Tasks.Task<Network.Unique.API.Client.ApiResponse<TotalSupplyResponse>> CollectionControllerTotalSupplyWithHttpInfoAsync(decimal collectionId, string at = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Network.Unique.API.Client.RequestOptions localVarRequestOptions = new Network.Unique.API.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Network.Unique.API.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Network.Unique.API.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (at != null)
            {
                localVarRequestOptions.QueryParameters.Add(Network.Unique.API.Client.ClientUtils.ParameterToMultiMap("", "at", at));
            }
            localVarRequestOptions.QueryParameters.Add(Network.Unique.API.Client.ClientUtils.ParameterToMultiMap("", "collectionId", collectionId));

            localVarRequestOptions.Operation = "CollectionsApi.CollectionControllerTotalSupply";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<TotalSupplyResponse>("/v1/collections/total-supply", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CollectionControllerTotalSupply", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Network.Unique.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="confirmSponsorshipRequest"></param>
        /// <param name="use"> (optional)</param>
        /// <param name="withFee"> (optional, default to false) (deprecated)</param>
        /// <param name="verify"> (optional, default to false)</param>
        /// <param name="callbackUrl"> (optional)</param>
        /// <param name="nonce"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ConfirmSponsorshipDefaultResponse</returns>
        public ConfirmSponsorshipDefaultResponse ConfirmSponsorship(ConfirmSponsorshipRequest confirmSponsorshipRequest, string use = default(string), bool? withFee = default(bool?), bool? verify = default(bool?), string callbackUrl = default(string), decimal? nonce = default(decimal?), int operationIndex = 0)
        {
            Network.Unique.API.Client.ApiResponse<ConfirmSponsorshipDefaultResponse> localVarResponse = ConfirmSponsorshipWithHttpInfo(confirmSponsorshipRequest, use, withFee, verify, callbackUrl, nonce);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Network.Unique.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="confirmSponsorshipRequest"></param>
        /// <param name="use"> (optional)</param>
        /// <param name="withFee"> (optional, default to false) (deprecated)</param>
        /// <param name="verify"> (optional, default to false)</param>
        /// <param name="callbackUrl"> (optional)</param>
        /// <param name="nonce"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ConfirmSponsorshipDefaultResponse</returns>
        public Network.Unique.API.Client.ApiResponse<ConfirmSponsorshipDefaultResponse> ConfirmSponsorshipWithHttpInfo(ConfirmSponsorshipRequest confirmSponsorshipRequest, string use = default(string), bool? withFee = default(bool?), bool? verify = default(bool?), string callbackUrl = default(string), decimal? nonce = default(decimal?), int operationIndex = 0)
        {
            // verify the required parameter 'confirmSponsorshipRequest' is set
            if (confirmSponsorshipRequest == null)
            {
                throw new Network.Unique.API.Client.ApiException(400, "Missing required parameter 'confirmSponsorshipRequest' when calling CollectionsApi->ConfirmSponsorship");
            }

            Network.Unique.API.Client.RequestOptions localVarRequestOptions = new Network.Unique.API.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Network.Unique.API.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Network.Unique.API.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (use != null)
            {
                localVarRequestOptions.QueryParameters.Add(Network.Unique.API.Client.ClientUtils.ParameterToMultiMap("", "use", use));
            }
            if (withFee != null)
            {
                localVarRequestOptions.QueryParameters.Add(Network.Unique.API.Client.ClientUtils.ParameterToMultiMap("", "withFee", withFee));
            }
            if (verify != null)
            {
                localVarRequestOptions.QueryParameters.Add(Network.Unique.API.Client.ClientUtils.ParameterToMultiMap("", "verify", verify));
            }
            if (callbackUrl != null)
            {
                localVarRequestOptions.QueryParameters.Add(Network.Unique.API.Client.ClientUtils.ParameterToMultiMap("", "callbackUrl", callbackUrl));
            }
            if (nonce != null)
            {
                localVarRequestOptions.QueryParameters.Add(Network.Unique.API.Client.ClientUtils.ParameterToMultiMap("", "nonce", nonce));
            }
            localVarRequestOptions.Data = confirmSponsorshipRequest;

            localVarRequestOptions.Operation = "CollectionsApi.ConfirmSponsorship";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (SeedAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<ConfirmSponsorshipDefaultResponse>("/v1/collections/sponsorship/confirm", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ConfirmSponsorship", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Network.Unique.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="confirmSponsorshipRequest"></param>
        /// <param name="use"> (optional)</param>
        /// <param name="withFee"> (optional, default to false) (deprecated)</param>
        /// <param name="verify"> (optional, default to false)</param>
        /// <param name="callbackUrl"> (optional)</param>
        /// <param name="nonce"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ConfirmSponsorshipDefaultResponse</returns>
        public async System.Threading.Tasks.Task<ConfirmSponsorshipDefaultResponse> ConfirmSponsorshipAsync(ConfirmSponsorshipRequest confirmSponsorshipRequest, string use = default(string), bool? withFee = default(bool?), bool? verify = default(bool?), string callbackUrl = default(string), decimal? nonce = default(decimal?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Network.Unique.API.Client.ApiResponse<ConfirmSponsorshipDefaultResponse> localVarResponse = await ConfirmSponsorshipWithHttpInfoAsync(confirmSponsorshipRequest, use, withFee, verify, callbackUrl, nonce, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Network.Unique.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="confirmSponsorshipRequest"></param>
        /// <param name="use"> (optional)</param>
        /// <param name="withFee"> (optional, default to false) (deprecated)</param>
        /// <param name="verify"> (optional, default to false)</param>
        /// <param name="callbackUrl"> (optional)</param>
        /// <param name="nonce"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ConfirmSponsorshipDefaultResponse)</returns>
        public async System.Threading.Tasks.Task<Network.Unique.API.Client.ApiResponse<ConfirmSponsorshipDefaultResponse>> ConfirmSponsorshipWithHttpInfoAsync(ConfirmSponsorshipRequest confirmSponsorshipRequest, string use = default(string), bool? withFee = default(bool?), bool? verify = default(bool?), string callbackUrl = default(string), decimal? nonce = default(decimal?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'confirmSponsorshipRequest' is set
            if (confirmSponsorshipRequest == null)
            {
                throw new Network.Unique.API.Client.ApiException(400, "Missing required parameter 'confirmSponsorshipRequest' when calling CollectionsApi->ConfirmSponsorship");
            }


            Network.Unique.API.Client.RequestOptions localVarRequestOptions = new Network.Unique.API.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Network.Unique.API.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Network.Unique.API.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (use != null)
            {
                localVarRequestOptions.QueryParameters.Add(Network.Unique.API.Client.ClientUtils.ParameterToMultiMap("", "use", use));
            }
            if (withFee != null)
            {
                localVarRequestOptions.QueryParameters.Add(Network.Unique.API.Client.ClientUtils.ParameterToMultiMap("", "withFee", withFee));
            }
            if (verify != null)
            {
                localVarRequestOptions.QueryParameters.Add(Network.Unique.API.Client.ClientUtils.ParameterToMultiMap("", "verify", verify));
            }
            if (callbackUrl != null)
            {
                localVarRequestOptions.QueryParameters.Add(Network.Unique.API.Client.ClientUtils.ParameterToMultiMap("", "callbackUrl", callbackUrl));
            }
            if (nonce != null)
            {
                localVarRequestOptions.QueryParameters.Add(Network.Unique.API.Client.ClientUtils.ParameterToMultiMap("", "nonce", nonce));
            }
            localVarRequestOptions.Data = confirmSponsorshipRequest;

            localVarRequestOptions.Operation = "CollectionsApi.ConfirmSponsorship";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (SeedAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<ConfirmSponsorshipDefaultResponse>("/v1/collections/sponsorship/confirm", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ConfirmSponsorship", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Network.Unique.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createCollectionMutationRequest"></param>
        /// <param name="use"> (optional)</param>
        /// <param name="withFee"> (optional, default to false) (deprecated)</param>
        /// <param name="verify"> (optional, default to false)</param>
        /// <param name="callbackUrl"> (optional)</param>
        /// <param name="nonce"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>CreateCollectionMutationDefaultResponse</returns>
        public CreateCollectionMutationDefaultResponse CreateCollectionMutation(CreateCollectionMutationRequest createCollectionMutationRequest, string use = default(string), bool? withFee = default(bool?), bool? verify = default(bool?), string callbackUrl = default(string), decimal? nonce = default(decimal?), int operationIndex = 0)
        {
            Network.Unique.API.Client.ApiResponse<CreateCollectionMutationDefaultResponse> localVarResponse = CreateCollectionMutationWithHttpInfo(createCollectionMutationRequest, use, withFee, verify, callbackUrl, nonce);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Network.Unique.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createCollectionMutationRequest"></param>
        /// <param name="use"> (optional)</param>
        /// <param name="withFee"> (optional, default to false) (deprecated)</param>
        /// <param name="verify"> (optional, default to false)</param>
        /// <param name="callbackUrl"> (optional)</param>
        /// <param name="nonce"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of CreateCollectionMutationDefaultResponse</returns>
        public Network.Unique.API.Client.ApiResponse<CreateCollectionMutationDefaultResponse> CreateCollectionMutationWithHttpInfo(CreateCollectionMutationRequest createCollectionMutationRequest, string use = default(string), bool? withFee = default(bool?), bool? verify = default(bool?), string callbackUrl = default(string), decimal? nonce = default(decimal?), int operationIndex = 0)
        {
            // verify the required parameter 'createCollectionMutationRequest' is set
            if (createCollectionMutationRequest == null)
            {
                throw new Network.Unique.API.Client.ApiException(400, "Missing required parameter 'createCollectionMutationRequest' when calling CollectionsApi->CreateCollectionMutation");
            }

            Network.Unique.API.Client.RequestOptions localVarRequestOptions = new Network.Unique.API.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Network.Unique.API.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Network.Unique.API.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (use != null)
            {
                localVarRequestOptions.QueryParameters.Add(Network.Unique.API.Client.ClientUtils.ParameterToMultiMap("", "use", use));
            }
            if (withFee != null)
            {
                localVarRequestOptions.QueryParameters.Add(Network.Unique.API.Client.ClientUtils.ParameterToMultiMap("", "withFee", withFee));
            }
            if (verify != null)
            {
                localVarRequestOptions.QueryParameters.Add(Network.Unique.API.Client.ClientUtils.ParameterToMultiMap("", "verify", verify));
            }
            if (callbackUrl != null)
            {
                localVarRequestOptions.QueryParameters.Add(Network.Unique.API.Client.ClientUtils.ParameterToMultiMap("", "callbackUrl", callbackUrl));
            }
            if (nonce != null)
            {
                localVarRequestOptions.QueryParameters.Add(Network.Unique.API.Client.ClientUtils.ParameterToMultiMap("", "nonce", nonce));
            }
            localVarRequestOptions.Data = createCollectionMutationRequest;

            localVarRequestOptions.Operation = "CollectionsApi.CreateCollectionMutation";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (SeedAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<CreateCollectionMutationDefaultResponse>("/v1/collections", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateCollectionMutation", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Network.Unique.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createCollectionMutationRequest"></param>
        /// <param name="use"> (optional)</param>
        /// <param name="withFee"> (optional, default to false) (deprecated)</param>
        /// <param name="verify"> (optional, default to false)</param>
        /// <param name="callbackUrl"> (optional)</param>
        /// <param name="nonce"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CreateCollectionMutationDefaultResponse</returns>
        public async System.Threading.Tasks.Task<CreateCollectionMutationDefaultResponse> CreateCollectionMutationAsync(CreateCollectionMutationRequest createCollectionMutationRequest, string use = default(string), bool? withFee = default(bool?), bool? verify = default(bool?), string callbackUrl = default(string), decimal? nonce = default(decimal?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Network.Unique.API.Client.ApiResponse<CreateCollectionMutationDefaultResponse> localVarResponse = await CreateCollectionMutationWithHttpInfoAsync(createCollectionMutationRequest, use, withFee, verify, callbackUrl, nonce, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Network.Unique.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createCollectionMutationRequest"></param>
        /// <param name="use"> (optional)</param>
        /// <param name="withFee"> (optional, default to false) (deprecated)</param>
        /// <param name="verify"> (optional, default to false)</param>
        /// <param name="callbackUrl"> (optional)</param>
        /// <param name="nonce"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CreateCollectionMutationDefaultResponse)</returns>
        public async System.Threading.Tasks.Task<Network.Unique.API.Client.ApiResponse<CreateCollectionMutationDefaultResponse>> CreateCollectionMutationWithHttpInfoAsync(CreateCollectionMutationRequest createCollectionMutationRequest, string use = default(string), bool? withFee = default(bool?), bool? verify = default(bool?), string callbackUrl = default(string), decimal? nonce = default(decimal?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'createCollectionMutationRequest' is set
            if (createCollectionMutationRequest == null)
            {
                throw new Network.Unique.API.Client.ApiException(400, "Missing required parameter 'createCollectionMutationRequest' when calling CollectionsApi->CreateCollectionMutation");
            }


            Network.Unique.API.Client.RequestOptions localVarRequestOptions = new Network.Unique.API.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Network.Unique.API.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Network.Unique.API.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (use != null)
            {
                localVarRequestOptions.QueryParameters.Add(Network.Unique.API.Client.ClientUtils.ParameterToMultiMap("", "use", use));
            }
            if (withFee != null)
            {
                localVarRequestOptions.QueryParameters.Add(Network.Unique.API.Client.ClientUtils.ParameterToMultiMap("", "withFee", withFee));
            }
            if (verify != null)
            {
                localVarRequestOptions.QueryParameters.Add(Network.Unique.API.Client.ClientUtils.ParameterToMultiMap("", "verify", verify));
            }
            if (callbackUrl != null)
            {
                localVarRequestOptions.QueryParameters.Add(Network.Unique.API.Client.ClientUtils.ParameterToMultiMap("", "callbackUrl", callbackUrl));
            }
            if (nonce != null)
            {
                localVarRequestOptions.QueryParameters.Add(Network.Unique.API.Client.ClientUtils.ParameterToMultiMap("", "nonce", nonce));
            }
            localVarRequestOptions.Data = createCollectionMutationRequest;

            localVarRequestOptions.Operation = "CollectionsApi.CreateCollectionMutation";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (SeedAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<CreateCollectionMutationDefaultResponse>("/v1/collections", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateCollectionMutation", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Network.Unique.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deleteCollectionPropertiesRequest"></param>
        /// <param name="use"> (optional)</param>
        /// <param name="withFee"> (optional, default to false) (deprecated)</param>
        /// <param name="verify"> (optional, default to false)</param>
        /// <param name="callbackUrl"> (optional)</param>
        /// <param name="nonce"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>DeleteCollectionPropertiesDefaultResponse</returns>
        public DeleteCollectionPropertiesDefaultResponse DeleteCollectionProperties(DeleteCollectionPropertiesRequest deleteCollectionPropertiesRequest, string use = default(string), bool? withFee = default(bool?), bool? verify = default(bool?), string callbackUrl = default(string), decimal? nonce = default(decimal?), int operationIndex = 0)
        {
            Network.Unique.API.Client.ApiResponse<DeleteCollectionPropertiesDefaultResponse> localVarResponse = DeleteCollectionPropertiesWithHttpInfo(deleteCollectionPropertiesRequest, use, withFee, verify, callbackUrl, nonce);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Network.Unique.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deleteCollectionPropertiesRequest"></param>
        /// <param name="use"> (optional)</param>
        /// <param name="withFee"> (optional, default to false) (deprecated)</param>
        /// <param name="verify"> (optional, default to false)</param>
        /// <param name="callbackUrl"> (optional)</param>
        /// <param name="nonce"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of DeleteCollectionPropertiesDefaultResponse</returns>
        public Network.Unique.API.Client.ApiResponse<DeleteCollectionPropertiesDefaultResponse> DeleteCollectionPropertiesWithHttpInfo(DeleteCollectionPropertiesRequest deleteCollectionPropertiesRequest, string use = default(string), bool? withFee = default(bool?), bool? verify = default(bool?), string callbackUrl = default(string), decimal? nonce = default(decimal?), int operationIndex = 0)
        {
            // verify the required parameter 'deleteCollectionPropertiesRequest' is set
            if (deleteCollectionPropertiesRequest == null)
            {
                throw new Network.Unique.API.Client.ApiException(400, "Missing required parameter 'deleteCollectionPropertiesRequest' when calling CollectionsApi->DeleteCollectionProperties");
            }

            Network.Unique.API.Client.RequestOptions localVarRequestOptions = new Network.Unique.API.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Network.Unique.API.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Network.Unique.API.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (use != null)
            {
                localVarRequestOptions.QueryParameters.Add(Network.Unique.API.Client.ClientUtils.ParameterToMultiMap("", "use", use));
            }
            if (withFee != null)
            {
                localVarRequestOptions.QueryParameters.Add(Network.Unique.API.Client.ClientUtils.ParameterToMultiMap("", "withFee", withFee));
            }
            if (verify != null)
            {
                localVarRequestOptions.QueryParameters.Add(Network.Unique.API.Client.ClientUtils.ParameterToMultiMap("", "verify", verify));
            }
            if (callbackUrl != null)
            {
                localVarRequestOptions.QueryParameters.Add(Network.Unique.API.Client.ClientUtils.ParameterToMultiMap("", "callbackUrl", callbackUrl));
            }
            if (nonce != null)
            {
                localVarRequestOptions.QueryParameters.Add(Network.Unique.API.Client.ClientUtils.ParameterToMultiMap("", "nonce", nonce));
            }
            localVarRequestOptions.Data = deleteCollectionPropertiesRequest;

            localVarRequestOptions.Operation = "CollectionsApi.DeleteCollectionProperties";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (SeedAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Delete<DeleteCollectionPropertiesDefaultResponse>("/v1/collections/properties", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteCollectionProperties", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Network.Unique.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deleteCollectionPropertiesRequest"></param>
        /// <param name="use"> (optional)</param>
        /// <param name="withFee"> (optional, default to false) (deprecated)</param>
        /// <param name="verify"> (optional, default to false)</param>
        /// <param name="callbackUrl"> (optional)</param>
        /// <param name="nonce"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of DeleteCollectionPropertiesDefaultResponse</returns>
        public async System.Threading.Tasks.Task<DeleteCollectionPropertiesDefaultResponse> DeleteCollectionPropertiesAsync(DeleteCollectionPropertiesRequest deleteCollectionPropertiesRequest, string use = default(string), bool? withFee = default(bool?), bool? verify = default(bool?), string callbackUrl = default(string), decimal? nonce = default(decimal?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Network.Unique.API.Client.ApiResponse<DeleteCollectionPropertiesDefaultResponse> localVarResponse = await DeleteCollectionPropertiesWithHttpInfoAsync(deleteCollectionPropertiesRequest, use, withFee, verify, callbackUrl, nonce, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Network.Unique.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deleteCollectionPropertiesRequest"></param>
        /// <param name="use"> (optional)</param>
        /// <param name="withFee"> (optional, default to false) (deprecated)</param>
        /// <param name="verify"> (optional, default to false)</param>
        /// <param name="callbackUrl"> (optional)</param>
        /// <param name="nonce"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (DeleteCollectionPropertiesDefaultResponse)</returns>
        public async System.Threading.Tasks.Task<Network.Unique.API.Client.ApiResponse<DeleteCollectionPropertiesDefaultResponse>> DeleteCollectionPropertiesWithHttpInfoAsync(DeleteCollectionPropertiesRequest deleteCollectionPropertiesRequest, string use = default(string), bool? withFee = default(bool?), bool? verify = default(bool?), string callbackUrl = default(string), decimal? nonce = default(decimal?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'deleteCollectionPropertiesRequest' is set
            if (deleteCollectionPropertiesRequest == null)
            {
                throw new Network.Unique.API.Client.ApiException(400, "Missing required parameter 'deleteCollectionPropertiesRequest' when calling CollectionsApi->DeleteCollectionProperties");
            }


            Network.Unique.API.Client.RequestOptions localVarRequestOptions = new Network.Unique.API.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Network.Unique.API.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Network.Unique.API.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (use != null)
            {
                localVarRequestOptions.QueryParameters.Add(Network.Unique.API.Client.ClientUtils.ParameterToMultiMap("", "use", use));
            }
            if (withFee != null)
            {
                localVarRequestOptions.QueryParameters.Add(Network.Unique.API.Client.ClientUtils.ParameterToMultiMap("", "withFee", withFee));
            }
            if (verify != null)
            {
                localVarRequestOptions.QueryParameters.Add(Network.Unique.API.Client.ClientUtils.ParameterToMultiMap("", "verify", verify));
            }
            if (callbackUrl != null)
            {
                localVarRequestOptions.QueryParameters.Add(Network.Unique.API.Client.ClientUtils.ParameterToMultiMap("", "callbackUrl", callbackUrl));
            }
            if (nonce != null)
            {
                localVarRequestOptions.QueryParameters.Add(Network.Unique.API.Client.ClientUtils.ParameterToMultiMap("", "nonce", nonce));
            }
            localVarRequestOptions.Data = deleteCollectionPropertiesRequest;

            localVarRequestOptions.Operation = "CollectionsApi.DeleteCollectionProperties";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (SeedAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.DeleteAsync<DeleteCollectionPropertiesDefaultResponse>("/v1/collections/properties", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteCollectionProperties", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Network.Unique.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="destroyRequest"></param>
        /// <param name="use"> (optional)</param>
        /// <param name="withFee"> (optional, default to false) (deprecated)</param>
        /// <param name="verify"> (optional, default to false)</param>
        /// <param name="callbackUrl"> (optional)</param>
        /// <param name="nonce"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>DestroyDefaultResponse</returns>
        public DestroyDefaultResponse Destroy(DestroyRequest destroyRequest, string use = default(string), bool? withFee = default(bool?), bool? verify = default(bool?), string callbackUrl = default(string), decimal? nonce = default(decimal?), int operationIndex = 0)
        {
            Network.Unique.API.Client.ApiResponse<DestroyDefaultResponse> localVarResponse = DestroyWithHttpInfo(destroyRequest, use, withFee, verify, callbackUrl, nonce);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Network.Unique.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="destroyRequest"></param>
        /// <param name="use"> (optional)</param>
        /// <param name="withFee"> (optional, default to false) (deprecated)</param>
        /// <param name="verify"> (optional, default to false)</param>
        /// <param name="callbackUrl"> (optional)</param>
        /// <param name="nonce"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of DestroyDefaultResponse</returns>
        public Network.Unique.API.Client.ApiResponse<DestroyDefaultResponse> DestroyWithHttpInfo(DestroyRequest destroyRequest, string use = default(string), bool? withFee = default(bool?), bool? verify = default(bool?), string callbackUrl = default(string), decimal? nonce = default(decimal?), int operationIndex = 0)
        {
            // verify the required parameter 'destroyRequest' is set
            if (destroyRequest == null)
            {
                throw new Network.Unique.API.Client.ApiException(400, "Missing required parameter 'destroyRequest' when calling CollectionsApi->Destroy");
            }

            Network.Unique.API.Client.RequestOptions localVarRequestOptions = new Network.Unique.API.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Network.Unique.API.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Network.Unique.API.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (use != null)
            {
                localVarRequestOptions.QueryParameters.Add(Network.Unique.API.Client.ClientUtils.ParameterToMultiMap("", "use", use));
            }
            if (withFee != null)
            {
                localVarRequestOptions.QueryParameters.Add(Network.Unique.API.Client.ClientUtils.ParameterToMultiMap("", "withFee", withFee));
            }
            if (verify != null)
            {
                localVarRequestOptions.QueryParameters.Add(Network.Unique.API.Client.ClientUtils.ParameterToMultiMap("", "verify", verify));
            }
            if (callbackUrl != null)
            {
                localVarRequestOptions.QueryParameters.Add(Network.Unique.API.Client.ClientUtils.ParameterToMultiMap("", "callbackUrl", callbackUrl));
            }
            if (nonce != null)
            {
                localVarRequestOptions.QueryParameters.Add(Network.Unique.API.Client.ClientUtils.ParameterToMultiMap("", "nonce", nonce));
            }
            localVarRequestOptions.Data = destroyRequest;

            localVarRequestOptions.Operation = "CollectionsApi.Destroy";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (SeedAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Delete<DestroyDefaultResponse>("/v1/collections", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("Destroy", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Network.Unique.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="destroyRequest"></param>
        /// <param name="use"> (optional)</param>
        /// <param name="withFee"> (optional, default to false) (deprecated)</param>
        /// <param name="verify"> (optional, default to false)</param>
        /// <param name="callbackUrl"> (optional)</param>
        /// <param name="nonce"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of DestroyDefaultResponse</returns>
        public async System.Threading.Tasks.Task<DestroyDefaultResponse> DestroyAsync(DestroyRequest destroyRequest, string use = default(string), bool? withFee = default(bool?), bool? verify = default(bool?), string callbackUrl = default(string), decimal? nonce = default(decimal?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Network.Unique.API.Client.ApiResponse<DestroyDefaultResponse> localVarResponse = await DestroyWithHttpInfoAsync(destroyRequest, use, withFee, verify, callbackUrl, nonce, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Network.Unique.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="destroyRequest"></param>
        /// <param name="use"> (optional)</param>
        /// <param name="withFee"> (optional, default to false) (deprecated)</param>
        /// <param name="verify"> (optional, default to false)</param>
        /// <param name="callbackUrl"> (optional)</param>
        /// <param name="nonce"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (DestroyDefaultResponse)</returns>
        public async System.Threading.Tasks.Task<Network.Unique.API.Client.ApiResponse<DestroyDefaultResponse>> DestroyWithHttpInfoAsync(DestroyRequest destroyRequest, string use = default(string), bool? withFee = default(bool?), bool? verify = default(bool?), string callbackUrl = default(string), decimal? nonce = default(decimal?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'destroyRequest' is set
            if (destroyRequest == null)
            {
                throw new Network.Unique.API.Client.ApiException(400, "Missing required parameter 'destroyRequest' when calling CollectionsApi->Destroy");
            }


            Network.Unique.API.Client.RequestOptions localVarRequestOptions = new Network.Unique.API.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Network.Unique.API.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Network.Unique.API.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (use != null)
            {
                localVarRequestOptions.QueryParameters.Add(Network.Unique.API.Client.ClientUtils.ParameterToMultiMap("", "use", use));
            }
            if (withFee != null)
            {
                localVarRequestOptions.QueryParameters.Add(Network.Unique.API.Client.ClientUtils.ParameterToMultiMap("", "withFee", withFee));
            }
            if (verify != null)
            {
                localVarRequestOptions.QueryParameters.Add(Network.Unique.API.Client.ClientUtils.ParameterToMultiMap("", "verify", verify));
            }
            if (callbackUrl != null)
            {
                localVarRequestOptions.QueryParameters.Add(Network.Unique.API.Client.ClientUtils.ParameterToMultiMap("", "callbackUrl", callbackUrl));
            }
            if (nonce != null)
            {
                localVarRequestOptions.QueryParameters.Add(Network.Unique.API.Client.ClientUtils.ParameterToMultiMap("", "nonce", nonce));
            }
            localVarRequestOptions.Data = destroyRequest;

            localVarRequestOptions.Operation = "CollectionsApi.Destroy";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (SeedAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.DeleteAsync<DestroyDefaultResponse>("/v1/collections", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("Destroy", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Network.Unique.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="removeAdminRequest"></param>
        /// <param name="use"> (optional)</param>
        /// <param name="withFee"> (optional, default to false) (deprecated)</param>
        /// <param name="verify"> (optional, default to false)</param>
        /// <param name="callbackUrl"> (optional)</param>
        /// <param name="nonce"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>RemoveAdminDefaultResponse</returns>
        public RemoveAdminDefaultResponse RemoveAdmin(RemoveAdminRequest removeAdminRequest, string use = default(string), bool? withFee = default(bool?), bool? verify = default(bool?), string callbackUrl = default(string), decimal? nonce = default(decimal?), int operationIndex = 0)
        {
            Network.Unique.API.Client.ApiResponse<RemoveAdminDefaultResponse> localVarResponse = RemoveAdminWithHttpInfo(removeAdminRequest, use, withFee, verify, callbackUrl, nonce);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Network.Unique.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="removeAdminRequest"></param>
        /// <param name="use"> (optional)</param>
        /// <param name="withFee"> (optional, default to false) (deprecated)</param>
        /// <param name="verify"> (optional, default to false)</param>
        /// <param name="callbackUrl"> (optional)</param>
        /// <param name="nonce"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of RemoveAdminDefaultResponse</returns>
        public Network.Unique.API.Client.ApiResponse<RemoveAdminDefaultResponse> RemoveAdminWithHttpInfo(RemoveAdminRequest removeAdminRequest, string use = default(string), bool? withFee = default(bool?), bool? verify = default(bool?), string callbackUrl = default(string), decimal? nonce = default(decimal?), int operationIndex = 0)
        {
            // verify the required parameter 'removeAdminRequest' is set
            if (removeAdminRequest == null)
            {
                throw new Network.Unique.API.Client.ApiException(400, "Missing required parameter 'removeAdminRequest' when calling CollectionsApi->RemoveAdmin");
            }

            Network.Unique.API.Client.RequestOptions localVarRequestOptions = new Network.Unique.API.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Network.Unique.API.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Network.Unique.API.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (use != null)
            {
                localVarRequestOptions.QueryParameters.Add(Network.Unique.API.Client.ClientUtils.ParameterToMultiMap("", "use", use));
            }
            if (withFee != null)
            {
                localVarRequestOptions.QueryParameters.Add(Network.Unique.API.Client.ClientUtils.ParameterToMultiMap("", "withFee", withFee));
            }
            if (verify != null)
            {
                localVarRequestOptions.QueryParameters.Add(Network.Unique.API.Client.ClientUtils.ParameterToMultiMap("", "verify", verify));
            }
            if (callbackUrl != null)
            {
                localVarRequestOptions.QueryParameters.Add(Network.Unique.API.Client.ClientUtils.ParameterToMultiMap("", "callbackUrl", callbackUrl));
            }
            if (nonce != null)
            {
                localVarRequestOptions.QueryParameters.Add(Network.Unique.API.Client.ClientUtils.ParameterToMultiMap("", "nonce", nonce));
            }
            localVarRequestOptions.Data = removeAdminRequest;

            localVarRequestOptions.Operation = "CollectionsApi.RemoveAdmin";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (SeedAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Delete<RemoveAdminDefaultResponse>("/v1/collections/admins", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RemoveAdmin", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Network.Unique.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="removeAdminRequest"></param>
        /// <param name="use"> (optional)</param>
        /// <param name="withFee"> (optional, default to false) (deprecated)</param>
        /// <param name="verify"> (optional, default to false)</param>
        /// <param name="callbackUrl"> (optional)</param>
        /// <param name="nonce"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of RemoveAdminDefaultResponse</returns>
        public async System.Threading.Tasks.Task<RemoveAdminDefaultResponse> RemoveAdminAsync(RemoveAdminRequest removeAdminRequest, string use = default(string), bool? withFee = default(bool?), bool? verify = default(bool?), string callbackUrl = default(string), decimal? nonce = default(decimal?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Network.Unique.API.Client.ApiResponse<RemoveAdminDefaultResponse> localVarResponse = await RemoveAdminWithHttpInfoAsync(removeAdminRequest, use, withFee, verify, callbackUrl, nonce, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Network.Unique.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="removeAdminRequest"></param>
        /// <param name="use"> (optional)</param>
        /// <param name="withFee"> (optional, default to false) (deprecated)</param>
        /// <param name="verify"> (optional, default to false)</param>
        /// <param name="callbackUrl"> (optional)</param>
        /// <param name="nonce"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (RemoveAdminDefaultResponse)</returns>
        public async System.Threading.Tasks.Task<Network.Unique.API.Client.ApiResponse<RemoveAdminDefaultResponse>> RemoveAdminWithHttpInfoAsync(RemoveAdminRequest removeAdminRequest, string use = default(string), bool? withFee = default(bool?), bool? verify = default(bool?), string callbackUrl = default(string), decimal? nonce = default(decimal?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'removeAdminRequest' is set
            if (removeAdminRequest == null)
            {
                throw new Network.Unique.API.Client.ApiException(400, "Missing required parameter 'removeAdminRequest' when calling CollectionsApi->RemoveAdmin");
            }


            Network.Unique.API.Client.RequestOptions localVarRequestOptions = new Network.Unique.API.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Network.Unique.API.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Network.Unique.API.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (use != null)
            {
                localVarRequestOptions.QueryParameters.Add(Network.Unique.API.Client.ClientUtils.ParameterToMultiMap("", "use", use));
            }
            if (withFee != null)
            {
                localVarRequestOptions.QueryParameters.Add(Network.Unique.API.Client.ClientUtils.ParameterToMultiMap("", "withFee", withFee));
            }
            if (verify != null)
            {
                localVarRequestOptions.QueryParameters.Add(Network.Unique.API.Client.ClientUtils.ParameterToMultiMap("", "verify", verify));
            }
            if (callbackUrl != null)
            {
                localVarRequestOptions.QueryParameters.Add(Network.Unique.API.Client.ClientUtils.ParameterToMultiMap("", "callbackUrl", callbackUrl));
            }
            if (nonce != null)
            {
                localVarRequestOptions.QueryParameters.Add(Network.Unique.API.Client.ClientUtils.ParameterToMultiMap("", "nonce", nonce));
            }
            localVarRequestOptions.Data = removeAdminRequest;

            localVarRequestOptions.Operation = "CollectionsApi.RemoveAdmin";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (SeedAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.DeleteAsync<RemoveAdminDefaultResponse>("/v1/collections/admins", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RemoveAdmin", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Network.Unique.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="removeFromAllowListRequest"></param>
        /// <param name="use"> (optional)</param>
        /// <param name="withFee"> (optional, default to false) (deprecated)</param>
        /// <param name="verify"> (optional, default to false)</param>
        /// <param name="callbackUrl"> (optional)</param>
        /// <param name="nonce"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>RemoveFromAllowListDefaultResponse</returns>
        public RemoveFromAllowListDefaultResponse RemoveFromAllowList(RemoveFromAllowListRequest removeFromAllowListRequest, string use = default(string), bool? withFee = default(bool?), bool? verify = default(bool?), string callbackUrl = default(string), decimal? nonce = default(decimal?), int operationIndex = 0)
        {
            Network.Unique.API.Client.ApiResponse<RemoveFromAllowListDefaultResponse> localVarResponse = RemoveFromAllowListWithHttpInfo(removeFromAllowListRequest, use, withFee, verify, callbackUrl, nonce);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Network.Unique.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="removeFromAllowListRequest"></param>
        /// <param name="use"> (optional)</param>
        /// <param name="withFee"> (optional, default to false) (deprecated)</param>
        /// <param name="verify"> (optional, default to false)</param>
        /// <param name="callbackUrl"> (optional)</param>
        /// <param name="nonce"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of RemoveFromAllowListDefaultResponse</returns>
        public Network.Unique.API.Client.ApiResponse<RemoveFromAllowListDefaultResponse> RemoveFromAllowListWithHttpInfo(RemoveFromAllowListRequest removeFromAllowListRequest, string use = default(string), bool? withFee = default(bool?), bool? verify = default(bool?), string callbackUrl = default(string), decimal? nonce = default(decimal?), int operationIndex = 0)
        {
            // verify the required parameter 'removeFromAllowListRequest' is set
            if (removeFromAllowListRequest == null)
            {
                throw new Network.Unique.API.Client.ApiException(400, "Missing required parameter 'removeFromAllowListRequest' when calling CollectionsApi->RemoveFromAllowList");
            }

            Network.Unique.API.Client.RequestOptions localVarRequestOptions = new Network.Unique.API.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Network.Unique.API.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Network.Unique.API.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (use != null)
            {
                localVarRequestOptions.QueryParameters.Add(Network.Unique.API.Client.ClientUtils.ParameterToMultiMap("", "use", use));
            }
            if (withFee != null)
            {
                localVarRequestOptions.QueryParameters.Add(Network.Unique.API.Client.ClientUtils.ParameterToMultiMap("", "withFee", withFee));
            }
            if (verify != null)
            {
                localVarRequestOptions.QueryParameters.Add(Network.Unique.API.Client.ClientUtils.ParameterToMultiMap("", "verify", verify));
            }
            if (callbackUrl != null)
            {
                localVarRequestOptions.QueryParameters.Add(Network.Unique.API.Client.ClientUtils.ParameterToMultiMap("", "callbackUrl", callbackUrl));
            }
            if (nonce != null)
            {
                localVarRequestOptions.QueryParameters.Add(Network.Unique.API.Client.ClientUtils.ParameterToMultiMap("", "nonce", nonce));
            }
            localVarRequestOptions.Data = removeFromAllowListRequest;

            localVarRequestOptions.Operation = "CollectionsApi.RemoveFromAllowList";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (SeedAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<RemoveFromAllowListDefaultResponse>("/v1/collections/remove-from-allow-list", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RemoveFromAllowList", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Network.Unique.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="removeFromAllowListRequest"></param>
        /// <param name="use"> (optional)</param>
        /// <param name="withFee"> (optional, default to false) (deprecated)</param>
        /// <param name="verify"> (optional, default to false)</param>
        /// <param name="callbackUrl"> (optional)</param>
        /// <param name="nonce"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of RemoveFromAllowListDefaultResponse</returns>
        public async System.Threading.Tasks.Task<RemoveFromAllowListDefaultResponse> RemoveFromAllowListAsync(RemoveFromAllowListRequest removeFromAllowListRequest, string use = default(string), bool? withFee = default(bool?), bool? verify = default(bool?), string callbackUrl = default(string), decimal? nonce = default(decimal?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Network.Unique.API.Client.ApiResponse<RemoveFromAllowListDefaultResponse> localVarResponse = await RemoveFromAllowListWithHttpInfoAsync(removeFromAllowListRequest, use, withFee, verify, callbackUrl, nonce, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Network.Unique.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="removeFromAllowListRequest"></param>
        /// <param name="use"> (optional)</param>
        /// <param name="withFee"> (optional, default to false) (deprecated)</param>
        /// <param name="verify"> (optional, default to false)</param>
        /// <param name="callbackUrl"> (optional)</param>
        /// <param name="nonce"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (RemoveFromAllowListDefaultResponse)</returns>
        public async System.Threading.Tasks.Task<Network.Unique.API.Client.ApiResponse<RemoveFromAllowListDefaultResponse>> RemoveFromAllowListWithHttpInfoAsync(RemoveFromAllowListRequest removeFromAllowListRequest, string use = default(string), bool? withFee = default(bool?), bool? verify = default(bool?), string callbackUrl = default(string), decimal? nonce = default(decimal?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'removeFromAllowListRequest' is set
            if (removeFromAllowListRequest == null)
            {
                throw new Network.Unique.API.Client.ApiException(400, "Missing required parameter 'removeFromAllowListRequest' when calling CollectionsApi->RemoveFromAllowList");
            }


            Network.Unique.API.Client.RequestOptions localVarRequestOptions = new Network.Unique.API.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Network.Unique.API.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Network.Unique.API.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (use != null)
            {
                localVarRequestOptions.QueryParameters.Add(Network.Unique.API.Client.ClientUtils.ParameterToMultiMap("", "use", use));
            }
            if (withFee != null)
            {
                localVarRequestOptions.QueryParameters.Add(Network.Unique.API.Client.ClientUtils.ParameterToMultiMap("", "withFee", withFee));
            }
            if (verify != null)
            {
                localVarRequestOptions.QueryParameters.Add(Network.Unique.API.Client.ClientUtils.ParameterToMultiMap("", "verify", verify));
            }
            if (callbackUrl != null)
            {
                localVarRequestOptions.QueryParameters.Add(Network.Unique.API.Client.ClientUtils.ParameterToMultiMap("", "callbackUrl", callbackUrl));
            }
            if (nonce != null)
            {
                localVarRequestOptions.QueryParameters.Add(Network.Unique.API.Client.ClientUtils.ParameterToMultiMap("", "nonce", nonce));
            }
            localVarRequestOptions.Data = removeFromAllowListRequest;

            localVarRequestOptions.Operation = "CollectionsApi.RemoveFromAllowList";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (SeedAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<RemoveFromAllowListDefaultResponse>("/v1/collections/remove-from-allow-list", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RemoveFromAllowList", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Network.Unique.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="removeSponsorshipRequest"></param>
        /// <param name="use"> (optional)</param>
        /// <param name="withFee"> (optional, default to false) (deprecated)</param>
        /// <param name="verify"> (optional, default to false)</param>
        /// <param name="callbackUrl"> (optional)</param>
        /// <param name="nonce"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>RemoveSponsorshipDefaultResponse</returns>
        public RemoveSponsorshipDefaultResponse RemoveSponsorship(RemoveSponsorshipRequest removeSponsorshipRequest, string use = default(string), bool? withFee = default(bool?), bool? verify = default(bool?), string callbackUrl = default(string), decimal? nonce = default(decimal?), int operationIndex = 0)
        {
            Network.Unique.API.Client.ApiResponse<RemoveSponsorshipDefaultResponse> localVarResponse = RemoveSponsorshipWithHttpInfo(removeSponsorshipRequest, use, withFee, verify, callbackUrl, nonce);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Network.Unique.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="removeSponsorshipRequest"></param>
        /// <param name="use"> (optional)</param>
        /// <param name="withFee"> (optional, default to false) (deprecated)</param>
        /// <param name="verify"> (optional, default to false)</param>
        /// <param name="callbackUrl"> (optional)</param>
        /// <param name="nonce"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of RemoveSponsorshipDefaultResponse</returns>
        public Network.Unique.API.Client.ApiResponse<RemoveSponsorshipDefaultResponse> RemoveSponsorshipWithHttpInfo(RemoveSponsorshipRequest removeSponsorshipRequest, string use = default(string), bool? withFee = default(bool?), bool? verify = default(bool?), string callbackUrl = default(string), decimal? nonce = default(decimal?), int operationIndex = 0)
        {
            // verify the required parameter 'removeSponsorshipRequest' is set
            if (removeSponsorshipRequest == null)
            {
                throw new Network.Unique.API.Client.ApiException(400, "Missing required parameter 'removeSponsorshipRequest' when calling CollectionsApi->RemoveSponsorship");
            }

            Network.Unique.API.Client.RequestOptions localVarRequestOptions = new Network.Unique.API.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Network.Unique.API.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Network.Unique.API.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (use != null)
            {
                localVarRequestOptions.QueryParameters.Add(Network.Unique.API.Client.ClientUtils.ParameterToMultiMap("", "use", use));
            }
            if (withFee != null)
            {
                localVarRequestOptions.QueryParameters.Add(Network.Unique.API.Client.ClientUtils.ParameterToMultiMap("", "withFee", withFee));
            }
            if (verify != null)
            {
                localVarRequestOptions.QueryParameters.Add(Network.Unique.API.Client.ClientUtils.ParameterToMultiMap("", "verify", verify));
            }
            if (callbackUrl != null)
            {
                localVarRequestOptions.QueryParameters.Add(Network.Unique.API.Client.ClientUtils.ParameterToMultiMap("", "callbackUrl", callbackUrl));
            }
            if (nonce != null)
            {
                localVarRequestOptions.QueryParameters.Add(Network.Unique.API.Client.ClientUtils.ParameterToMultiMap("", "nonce", nonce));
            }
            localVarRequestOptions.Data = removeSponsorshipRequest;

            localVarRequestOptions.Operation = "CollectionsApi.RemoveSponsorship";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (SeedAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Delete<RemoveSponsorshipDefaultResponse>("/v1/collections/sponsorship", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RemoveSponsorship", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Network.Unique.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="removeSponsorshipRequest"></param>
        /// <param name="use"> (optional)</param>
        /// <param name="withFee"> (optional, default to false) (deprecated)</param>
        /// <param name="verify"> (optional, default to false)</param>
        /// <param name="callbackUrl"> (optional)</param>
        /// <param name="nonce"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of RemoveSponsorshipDefaultResponse</returns>
        public async System.Threading.Tasks.Task<RemoveSponsorshipDefaultResponse> RemoveSponsorshipAsync(RemoveSponsorshipRequest removeSponsorshipRequest, string use = default(string), bool? withFee = default(bool?), bool? verify = default(bool?), string callbackUrl = default(string), decimal? nonce = default(decimal?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Network.Unique.API.Client.ApiResponse<RemoveSponsorshipDefaultResponse> localVarResponse = await RemoveSponsorshipWithHttpInfoAsync(removeSponsorshipRequest, use, withFee, verify, callbackUrl, nonce, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Network.Unique.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="removeSponsorshipRequest"></param>
        /// <param name="use"> (optional)</param>
        /// <param name="withFee"> (optional, default to false) (deprecated)</param>
        /// <param name="verify"> (optional, default to false)</param>
        /// <param name="callbackUrl"> (optional)</param>
        /// <param name="nonce"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (RemoveSponsorshipDefaultResponse)</returns>
        public async System.Threading.Tasks.Task<Network.Unique.API.Client.ApiResponse<RemoveSponsorshipDefaultResponse>> RemoveSponsorshipWithHttpInfoAsync(RemoveSponsorshipRequest removeSponsorshipRequest, string use = default(string), bool? withFee = default(bool?), bool? verify = default(bool?), string callbackUrl = default(string), decimal? nonce = default(decimal?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'removeSponsorshipRequest' is set
            if (removeSponsorshipRequest == null)
            {
                throw new Network.Unique.API.Client.ApiException(400, "Missing required parameter 'removeSponsorshipRequest' when calling CollectionsApi->RemoveSponsorship");
            }


            Network.Unique.API.Client.RequestOptions localVarRequestOptions = new Network.Unique.API.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Network.Unique.API.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Network.Unique.API.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (use != null)
            {
                localVarRequestOptions.QueryParameters.Add(Network.Unique.API.Client.ClientUtils.ParameterToMultiMap("", "use", use));
            }
            if (withFee != null)
            {
                localVarRequestOptions.QueryParameters.Add(Network.Unique.API.Client.ClientUtils.ParameterToMultiMap("", "withFee", withFee));
            }
            if (verify != null)
            {
                localVarRequestOptions.QueryParameters.Add(Network.Unique.API.Client.ClientUtils.ParameterToMultiMap("", "verify", verify));
            }
            if (callbackUrl != null)
            {
                localVarRequestOptions.QueryParameters.Add(Network.Unique.API.Client.ClientUtils.ParameterToMultiMap("", "callbackUrl", callbackUrl));
            }
            if (nonce != null)
            {
                localVarRequestOptions.QueryParameters.Add(Network.Unique.API.Client.ClientUtils.ParameterToMultiMap("", "nonce", nonce));
            }
            localVarRequestOptions.Data = removeSponsorshipRequest;

            localVarRequestOptions.Operation = "CollectionsApi.RemoveSponsorship";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (SeedAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.DeleteAsync<RemoveSponsorshipDefaultResponse>("/v1/collections/sponsorship", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RemoveSponsorship", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Network.Unique.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="setCollectionLimitsRequest"></param>
        /// <param name="use"> (optional)</param>
        /// <param name="withFee"> (optional, default to false) (deprecated)</param>
        /// <param name="verify"> (optional, default to false)</param>
        /// <param name="callbackUrl"> (optional)</param>
        /// <param name="nonce"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>SetCollectionLimitsDefaultResponse</returns>
        public SetCollectionLimitsDefaultResponse SetCollectionLimits(SetCollectionLimitsRequest setCollectionLimitsRequest, string use = default(string), bool? withFee = default(bool?), bool? verify = default(bool?), string callbackUrl = default(string), decimal? nonce = default(decimal?), int operationIndex = 0)
        {
            Network.Unique.API.Client.ApiResponse<SetCollectionLimitsDefaultResponse> localVarResponse = SetCollectionLimitsWithHttpInfo(setCollectionLimitsRequest, use, withFee, verify, callbackUrl, nonce);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Network.Unique.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="setCollectionLimitsRequest"></param>
        /// <param name="use"> (optional)</param>
        /// <param name="withFee"> (optional, default to false) (deprecated)</param>
        /// <param name="verify"> (optional, default to false)</param>
        /// <param name="callbackUrl"> (optional)</param>
        /// <param name="nonce"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of SetCollectionLimitsDefaultResponse</returns>
        public Network.Unique.API.Client.ApiResponse<SetCollectionLimitsDefaultResponse> SetCollectionLimitsWithHttpInfo(SetCollectionLimitsRequest setCollectionLimitsRequest, string use = default(string), bool? withFee = default(bool?), bool? verify = default(bool?), string callbackUrl = default(string), decimal? nonce = default(decimal?), int operationIndex = 0)
        {
            // verify the required parameter 'setCollectionLimitsRequest' is set
            if (setCollectionLimitsRequest == null)
            {
                throw new Network.Unique.API.Client.ApiException(400, "Missing required parameter 'setCollectionLimitsRequest' when calling CollectionsApi->SetCollectionLimits");
            }

            Network.Unique.API.Client.RequestOptions localVarRequestOptions = new Network.Unique.API.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Network.Unique.API.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Network.Unique.API.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (use != null)
            {
                localVarRequestOptions.QueryParameters.Add(Network.Unique.API.Client.ClientUtils.ParameterToMultiMap("", "use", use));
            }
            if (withFee != null)
            {
                localVarRequestOptions.QueryParameters.Add(Network.Unique.API.Client.ClientUtils.ParameterToMultiMap("", "withFee", withFee));
            }
            if (verify != null)
            {
                localVarRequestOptions.QueryParameters.Add(Network.Unique.API.Client.ClientUtils.ParameterToMultiMap("", "verify", verify));
            }
            if (callbackUrl != null)
            {
                localVarRequestOptions.QueryParameters.Add(Network.Unique.API.Client.ClientUtils.ParameterToMultiMap("", "callbackUrl", callbackUrl));
            }
            if (nonce != null)
            {
                localVarRequestOptions.QueryParameters.Add(Network.Unique.API.Client.ClientUtils.ParameterToMultiMap("", "nonce", nonce));
            }
            localVarRequestOptions.Data = setCollectionLimitsRequest;

            localVarRequestOptions.Operation = "CollectionsApi.SetCollectionLimits";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (SeedAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<SetCollectionLimitsDefaultResponse>("/v1/collections/set-limits", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SetCollectionLimits", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Network.Unique.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="setCollectionLimitsRequest"></param>
        /// <param name="use"> (optional)</param>
        /// <param name="withFee"> (optional, default to false) (deprecated)</param>
        /// <param name="verify"> (optional, default to false)</param>
        /// <param name="callbackUrl"> (optional)</param>
        /// <param name="nonce"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SetCollectionLimitsDefaultResponse</returns>
        public async System.Threading.Tasks.Task<SetCollectionLimitsDefaultResponse> SetCollectionLimitsAsync(SetCollectionLimitsRequest setCollectionLimitsRequest, string use = default(string), bool? withFee = default(bool?), bool? verify = default(bool?), string callbackUrl = default(string), decimal? nonce = default(decimal?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Network.Unique.API.Client.ApiResponse<SetCollectionLimitsDefaultResponse> localVarResponse = await SetCollectionLimitsWithHttpInfoAsync(setCollectionLimitsRequest, use, withFee, verify, callbackUrl, nonce, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Network.Unique.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="setCollectionLimitsRequest"></param>
        /// <param name="use"> (optional)</param>
        /// <param name="withFee"> (optional, default to false) (deprecated)</param>
        /// <param name="verify"> (optional, default to false)</param>
        /// <param name="callbackUrl"> (optional)</param>
        /// <param name="nonce"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SetCollectionLimitsDefaultResponse)</returns>
        public async System.Threading.Tasks.Task<Network.Unique.API.Client.ApiResponse<SetCollectionLimitsDefaultResponse>> SetCollectionLimitsWithHttpInfoAsync(SetCollectionLimitsRequest setCollectionLimitsRequest, string use = default(string), bool? withFee = default(bool?), bool? verify = default(bool?), string callbackUrl = default(string), decimal? nonce = default(decimal?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'setCollectionLimitsRequest' is set
            if (setCollectionLimitsRequest == null)
            {
                throw new Network.Unique.API.Client.ApiException(400, "Missing required parameter 'setCollectionLimitsRequest' when calling CollectionsApi->SetCollectionLimits");
            }


            Network.Unique.API.Client.RequestOptions localVarRequestOptions = new Network.Unique.API.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Network.Unique.API.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Network.Unique.API.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (use != null)
            {
                localVarRequestOptions.QueryParameters.Add(Network.Unique.API.Client.ClientUtils.ParameterToMultiMap("", "use", use));
            }
            if (withFee != null)
            {
                localVarRequestOptions.QueryParameters.Add(Network.Unique.API.Client.ClientUtils.ParameterToMultiMap("", "withFee", withFee));
            }
            if (verify != null)
            {
                localVarRequestOptions.QueryParameters.Add(Network.Unique.API.Client.ClientUtils.ParameterToMultiMap("", "verify", verify));
            }
            if (callbackUrl != null)
            {
                localVarRequestOptions.QueryParameters.Add(Network.Unique.API.Client.ClientUtils.ParameterToMultiMap("", "callbackUrl", callbackUrl));
            }
            if (nonce != null)
            {
                localVarRequestOptions.QueryParameters.Add(Network.Unique.API.Client.ClientUtils.ParameterToMultiMap("", "nonce", nonce));
            }
            localVarRequestOptions.Data = setCollectionLimitsRequest;

            localVarRequestOptions.Operation = "CollectionsApi.SetCollectionLimits";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (SeedAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<SetCollectionLimitsDefaultResponse>("/v1/collections/set-limits", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SetCollectionLimits", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Network.Unique.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="setCollectionPropertiesRequest"></param>
        /// <param name="use"> (optional)</param>
        /// <param name="withFee"> (optional, default to false) (deprecated)</param>
        /// <param name="verify"> (optional, default to false)</param>
        /// <param name="callbackUrl"> (optional)</param>
        /// <param name="nonce"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>SetCollectionPropertiesDefaultResponse</returns>
        public SetCollectionPropertiesDefaultResponse SetCollectionProperties(SetCollectionPropertiesRequest setCollectionPropertiesRequest, string use = default(string), bool? withFee = default(bool?), bool? verify = default(bool?), string callbackUrl = default(string), decimal? nonce = default(decimal?), int operationIndex = 0)
        {
            Network.Unique.API.Client.ApiResponse<SetCollectionPropertiesDefaultResponse> localVarResponse = SetCollectionPropertiesWithHttpInfo(setCollectionPropertiesRequest, use, withFee, verify, callbackUrl, nonce);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Network.Unique.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="setCollectionPropertiesRequest"></param>
        /// <param name="use"> (optional)</param>
        /// <param name="withFee"> (optional, default to false) (deprecated)</param>
        /// <param name="verify"> (optional, default to false)</param>
        /// <param name="callbackUrl"> (optional)</param>
        /// <param name="nonce"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of SetCollectionPropertiesDefaultResponse</returns>
        public Network.Unique.API.Client.ApiResponse<SetCollectionPropertiesDefaultResponse> SetCollectionPropertiesWithHttpInfo(SetCollectionPropertiesRequest setCollectionPropertiesRequest, string use = default(string), bool? withFee = default(bool?), bool? verify = default(bool?), string callbackUrl = default(string), decimal? nonce = default(decimal?), int operationIndex = 0)
        {
            // verify the required parameter 'setCollectionPropertiesRequest' is set
            if (setCollectionPropertiesRequest == null)
            {
                throw new Network.Unique.API.Client.ApiException(400, "Missing required parameter 'setCollectionPropertiesRequest' when calling CollectionsApi->SetCollectionProperties");
            }

            Network.Unique.API.Client.RequestOptions localVarRequestOptions = new Network.Unique.API.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Network.Unique.API.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Network.Unique.API.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (use != null)
            {
                localVarRequestOptions.QueryParameters.Add(Network.Unique.API.Client.ClientUtils.ParameterToMultiMap("", "use", use));
            }
            if (withFee != null)
            {
                localVarRequestOptions.QueryParameters.Add(Network.Unique.API.Client.ClientUtils.ParameterToMultiMap("", "withFee", withFee));
            }
            if (verify != null)
            {
                localVarRequestOptions.QueryParameters.Add(Network.Unique.API.Client.ClientUtils.ParameterToMultiMap("", "verify", verify));
            }
            if (callbackUrl != null)
            {
                localVarRequestOptions.QueryParameters.Add(Network.Unique.API.Client.ClientUtils.ParameterToMultiMap("", "callbackUrl", callbackUrl));
            }
            if (nonce != null)
            {
                localVarRequestOptions.QueryParameters.Add(Network.Unique.API.Client.ClientUtils.ParameterToMultiMap("", "nonce", nonce));
            }
            localVarRequestOptions.Data = setCollectionPropertiesRequest;

            localVarRequestOptions.Operation = "CollectionsApi.SetCollectionProperties";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (SeedAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<SetCollectionPropertiesDefaultResponse>("/v1/collections/properties", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SetCollectionProperties", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Network.Unique.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="setCollectionPropertiesRequest"></param>
        /// <param name="use"> (optional)</param>
        /// <param name="withFee"> (optional, default to false) (deprecated)</param>
        /// <param name="verify"> (optional, default to false)</param>
        /// <param name="callbackUrl"> (optional)</param>
        /// <param name="nonce"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SetCollectionPropertiesDefaultResponse</returns>
        public async System.Threading.Tasks.Task<SetCollectionPropertiesDefaultResponse> SetCollectionPropertiesAsync(SetCollectionPropertiesRequest setCollectionPropertiesRequest, string use = default(string), bool? withFee = default(bool?), bool? verify = default(bool?), string callbackUrl = default(string), decimal? nonce = default(decimal?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Network.Unique.API.Client.ApiResponse<SetCollectionPropertiesDefaultResponse> localVarResponse = await SetCollectionPropertiesWithHttpInfoAsync(setCollectionPropertiesRequest, use, withFee, verify, callbackUrl, nonce, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Network.Unique.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="setCollectionPropertiesRequest"></param>
        /// <param name="use"> (optional)</param>
        /// <param name="withFee"> (optional, default to false) (deprecated)</param>
        /// <param name="verify"> (optional, default to false)</param>
        /// <param name="callbackUrl"> (optional)</param>
        /// <param name="nonce"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SetCollectionPropertiesDefaultResponse)</returns>
        public async System.Threading.Tasks.Task<Network.Unique.API.Client.ApiResponse<SetCollectionPropertiesDefaultResponse>> SetCollectionPropertiesWithHttpInfoAsync(SetCollectionPropertiesRequest setCollectionPropertiesRequest, string use = default(string), bool? withFee = default(bool?), bool? verify = default(bool?), string callbackUrl = default(string), decimal? nonce = default(decimal?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'setCollectionPropertiesRequest' is set
            if (setCollectionPropertiesRequest == null)
            {
                throw new Network.Unique.API.Client.ApiException(400, "Missing required parameter 'setCollectionPropertiesRequest' when calling CollectionsApi->SetCollectionProperties");
            }


            Network.Unique.API.Client.RequestOptions localVarRequestOptions = new Network.Unique.API.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Network.Unique.API.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Network.Unique.API.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (use != null)
            {
                localVarRequestOptions.QueryParameters.Add(Network.Unique.API.Client.ClientUtils.ParameterToMultiMap("", "use", use));
            }
            if (withFee != null)
            {
                localVarRequestOptions.QueryParameters.Add(Network.Unique.API.Client.ClientUtils.ParameterToMultiMap("", "withFee", withFee));
            }
            if (verify != null)
            {
                localVarRequestOptions.QueryParameters.Add(Network.Unique.API.Client.ClientUtils.ParameterToMultiMap("", "verify", verify));
            }
            if (callbackUrl != null)
            {
                localVarRequestOptions.QueryParameters.Add(Network.Unique.API.Client.ClientUtils.ParameterToMultiMap("", "callbackUrl", callbackUrl));
            }
            if (nonce != null)
            {
                localVarRequestOptions.QueryParameters.Add(Network.Unique.API.Client.ClientUtils.ParameterToMultiMap("", "nonce", nonce));
            }
            localVarRequestOptions.Data = setCollectionPropertiesRequest;

            localVarRequestOptions.Operation = "CollectionsApi.SetCollectionProperties";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (SeedAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<SetCollectionPropertiesDefaultResponse>("/v1/collections/properties", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SetCollectionProperties", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Network.Unique.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="setPermissionsRequest"></param>
        /// <param name="use"> (optional)</param>
        /// <param name="withFee"> (optional, default to false) (deprecated)</param>
        /// <param name="verify"> (optional, default to false)</param>
        /// <param name="callbackUrl"> (optional)</param>
        /// <param name="nonce"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>SetPermissionsDefaultResponse</returns>
        public SetPermissionsDefaultResponse SetPermissions(SetPermissionsRequest setPermissionsRequest, string use = default(string), bool? withFee = default(bool?), bool? verify = default(bool?), string callbackUrl = default(string), decimal? nonce = default(decimal?), int operationIndex = 0)
        {
            Network.Unique.API.Client.ApiResponse<SetPermissionsDefaultResponse> localVarResponse = SetPermissionsWithHttpInfo(setPermissionsRequest, use, withFee, verify, callbackUrl, nonce);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Network.Unique.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="setPermissionsRequest"></param>
        /// <param name="use"> (optional)</param>
        /// <param name="withFee"> (optional, default to false) (deprecated)</param>
        /// <param name="verify"> (optional, default to false)</param>
        /// <param name="callbackUrl"> (optional)</param>
        /// <param name="nonce"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of SetPermissionsDefaultResponse</returns>
        public Network.Unique.API.Client.ApiResponse<SetPermissionsDefaultResponse> SetPermissionsWithHttpInfo(SetPermissionsRequest setPermissionsRequest, string use = default(string), bool? withFee = default(bool?), bool? verify = default(bool?), string callbackUrl = default(string), decimal? nonce = default(decimal?), int operationIndex = 0)
        {
            // verify the required parameter 'setPermissionsRequest' is set
            if (setPermissionsRequest == null)
            {
                throw new Network.Unique.API.Client.ApiException(400, "Missing required parameter 'setPermissionsRequest' when calling CollectionsApi->SetPermissions");
            }

            Network.Unique.API.Client.RequestOptions localVarRequestOptions = new Network.Unique.API.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Network.Unique.API.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Network.Unique.API.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (use != null)
            {
                localVarRequestOptions.QueryParameters.Add(Network.Unique.API.Client.ClientUtils.ParameterToMultiMap("", "use", use));
            }
            if (withFee != null)
            {
                localVarRequestOptions.QueryParameters.Add(Network.Unique.API.Client.ClientUtils.ParameterToMultiMap("", "withFee", withFee));
            }
            if (verify != null)
            {
                localVarRequestOptions.QueryParameters.Add(Network.Unique.API.Client.ClientUtils.ParameterToMultiMap("", "verify", verify));
            }
            if (callbackUrl != null)
            {
                localVarRequestOptions.QueryParameters.Add(Network.Unique.API.Client.ClientUtils.ParameterToMultiMap("", "callbackUrl", callbackUrl));
            }
            if (nonce != null)
            {
                localVarRequestOptions.QueryParameters.Add(Network.Unique.API.Client.ClientUtils.ParameterToMultiMap("", "nonce", nonce));
            }
            localVarRequestOptions.Data = setPermissionsRequest;

            localVarRequestOptions.Operation = "CollectionsApi.SetPermissions";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (SeedAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<SetPermissionsDefaultResponse>("/v1/collections/permissions", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SetPermissions", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Network.Unique.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="setPermissionsRequest"></param>
        /// <param name="use"> (optional)</param>
        /// <param name="withFee"> (optional, default to false) (deprecated)</param>
        /// <param name="verify"> (optional, default to false)</param>
        /// <param name="callbackUrl"> (optional)</param>
        /// <param name="nonce"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SetPermissionsDefaultResponse</returns>
        public async System.Threading.Tasks.Task<SetPermissionsDefaultResponse> SetPermissionsAsync(SetPermissionsRequest setPermissionsRequest, string use = default(string), bool? withFee = default(bool?), bool? verify = default(bool?), string callbackUrl = default(string), decimal? nonce = default(decimal?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Network.Unique.API.Client.ApiResponse<SetPermissionsDefaultResponse> localVarResponse = await SetPermissionsWithHttpInfoAsync(setPermissionsRequest, use, withFee, verify, callbackUrl, nonce, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Network.Unique.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="setPermissionsRequest"></param>
        /// <param name="use"> (optional)</param>
        /// <param name="withFee"> (optional, default to false) (deprecated)</param>
        /// <param name="verify"> (optional, default to false)</param>
        /// <param name="callbackUrl"> (optional)</param>
        /// <param name="nonce"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SetPermissionsDefaultResponse)</returns>
        public async System.Threading.Tasks.Task<Network.Unique.API.Client.ApiResponse<SetPermissionsDefaultResponse>> SetPermissionsWithHttpInfoAsync(SetPermissionsRequest setPermissionsRequest, string use = default(string), bool? withFee = default(bool?), bool? verify = default(bool?), string callbackUrl = default(string), decimal? nonce = default(decimal?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'setPermissionsRequest' is set
            if (setPermissionsRequest == null)
            {
                throw new Network.Unique.API.Client.ApiException(400, "Missing required parameter 'setPermissionsRequest' when calling CollectionsApi->SetPermissions");
            }


            Network.Unique.API.Client.RequestOptions localVarRequestOptions = new Network.Unique.API.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Network.Unique.API.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Network.Unique.API.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (use != null)
            {
                localVarRequestOptions.QueryParameters.Add(Network.Unique.API.Client.ClientUtils.ParameterToMultiMap("", "use", use));
            }
            if (withFee != null)
            {
                localVarRequestOptions.QueryParameters.Add(Network.Unique.API.Client.ClientUtils.ParameterToMultiMap("", "withFee", withFee));
            }
            if (verify != null)
            {
                localVarRequestOptions.QueryParameters.Add(Network.Unique.API.Client.ClientUtils.ParameterToMultiMap("", "verify", verify));
            }
            if (callbackUrl != null)
            {
                localVarRequestOptions.QueryParameters.Add(Network.Unique.API.Client.ClientUtils.ParameterToMultiMap("", "callbackUrl", callbackUrl));
            }
            if (nonce != null)
            {
                localVarRequestOptions.QueryParameters.Add(Network.Unique.API.Client.ClientUtils.ParameterToMultiMap("", "nonce", nonce));
            }
            localVarRequestOptions.Data = setPermissionsRequest;

            localVarRequestOptions.Operation = "CollectionsApi.SetPermissions";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (SeedAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<SetPermissionsDefaultResponse>("/v1/collections/permissions", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SetPermissions", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Network.Unique.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="setPropertyPermissionsRequest"></param>
        /// <param name="use"> (optional)</param>
        /// <param name="withFee"> (optional, default to false) (deprecated)</param>
        /// <param name="verify"> (optional, default to false)</param>
        /// <param name="callbackUrl"> (optional)</param>
        /// <param name="nonce"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>SetPropertyPermissionsDefaultResponse</returns>
        public SetPropertyPermissionsDefaultResponse SetPropertyPermissions(SetPropertyPermissionsRequest setPropertyPermissionsRequest, string use = default(string), bool? withFee = default(bool?), bool? verify = default(bool?), string callbackUrl = default(string), decimal? nonce = default(decimal?), int operationIndex = 0)
        {
            Network.Unique.API.Client.ApiResponse<SetPropertyPermissionsDefaultResponse> localVarResponse = SetPropertyPermissionsWithHttpInfo(setPropertyPermissionsRequest, use, withFee, verify, callbackUrl, nonce);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Network.Unique.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="setPropertyPermissionsRequest"></param>
        /// <param name="use"> (optional)</param>
        /// <param name="withFee"> (optional, default to false) (deprecated)</param>
        /// <param name="verify"> (optional, default to false)</param>
        /// <param name="callbackUrl"> (optional)</param>
        /// <param name="nonce"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of SetPropertyPermissionsDefaultResponse</returns>
        public Network.Unique.API.Client.ApiResponse<SetPropertyPermissionsDefaultResponse> SetPropertyPermissionsWithHttpInfo(SetPropertyPermissionsRequest setPropertyPermissionsRequest, string use = default(string), bool? withFee = default(bool?), bool? verify = default(bool?), string callbackUrl = default(string), decimal? nonce = default(decimal?), int operationIndex = 0)
        {
            // verify the required parameter 'setPropertyPermissionsRequest' is set
            if (setPropertyPermissionsRequest == null)
            {
                throw new Network.Unique.API.Client.ApiException(400, "Missing required parameter 'setPropertyPermissionsRequest' when calling CollectionsApi->SetPropertyPermissions");
            }

            Network.Unique.API.Client.RequestOptions localVarRequestOptions = new Network.Unique.API.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Network.Unique.API.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Network.Unique.API.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (use != null)
            {
                localVarRequestOptions.QueryParameters.Add(Network.Unique.API.Client.ClientUtils.ParameterToMultiMap("", "use", use));
            }
            if (withFee != null)
            {
                localVarRequestOptions.QueryParameters.Add(Network.Unique.API.Client.ClientUtils.ParameterToMultiMap("", "withFee", withFee));
            }
            if (verify != null)
            {
                localVarRequestOptions.QueryParameters.Add(Network.Unique.API.Client.ClientUtils.ParameterToMultiMap("", "verify", verify));
            }
            if (callbackUrl != null)
            {
                localVarRequestOptions.QueryParameters.Add(Network.Unique.API.Client.ClientUtils.ParameterToMultiMap("", "callbackUrl", callbackUrl));
            }
            if (nonce != null)
            {
                localVarRequestOptions.QueryParameters.Add(Network.Unique.API.Client.ClientUtils.ParameterToMultiMap("", "nonce", nonce));
            }
            localVarRequestOptions.Data = setPropertyPermissionsRequest;

            localVarRequestOptions.Operation = "CollectionsApi.SetPropertyPermissions";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (SeedAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<SetPropertyPermissionsDefaultResponse>("/v1/collections/property-permissions", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SetPropertyPermissions", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Network.Unique.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="setPropertyPermissionsRequest"></param>
        /// <param name="use"> (optional)</param>
        /// <param name="withFee"> (optional, default to false) (deprecated)</param>
        /// <param name="verify"> (optional, default to false)</param>
        /// <param name="callbackUrl"> (optional)</param>
        /// <param name="nonce"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SetPropertyPermissionsDefaultResponse</returns>
        public async System.Threading.Tasks.Task<SetPropertyPermissionsDefaultResponse> SetPropertyPermissionsAsync(SetPropertyPermissionsRequest setPropertyPermissionsRequest, string use = default(string), bool? withFee = default(bool?), bool? verify = default(bool?), string callbackUrl = default(string), decimal? nonce = default(decimal?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Network.Unique.API.Client.ApiResponse<SetPropertyPermissionsDefaultResponse> localVarResponse = await SetPropertyPermissionsWithHttpInfoAsync(setPropertyPermissionsRequest, use, withFee, verify, callbackUrl, nonce, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Network.Unique.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="setPropertyPermissionsRequest"></param>
        /// <param name="use"> (optional)</param>
        /// <param name="withFee"> (optional, default to false) (deprecated)</param>
        /// <param name="verify"> (optional, default to false)</param>
        /// <param name="callbackUrl"> (optional)</param>
        /// <param name="nonce"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SetPropertyPermissionsDefaultResponse)</returns>
        public async System.Threading.Tasks.Task<Network.Unique.API.Client.ApiResponse<SetPropertyPermissionsDefaultResponse>> SetPropertyPermissionsWithHttpInfoAsync(SetPropertyPermissionsRequest setPropertyPermissionsRequest, string use = default(string), bool? withFee = default(bool?), bool? verify = default(bool?), string callbackUrl = default(string), decimal? nonce = default(decimal?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'setPropertyPermissionsRequest' is set
            if (setPropertyPermissionsRequest == null)
            {
                throw new Network.Unique.API.Client.ApiException(400, "Missing required parameter 'setPropertyPermissionsRequest' when calling CollectionsApi->SetPropertyPermissions");
            }


            Network.Unique.API.Client.RequestOptions localVarRequestOptions = new Network.Unique.API.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Network.Unique.API.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Network.Unique.API.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (use != null)
            {
                localVarRequestOptions.QueryParameters.Add(Network.Unique.API.Client.ClientUtils.ParameterToMultiMap("", "use", use));
            }
            if (withFee != null)
            {
                localVarRequestOptions.QueryParameters.Add(Network.Unique.API.Client.ClientUtils.ParameterToMultiMap("", "withFee", withFee));
            }
            if (verify != null)
            {
                localVarRequestOptions.QueryParameters.Add(Network.Unique.API.Client.ClientUtils.ParameterToMultiMap("", "verify", verify));
            }
            if (callbackUrl != null)
            {
                localVarRequestOptions.QueryParameters.Add(Network.Unique.API.Client.ClientUtils.ParameterToMultiMap("", "callbackUrl", callbackUrl));
            }
            if (nonce != null)
            {
                localVarRequestOptions.QueryParameters.Add(Network.Unique.API.Client.ClientUtils.ParameterToMultiMap("", "nonce", nonce));
            }
            localVarRequestOptions.Data = setPropertyPermissionsRequest;

            localVarRequestOptions.Operation = "CollectionsApi.SetPropertyPermissions";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (SeedAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<SetPropertyPermissionsDefaultResponse>("/v1/collections/property-permissions", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SetPropertyPermissions", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Network.Unique.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="setSponsorshipRequest"></param>
        /// <param name="use"> (optional)</param>
        /// <param name="withFee"> (optional, default to false) (deprecated)</param>
        /// <param name="verify"> (optional, default to false)</param>
        /// <param name="callbackUrl"> (optional)</param>
        /// <param name="nonce"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>SetSponsorshipDefaultResponse</returns>
        public SetSponsorshipDefaultResponse SetSponsorship(SetSponsorshipRequest setSponsorshipRequest, string use = default(string), bool? withFee = default(bool?), bool? verify = default(bool?), string callbackUrl = default(string), decimal? nonce = default(decimal?), int operationIndex = 0)
        {
            Network.Unique.API.Client.ApiResponse<SetSponsorshipDefaultResponse> localVarResponse = SetSponsorshipWithHttpInfo(setSponsorshipRequest, use, withFee, verify, callbackUrl, nonce);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Network.Unique.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="setSponsorshipRequest"></param>
        /// <param name="use"> (optional)</param>
        /// <param name="withFee"> (optional, default to false) (deprecated)</param>
        /// <param name="verify"> (optional, default to false)</param>
        /// <param name="callbackUrl"> (optional)</param>
        /// <param name="nonce"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of SetSponsorshipDefaultResponse</returns>
        public Network.Unique.API.Client.ApiResponse<SetSponsorshipDefaultResponse> SetSponsorshipWithHttpInfo(SetSponsorshipRequest setSponsorshipRequest, string use = default(string), bool? withFee = default(bool?), bool? verify = default(bool?), string callbackUrl = default(string), decimal? nonce = default(decimal?), int operationIndex = 0)
        {
            // verify the required parameter 'setSponsorshipRequest' is set
            if (setSponsorshipRequest == null)
            {
                throw new Network.Unique.API.Client.ApiException(400, "Missing required parameter 'setSponsorshipRequest' when calling CollectionsApi->SetSponsorship");
            }

            Network.Unique.API.Client.RequestOptions localVarRequestOptions = new Network.Unique.API.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Network.Unique.API.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Network.Unique.API.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (use != null)
            {
                localVarRequestOptions.QueryParameters.Add(Network.Unique.API.Client.ClientUtils.ParameterToMultiMap("", "use", use));
            }
            if (withFee != null)
            {
                localVarRequestOptions.QueryParameters.Add(Network.Unique.API.Client.ClientUtils.ParameterToMultiMap("", "withFee", withFee));
            }
            if (verify != null)
            {
                localVarRequestOptions.QueryParameters.Add(Network.Unique.API.Client.ClientUtils.ParameterToMultiMap("", "verify", verify));
            }
            if (callbackUrl != null)
            {
                localVarRequestOptions.QueryParameters.Add(Network.Unique.API.Client.ClientUtils.ParameterToMultiMap("", "callbackUrl", callbackUrl));
            }
            if (nonce != null)
            {
                localVarRequestOptions.QueryParameters.Add(Network.Unique.API.Client.ClientUtils.ParameterToMultiMap("", "nonce", nonce));
            }
            localVarRequestOptions.Data = setSponsorshipRequest;

            localVarRequestOptions.Operation = "CollectionsApi.SetSponsorship";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (SeedAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<SetSponsorshipDefaultResponse>("/v1/collections/sponsorship", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SetSponsorship", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Network.Unique.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="setSponsorshipRequest"></param>
        /// <param name="use"> (optional)</param>
        /// <param name="withFee"> (optional, default to false) (deprecated)</param>
        /// <param name="verify"> (optional, default to false)</param>
        /// <param name="callbackUrl"> (optional)</param>
        /// <param name="nonce"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SetSponsorshipDefaultResponse</returns>
        public async System.Threading.Tasks.Task<SetSponsorshipDefaultResponse> SetSponsorshipAsync(SetSponsorshipRequest setSponsorshipRequest, string use = default(string), bool? withFee = default(bool?), bool? verify = default(bool?), string callbackUrl = default(string), decimal? nonce = default(decimal?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Network.Unique.API.Client.ApiResponse<SetSponsorshipDefaultResponse> localVarResponse = await SetSponsorshipWithHttpInfoAsync(setSponsorshipRequest, use, withFee, verify, callbackUrl, nonce, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Network.Unique.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="setSponsorshipRequest"></param>
        /// <param name="use"> (optional)</param>
        /// <param name="withFee"> (optional, default to false) (deprecated)</param>
        /// <param name="verify"> (optional, default to false)</param>
        /// <param name="callbackUrl"> (optional)</param>
        /// <param name="nonce"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SetSponsorshipDefaultResponse)</returns>
        public async System.Threading.Tasks.Task<Network.Unique.API.Client.ApiResponse<SetSponsorshipDefaultResponse>> SetSponsorshipWithHttpInfoAsync(SetSponsorshipRequest setSponsorshipRequest, string use = default(string), bool? withFee = default(bool?), bool? verify = default(bool?), string callbackUrl = default(string), decimal? nonce = default(decimal?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'setSponsorshipRequest' is set
            if (setSponsorshipRequest == null)
            {
                throw new Network.Unique.API.Client.ApiException(400, "Missing required parameter 'setSponsorshipRequest' when calling CollectionsApi->SetSponsorship");
            }


            Network.Unique.API.Client.RequestOptions localVarRequestOptions = new Network.Unique.API.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Network.Unique.API.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Network.Unique.API.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (use != null)
            {
                localVarRequestOptions.QueryParameters.Add(Network.Unique.API.Client.ClientUtils.ParameterToMultiMap("", "use", use));
            }
            if (withFee != null)
            {
                localVarRequestOptions.QueryParameters.Add(Network.Unique.API.Client.ClientUtils.ParameterToMultiMap("", "withFee", withFee));
            }
            if (verify != null)
            {
                localVarRequestOptions.QueryParameters.Add(Network.Unique.API.Client.ClientUtils.ParameterToMultiMap("", "verify", verify));
            }
            if (callbackUrl != null)
            {
                localVarRequestOptions.QueryParameters.Add(Network.Unique.API.Client.ClientUtils.ParameterToMultiMap("", "callbackUrl", callbackUrl));
            }
            if (nonce != null)
            {
                localVarRequestOptions.QueryParameters.Add(Network.Unique.API.Client.ClientUtils.ParameterToMultiMap("", "nonce", nonce));
            }
            localVarRequestOptions.Data = setSponsorshipRequest;

            localVarRequestOptions.Operation = "CollectionsApi.SetSponsorship";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (SeedAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<SetSponsorshipDefaultResponse>("/v1/collections/sponsorship", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SetSponsorship", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Network.Unique.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="setTransfersEnabledRequest"></param>
        /// <param name="use"> (optional)</param>
        /// <param name="withFee"> (optional, default to false) (deprecated)</param>
        /// <param name="verify"> (optional, default to false)</param>
        /// <param name="callbackUrl"> (optional)</param>
        /// <param name="nonce"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>SetTransfersEnabledDefaultResponse</returns>
        public SetTransfersEnabledDefaultResponse SetTransfersEnabled(SetTransfersEnabledRequest setTransfersEnabledRequest, string use = default(string), bool? withFee = default(bool?), bool? verify = default(bool?), string callbackUrl = default(string), decimal? nonce = default(decimal?), int operationIndex = 0)
        {
            Network.Unique.API.Client.ApiResponse<SetTransfersEnabledDefaultResponse> localVarResponse = SetTransfersEnabledWithHttpInfo(setTransfersEnabledRequest, use, withFee, verify, callbackUrl, nonce);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Network.Unique.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="setTransfersEnabledRequest"></param>
        /// <param name="use"> (optional)</param>
        /// <param name="withFee"> (optional, default to false) (deprecated)</param>
        /// <param name="verify"> (optional, default to false)</param>
        /// <param name="callbackUrl"> (optional)</param>
        /// <param name="nonce"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of SetTransfersEnabledDefaultResponse</returns>
        public Network.Unique.API.Client.ApiResponse<SetTransfersEnabledDefaultResponse> SetTransfersEnabledWithHttpInfo(SetTransfersEnabledRequest setTransfersEnabledRequest, string use = default(string), bool? withFee = default(bool?), bool? verify = default(bool?), string callbackUrl = default(string), decimal? nonce = default(decimal?), int operationIndex = 0)
        {
            // verify the required parameter 'setTransfersEnabledRequest' is set
            if (setTransfersEnabledRequest == null)
            {
                throw new Network.Unique.API.Client.ApiException(400, "Missing required parameter 'setTransfersEnabledRequest' when calling CollectionsApi->SetTransfersEnabled");
            }

            Network.Unique.API.Client.RequestOptions localVarRequestOptions = new Network.Unique.API.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Network.Unique.API.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Network.Unique.API.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (use != null)
            {
                localVarRequestOptions.QueryParameters.Add(Network.Unique.API.Client.ClientUtils.ParameterToMultiMap("", "use", use));
            }
            if (withFee != null)
            {
                localVarRequestOptions.QueryParameters.Add(Network.Unique.API.Client.ClientUtils.ParameterToMultiMap("", "withFee", withFee));
            }
            if (verify != null)
            {
                localVarRequestOptions.QueryParameters.Add(Network.Unique.API.Client.ClientUtils.ParameterToMultiMap("", "verify", verify));
            }
            if (callbackUrl != null)
            {
                localVarRequestOptions.QueryParameters.Add(Network.Unique.API.Client.ClientUtils.ParameterToMultiMap("", "callbackUrl", callbackUrl));
            }
            if (nonce != null)
            {
                localVarRequestOptions.QueryParameters.Add(Network.Unique.API.Client.ClientUtils.ParameterToMultiMap("", "nonce", nonce));
            }
            localVarRequestOptions.Data = setTransfersEnabledRequest;

            localVarRequestOptions.Operation = "CollectionsApi.SetTransfersEnabled";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (SeedAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<SetTransfersEnabledDefaultResponse>("/v1/collections/transfers-enabled", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SetTransfersEnabled", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Network.Unique.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="setTransfersEnabledRequest"></param>
        /// <param name="use"> (optional)</param>
        /// <param name="withFee"> (optional, default to false) (deprecated)</param>
        /// <param name="verify"> (optional, default to false)</param>
        /// <param name="callbackUrl"> (optional)</param>
        /// <param name="nonce"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SetTransfersEnabledDefaultResponse</returns>
        public async System.Threading.Tasks.Task<SetTransfersEnabledDefaultResponse> SetTransfersEnabledAsync(SetTransfersEnabledRequest setTransfersEnabledRequest, string use = default(string), bool? withFee = default(bool?), bool? verify = default(bool?), string callbackUrl = default(string), decimal? nonce = default(decimal?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Network.Unique.API.Client.ApiResponse<SetTransfersEnabledDefaultResponse> localVarResponse = await SetTransfersEnabledWithHttpInfoAsync(setTransfersEnabledRequest, use, withFee, verify, callbackUrl, nonce, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Network.Unique.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="setTransfersEnabledRequest"></param>
        /// <param name="use"> (optional)</param>
        /// <param name="withFee"> (optional, default to false) (deprecated)</param>
        /// <param name="verify"> (optional, default to false)</param>
        /// <param name="callbackUrl"> (optional)</param>
        /// <param name="nonce"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SetTransfersEnabledDefaultResponse)</returns>
        public async System.Threading.Tasks.Task<Network.Unique.API.Client.ApiResponse<SetTransfersEnabledDefaultResponse>> SetTransfersEnabledWithHttpInfoAsync(SetTransfersEnabledRequest setTransfersEnabledRequest, string use = default(string), bool? withFee = default(bool?), bool? verify = default(bool?), string callbackUrl = default(string), decimal? nonce = default(decimal?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'setTransfersEnabledRequest' is set
            if (setTransfersEnabledRequest == null)
            {
                throw new Network.Unique.API.Client.ApiException(400, "Missing required parameter 'setTransfersEnabledRequest' when calling CollectionsApi->SetTransfersEnabled");
            }


            Network.Unique.API.Client.RequestOptions localVarRequestOptions = new Network.Unique.API.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Network.Unique.API.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Network.Unique.API.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (use != null)
            {
                localVarRequestOptions.QueryParameters.Add(Network.Unique.API.Client.ClientUtils.ParameterToMultiMap("", "use", use));
            }
            if (withFee != null)
            {
                localVarRequestOptions.QueryParameters.Add(Network.Unique.API.Client.ClientUtils.ParameterToMultiMap("", "withFee", withFee));
            }
            if (verify != null)
            {
                localVarRequestOptions.QueryParameters.Add(Network.Unique.API.Client.ClientUtils.ParameterToMultiMap("", "verify", verify));
            }
            if (callbackUrl != null)
            {
                localVarRequestOptions.QueryParameters.Add(Network.Unique.API.Client.ClientUtils.ParameterToMultiMap("", "callbackUrl", callbackUrl));
            }
            if (nonce != null)
            {
                localVarRequestOptions.QueryParameters.Add(Network.Unique.API.Client.ClientUtils.ParameterToMultiMap("", "nonce", nonce));
            }
            localVarRequestOptions.Data = setTransfersEnabledRequest;

            localVarRequestOptions.Operation = "CollectionsApi.SetTransfersEnabled";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (SeedAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<SetTransfersEnabledDefaultResponse>("/v1/collections/transfers-enabled", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SetTransfersEnabled", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Network.Unique.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="transferRequest"></param>
        /// <param name="use"> (optional)</param>
        /// <param name="withFee"> (optional, default to false) (deprecated)</param>
        /// <param name="verify"> (optional, default to false)</param>
        /// <param name="callbackUrl"> (optional)</param>
        /// <param name="nonce"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>TransferDefaultResponse</returns>
        public TransferDefaultResponse Transfer(TransferRequest transferRequest, string use = default(string), bool? withFee = default(bool?), bool? verify = default(bool?), string callbackUrl = default(string), decimal? nonce = default(decimal?), int operationIndex = 0)
        {
            Network.Unique.API.Client.ApiResponse<TransferDefaultResponse> localVarResponse = TransferWithHttpInfo(transferRequest, use, withFee, verify, callbackUrl, nonce);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Network.Unique.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="transferRequest"></param>
        /// <param name="use"> (optional)</param>
        /// <param name="withFee"> (optional, default to false) (deprecated)</param>
        /// <param name="verify"> (optional, default to false)</param>
        /// <param name="callbackUrl"> (optional)</param>
        /// <param name="nonce"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of TransferDefaultResponse</returns>
        public Network.Unique.API.Client.ApiResponse<TransferDefaultResponse> TransferWithHttpInfo(TransferRequest transferRequest, string use = default(string), bool? withFee = default(bool?), bool? verify = default(bool?), string callbackUrl = default(string), decimal? nonce = default(decimal?), int operationIndex = 0)
        {
            // verify the required parameter 'transferRequest' is set
            if (transferRequest == null)
            {
                throw new Network.Unique.API.Client.ApiException(400, "Missing required parameter 'transferRequest' when calling CollectionsApi->Transfer");
            }

            Network.Unique.API.Client.RequestOptions localVarRequestOptions = new Network.Unique.API.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Network.Unique.API.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Network.Unique.API.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (use != null)
            {
                localVarRequestOptions.QueryParameters.Add(Network.Unique.API.Client.ClientUtils.ParameterToMultiMap("", "use", use));
            }
            if (withFee != null)
            {
                localVarRequestOptions.QueryParameters.Add(Network.Unique.API.Client.ClientUtils.ParameterToMultiMap("", "withFee", withFee));
            }
            if (verify != null)
            {
                localVarRequestOptions.QueryParameters.Add(Network.Unique.API.Client.ClientUtils.ParameterToMultiMap("", "verify", verify));
            }
            if (callbackUrl != null)
            {
                localVarRequestOptions.QueryParameters.Add(Network.Unique.API.Client.ClientUtils.ParameterToMultiMap("", "callbackUrl", callbackUrl));
            }
            if (nonce != null)
            {
                localVarRequestOptions.QueryParameters.Add(Network.Unique.API.Client.ClientUtils.ParameterToMultiMap("", "nonce", nonce));
            }
            localVarRequestOptions.Data = transferRequest;

            localVarRequestOptions.Operation = "CollectionsApi.Transfer";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (SeedAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Patch<TransferDefaultResponse>("/v1/collections/transfer", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("Transfer", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Network.Unique.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="transferRequest"></param>
        /// <param name="use"> (optional)</param>
        /// <param name="withFee"> (optional, default to false) (deprecated)</param>
        /// <param name="verify"> (optional, default to false)</param>
        /// <param name="callbackUrl"> (optional)</param>
        /// <param name="nonce"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of TransferDefaultResponse</returns>
        public async System.Threading.Tasks.Task<TransferDefaultResponse> TransferAsync(TransferRequest transferRequest, string use = default(string), bool? withFee = default(bool?), bool? verify = default(bool?), string callbackUrl = default(string), decimal? nonce = default(decimal?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Network.Unique.API.Client.ApiResponse<TransferDefaultResponse> localVarResponse = await TransferWithHttpInfoAsync(transferRequest, use, withFee, verify, callbackUrl, nonce, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Network.Unique.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="transferRequest"></param>
        /// <param name="use"> (optional)</param>
        /// <param name="withFee"> (optional, default to false) (deprecated)</param>
        /// <param name="verify"> (optional, default to false)</param>
        /// <param name="callbackUrl"> (optional)</param>
        /// <param name="nonce"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (TransferDefaultResponse)</returns>
        public async System.Threading.Tasks.Task<Network.Unique.API.Client.ApiResponse<TransferDefaultResponse>> TransferWithHttpInfoAsync(TransferRequest transferRequest, string use = default(string), bool? withFee = default(bool?), bool? verify = default(bool?), string callbackUrl = default(string), decimal? nonce = default(decimal?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'transferRequest' is set
            if (transferRequest == null)
            {
                throw new Network.Unique.API.Client.ApiException(400, "Missing required parameter 'transferRequest' when calling CollectionsApi->Transfer");
            }


            Network.Unique.API.Client.RequestOptions localVarRequestOptions = new Network.Unique.API.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Network.Unique.API.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Network.Unique.API.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (use != null)
            {
                localVarRequestOptions.QueryParameters.Add(Network.Unique.API.Client.ClientUtils.ParameterToMultiMap("", "use", use));
            }
            if (withFee != null)
            {
                localVarRequestOptions.QueryParameters.Add(Network.Unique.API.Client.ClientUtils.ParameterToMultiMap("", "withFee", withFee));
            }
            if (verify != null)
            {
                localVarRequestOptions.QueryParameters.Add(Network.Unique.API.Client.ClientUtils.ParameterToMultiMap("", "verify", verify));
            }
            if (callbackUrl != null)
            {
                localVarRequestOptions.QueryParameters.Add(Network.Unique.API.Client.ClientUtils.ParameterToMultiMap("", "callbackUrl", callbackUrl));
            }
            if (nonce != null)
            {
                localVarRequestOptions.QueryParameters.Add(Network.Unique.API.Client.ClientUtils.ParameterToMultiMap("", "nonce", nonce));
            }
            localVarRequestOptions.Data = transferRequest;

            localVarRequestOptions.Operation = "CollectionsApi.Transfer";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (SeedAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PatchAsync<TransferDefaultResponse>("/v1/collections/transfer", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("Transfer", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

    }
}
